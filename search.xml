<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>tar命令打包解压</title>
      <link href="/2019/11/27/tar/"/>
      <url>/2019/11/27/tar/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在维护配置服务器时，难免会要用到压缩，解压缩，打包，解包等，这时候<code>tar</code>命令就是是必不可少的一个功能强大的工具。linux中最流行的<code>tar</code>是麻雀虽小，五脏俱全，功能强大。<br><code>tar</code>命令可以为linux的文件和目录创建档案。利用<code>tar</code>，可以为某一特定文件创建档案(备份文件)，也可以在档案中改变文件，或者向档案中加入新的文件。<code>tar</code>最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。利用<code>tar</code>命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。首先要弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。<br>为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包(<code>tar</code>命令)，然后再用压缩程序进行压缩(<code>gzip</code>, <code>bzip2</code>命令)。<br>linux下最常用的打包程序就是<code>tar</code>了，使用tar程序打出来的包我们常称为<code>tar</code>包，<code>tar</code>包文件的命令通常都是以<code>.tar</code>结尾的。生成<code>tar</code>包后，就可以用其它的程序来进行压缩。</p></blockquote><h3 id="1．命令格式"><a href="#1．命令格式" class="headerlink" title="1．命令格式"></a>1．命令格式</h3><p><code>tar[必要参数][选择参数][文件]</code></p><h3 id="2．命令功能"><a href="#2．命令功能" class="headerlink" title="2．命令功能"></a>2．命令功能</h3><p>用来压缩和解压文件。tar本身不具有压缩功能，它是调用压缩功能实现的。</p><h3 id="3．命令参数"><a href="#3．命令参数" class="headerlink" title="3．命令参数"></a>3．命令参数</h3><p><strong>必要参数有如下：</strong></p><ul><li>-A 新增压缩文件到已存在的压缩</li><li>-B 设置区块大小</li><li>-c 建立新的压缩文件</li><li>-d 记录文件的差别</li><li>-r 添加文件到已经压缩的文件</li><li>-u 添加改变了和现有的文件到已经存在的压缩文件</li><li>-x 从压缩的文件中提取文件</li><li>-t 显示压缩文件的内容</li><li>-z 支持gzip解压文件</li><li>-j 支持bzip2解压文件</li><li>-Z 支持compress解压文件</li><li>-v 显示操作过程</li><li>-l 文件系统边界设置</li><li>-k 保留原有文件不覆盖</li><li>-m 保留文件不被覆盖</li><li>-W 确认压缩文件的正确性</li></ul><p><strong>可选参数如下：</strong></p><ul><li>-b 设置区块数目</li><li>-C 切换到指定目录</li><li>-f 指定压缩文件</li><li>–help 显示帮助信息</li><li>–version 显示版本信息<h3 id="4．常见解压-压缩命令"><a href="#4．常见解压-压缩命令" class="headerlink" title="4．常见解压/压缩命令"></a>4．常见解压/压缩命令</h3></li><li>tar文件格式<br>  解包：tar xvf FileName.tar<br>  打包：tar cvf FileName.tar DirName<br>  (注：tar是打包，不是压缩！)</li><li>.gz文件格式<br>  解压1：gunzip FileName.gz<br>  解压2：gzip -d FileName.gz<br>  压缩：gzip FileName</li><li>.tar.gz 和 .tgz<br>  解压：tar zxvf FileName.tar.gz<br>  压缩：tar zcvf FileName.tar.gz DirName</li><li>.bz2文件格式<br>  解压1：bzip2 -d FileName.bz2<br>  解压2：bunzip2 FileName.bz2<br>  压缩： bzip2 -z FileName</li><li>.tar.bz2文件格式<br>  解压：tar jxvf FileName.tar.bz2<br>  压缩：tar jcvf FileName.tar.bz2 DirName</li><li>.bz文件格式<br>  解压1：bzip2 -d FileName.bz<br>  解压2：bunzip2 FileName.bz<br>  压缩：未知</li><li>.tar.bz文件格式<br>  解压：tar jxvf FileName.tar.bz<br>  压缩：未知</li><li>.Z文件格式<br>  解压：uncompress FileName.Z<br>  压缩：compress FileName</li><li>.tar.Z文件格式<br>  解压：tar Zxvf FileName.tar.Z<br>  压缩：tar Zcvf FileName.tar.Z DirName</li><li>.zip文件格式<br>  解压：unzip FileName.zip<br>  压缩：zip FileName.zip DirName</li><li>.rar<br>  解压：rar x FileName.rar<br>  压缩：rar a FileName.rar DirName </li></ul><h3 id="5．使用实例"><a href="#5．使用实例" class="headerlink" title="5．使用实例"></a>5．使用实例</h3><h4 id="实例1：将文件全部打包成tar包"><a href="#实例1：将文件全部打包成tar包" class="headerlink" title="实例1：将文件全部打包成tar包"></a>实例1：将文件全部打包成tar包</h4><p>命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -cvf log1.tar log1.log<span class="token function">tar</span> -zcvf log2.tar.gz log2.log<span class="token function">tar</span> -jcvf log3.tar.bz2 log3.log</code></pre><blockquote><p>说明：<br>    <code>tar -cvf log1.tar log1.log</code>    仅打包，不压缩！<br>    <code>tar -zcvf log2.tar.gz log2.log</code>   打包后，以 <code>gzip</code> 压缩<br>    <code>tar -zcvf log.tar.bz2 log3.log</code>  打包后，以<code>bzip2</code> 压缩<br>    在参数<code>f</code> 之后的文件档名是自己取的，我们习惯上都用<code>.tar</code>来作为辨识。 如果加 <code>z</code>参数，则以 <code>.tar.gz</code>或 <code>.tgz</code>来代表<code>gzip</code> 压缩过的 <code>tar</code>包； 如果加 <code>j</code>参数，则以 <code>.tar.bz2</code>来作为tar包名。</p></blockquote><h4 id="实例2：查阅上述-tar包内有哪些文件"><a href="#实例2：查阅上述-tar包内有哪些文件" class="headerlink" title="实例2：查阅上述 tar包内有哪些文件"></a>实例2：查阅上述 tar包内有哪些文件</h4><p>命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -ztvf log2.tar.gz</code></pre><blockquote><p>说明：由于我们使用 gzip 压缩的log.tar.gz，所以要查阅log.tar.gz包内的文件时，就得要加上 z 这个参数了。</p></blockquote><h4 id="实例3：将-tar-包解压缩"><a href="#实例3：将-tar-包解压缩" class="headerlink" title="实例3：将 tar 包解压缩"></a>实例3：将 tar 包解压缩</h4><p>命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf /home/yiibai/log2.tar.gz</code></pre><blockquote><p>说明：在预设的情况下，我们可以将压缩档在任何地方解开的</p></blockquote><h4 id="实例4：只将-tar-内的-部分文件解压出来"><a href="#实例4：只将-tar-内的-部分文件解压出来" class="headerlink" title="实例4：只将 /tar 内的 部分文件解压出来"></a>实例4：只将 /tar 内的 部分文件解压出来</h4><p>命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf /home/yiibai/mylog.tar.gz log2020.log</code></pre><blockquote><p>说明：可以通过 <code>tar -ztvf</code>来查阅<code>tar</code> 包内的文件名称，如果单只要一个文件，就可以透过这个方式来解压部分文件！</p></blockquote><h4 id="实例5：文件备份下来，并且保存其权限"><a href="#实例5：文件备份下来，并且保存其权限" class="headerlink" title="实例5：文件备份下来，并且保存其权限"></a>实例5：文件备份下来，并且保存其权限</h4><p>命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zcvf log20.tar.gz log2018.log log2019.log</code></pre><blockquote><p>说明：这个 -p 的属性是很重要的，尤其是当您要保留原本文件的属性时</p></blockquote><h4 id="实例6：在文件夹当中，比某个日期新的文件才备份"><a href="#实例6：在文件夹当中，比某个日期新的文件才备份" class="headerlink" title="实例6：在文件夹当中，比某个日期新的文件才备份"></a>实例6：在文件夹当中，比某个日期新的文件才备份</h4><p>命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -N <span class="token string">"2017/11/13"</span> -zcvf log17.tar.gz /home/yiibai</code></pre><h4 id="实例7：备份文件夹内容是排除部分文件"><a href="#实例7：备份文件夹内容是排除部分文件" class="headerlink" title="实例7：备份文件夹内容是排除部分文件"></a>实例7：备份文件夹内容是排除部分文件</h4><p>命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> --exclude project/service -zcvf project.tar.gz project/*</code></pre><h4 id="实例8：压缩文件到指定目录"><a href="#实例8：压缩文件到指定目录" class="headerlink" title="实例8：压缩文件到指定目录"></a>实例8：压缩文件到指定目录</h4><p>命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -cvf data/project.tar.gz -C tools/back/</code></pre><blockquote><p>说明:添加-C 后压缩包不会包含被压缩文件的目录结构，如果不使用-C，则压缩包包含压缩文件的目录结构。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械键盘选什么轴合适</title>
      <link href="/2019/11/20/jianpan/"/>
      <url>/2019/11/20/jianpan/</url>
      
        <content type="html"><![CDATA[<h3 id="青轴"><a href="#青轴" class="headerlink" title="青轴"></a>青轴</h3><p>段落感最强、Click声音最大，机械感最强，是机械键盘的代表轴，需下压2.4mm才可触发，打字节奏感十足，但是声音较大，比较吵 , 压力克数为60g。有人将其比喻为Cherry的春天，爽快清脆的段落感如春天般舒畅。</p><h3 id="黑轴"><a href="#黑轴" class="headerlink" title="黑轴"></a>黑轴</h3><p>段落感最不明显，声音最小，与青轴形成鲜明对比，直上直下，下压1.5mm即可触发。有人将其比喻为Cherry的夏天，无论你想得到急速或舒缓的输入，黑轴都能自如应对，打字游戏都适合，但是由于触发键程短，压力克数较大，所以在游戏中有上佳的表现。黑轴机械键盘单个轴使用寿命长达5000万次(其他为2000万次)。</p><h3 id="茶轴"><a href="#茶轴" class="headerlink" title="茶轴"></a>茶轴</h3><p>比起青轴，段落感要弱很多，而对比黑轴，又不是直上直下的感觉，2mm即可触发，属于比较奢侈的机械轴。茶轴是几种轴中成本最高的轴，为两段式无声，也有人反应与薄膜手感相近，同时，茶轴</p><h3 id="红轴"><a href="#红轴" class="headerlink" title="红轴"></a>红轴</h3><p>与黑轴相似。但压力克数比黑轴小，起35，终60(黑轴起点为40)，是08年出的新轴，手感比较轻盈，敲击时没有段落感，直上直下，触发键程也同为2.0mm，敲击时更加轻松，能很好兼顾游戏和打字的使用需求。</p><table>    <tbody><tr>        <th>键盘轴</th>        <th>操作压力</th>        <th>声音</th>        <th>段落感</th>        <th>寿命</th>        <th>适用方式</th>    </tr>    <tr>        <td>黑轴</td>        <td>58.9g±14.7g</td>        <td>声音最小，无明显噪声</td>        <td>没有段落感</td>        <td>寿命长达5000万次</td>        <td>比较适合打游戏，不适合长时间打游戏<br>（指力太弱则不推荐）</td>    </tr>    <tr>        <td>青轴</td>        <td>58.9g±14.7g</td>        <td>声音清脆，有噪声</td>        <td>段落感很好</td>        <td>寿命2000万次</td>        <td>最适合打字的轴</td>    </tr>    <tr>        <td>茶轴</td>        <td>44.1g±14.7g</td>        <td>声音适中</td>        <td>轻微的段落感</td>        <td>寿命2000万次</td>        <td>介于打字和游戏的中间地带，全面兼顾</td>    </tr>    <tr>        <td>红轴</td>        <td>44.1g±14.7g</td>        <td>声音较小</td>        <td>没有段落感</td>        <td>寿命2000万次</td>        <td>打适合游戏、长时间打字，打字舒适强于茶轴</td>    </tr></tbody></table><h3 id="一般建议"><a href="#一般建议" class="headerlink" title="一般建议"></a>一般建议</h3><p><strong>游戏玩家：黑轴＞茶轴＞红轴＞青轴</strong><br><strong>办公打字：青轴＞红轴＞茶轴＞黑轴</strong></p><blockquote><p>温馨解答<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f438.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f438.png?v8">🐸</span></p></blockquote><ul><li>什么是机械键盘的“段落感”呢？<br><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f31d.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f31d.png?v8">🌝</span>这很难用文字描述。如果你慢慢滚动鼠标滚轮，会感觉有一个刻度微微卡着，但是你轻微一推，又很快滚过去。键盘的段落感和这个相似。使用过有段落感的机械键盘后，很容易理解。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis哨兵模式</title>
      <link href="/2019/11/15/redis3/"/>
      <url>/2019/11/15/redis3/</url>
      
        <content type="html"><![CDATA[<h3 id="一、为什么要用到哨兵"><a href="#一、为什么要用到哨兵" class="headerlink" title="一、为什么要用到哨兵"></a>一、为什么要用到哨兵</h3><p>哨兵(Sentinel)主要是为了解决在主从复制架构中出现宕机的情况,主要分为两种情况:</p><ul><li><strong>从Redis宕机</strong><ul><li>这个相对而言比较简单,在Redis中从库重新启动后会自动加入到主从架构中,自动完成同步数据。在Redis2.8版本后,主从断线后恢复的情况下实现增量复制。</li></ul></li><li><strong>主Redis宕机</strong><ul><li>这个相对而言就会复杂一些,需要以下2步才能完成<ul><li>第一步,在从数据库中执行SLAVEOF NO ONE命令,断开主从关系并且提升为主库继续服务</li><li>第二步,将主库重新启动后,执行SLAVEOF命令,将其设置为其他库的从库,这时数据就能更新回来<br>由于这个手动完成恢复的过程其实是比较麻烦的并且容易出错,所以Redis提供的哨兵(sentinel)的功能来解决.</li></ul></li></ul></li></ul><h3 id="二、什么是哨兵"><a href="#二、什么是哨兵" class="headerlink" title="二、什么是哨兵"></a>二、什么是哨兵</h3><p><strong>Redis-Sentinel是用于管理Redis集群,该系统执行以下三个任务:</strong></p><ul><li><strong>监控(Monitoring):</strong><ul><li>Sentinel会不断地检查你的主服务器和从服务器是否运作正常;</li></ul></li><li><strong>提醒(Notification):</strong><ul><li>当被监控的某个Redis服务器出现问题时,Sentinel可以通过API向管理员或者其他应用程序发送通知;</li></ul></li><li><strong>自动故障迁移(Automatic failover):</strong><ul><li>当一个主服务器不能正常工作时,Sentinel 会开始一次自动故障迁移操作,它会将失效主服务器的其中一个从服务器升级为新的主服务器,并让失效主服务器的其他从服务器改为复制新的主服务器;当客户端试图连接失效的主服务器时,集群也会向客户端返回新主服务器的地址,使得集群可以使用新主服务器代替失效服务器.</li></ul></li></ul><h3 id="三、Sentinel集群搭建"><a href="#三、Sentinel集群搭建" class="headerlink" title="三、Sentinel集群搭建"></a>三、Sentinel集群搭建</h3><p>在保证Redis主从架构集群可用的前提下,复制三份配置文件,主从模式配置可参考：<a href="https://www.faber.cc/2019/11/15/redis2/">https://www.faber.cc/2019/11/15/redis2/</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入redis所在目录</span>$ <span class="token function">cd</span> /redis-5.0.6<span class="token comment" spellcheck="true"># 创建6379、6380、6381目录,分别将安装目录下的sentinel.conf拷贝到这三个目录下</span>$ <span class="token function">mkdir</span> -p /data/redis/conf/ <span class="token operator">&amp;&amp;</span> <span class="token function">cp</span> sentinel.conf /usr/local/redis/conf/26379.conf$ <span class="token function">mkdir</span> -p /data/redis/conf/ <span class="token operator">&amp;&amp;</span> <span class="token function">cp</span> sentinel.conf /usr/local/redis/conf/26380.conf$ <span class="token function">mkdir</span> -p /data/redis/conf/ <span class="token operator">&amp;&amp;</span> <span class="token function">cp</span> sentinel.conf /usr/local/redis/conf/26381.conf</code></pre><p>分别配置哨兵,修改sentinel配置文件<code>vim /usr/local/redis/conf/6379.conf</code><br>修改内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加守护进程模式</span>daemonize <span class="token function">yes</span><span class="token comment" spellcheck="true"># 添加指明日志文件名</span>logfile <span class="token string">"/data/redis/logs/sentinel26379.log"</span><span class="token comment" spellcheck="true"># 修改工作目录</span><span class="token function">dir</span> <span class="token string">"/usr/local/redis/6379"</span><span class="token comment" spellcheck="true"># 修改启动端口</span>port 26379<span class="token comment" spellcheck="true"># 添加关闭保护模式</span>protected-mode no<span class="token comment" spellcheck="true"># 修改sentinel monitor</span>sentinel monitor macrog-master 127.0.0.1 6379 2<span class="token comment" spellcheck="true"># 将配置文件中mymaster全部替换macrog-master</span><span class="token comment" spellcheck="true"># 在末行模式下 输入 :%s/mymaster/macrog-master/g</span></code></pre><p>同上依次修改26380,26381配置</p><blockquote><p>说明：<br>macrog-master:监控主数据的名称,自定义即可,可以使用大小写字母和“.-_”符号<br>127.0.0.1:监控的主数据库的IP<br>6379:监控的主数据库的端口<br>2:最低通过票数</p></blockquote><p><strong>启动哨兵进程</strong></p><pre class=" language-bash"><code class="language-bash">$ /usr/local/redis/bin/redis-sentinel /usr/local/redis/conf/26379.conf $ /usr/local/redis/bin/redis-sentinel /usr/local/redis/conf/26380.conf$ /usr/local/redis/bin/redis-sentinel /usr/local/redis/conf/26381.conf 或者 $ /usr/local/redis/bin/redis-server /usr/local/redis/conf/26379.conf --sentinel$ /usr/local/redis/bin/redis-server /usr/local/redis/conf/26380.conf --sentinel$ /usr/local/redis/bin/redis-server /usr/local/redis/conf/26381.conf --sentinel</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Nosql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis集群模式</title>
      <link href="/2019/11/15/redis4/"/>
      <url>/2019/11/15/redis4/</url>
      
        <content type="html"><![CDATA[<h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>1.首先在 192.168.252.101机器上 /opt/redis-4.0.1目录下创建 redis-cluster 目录</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> /opt/redis-4.0.1/redis-cluster</code></pre><p>2.在 redis-cluster 目录下，创建名为7000、7001、7002的目录</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /opt/redis-4.0.1/redis-cluster$ <span class="token function">mkdir</span> 7000 7001 7002</code></pre><p>3.分别修改这三个配置文件，把如下redis.conf 配置内容粘贴进去</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">vi</span> 7000/redis.conf $ <span class="token function">vi</span> 7001/redis.conf$ <span class="token function">vi</span> 7002/redis.conf</code></pre><p><strong>redis.conf 配置</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#端口7000,7001,7002</span>port 7000<span class="token comment" spellcheck="true">#默认ip为127.0.0.1，需要改为其他节点机器可访问的ip，否则创建集群时无法访问对应的端口，无法创建集群</span>bind 192.168.252.101<span class="token comment" spellcheck="true">#redis后台运行</span>daemonize <span class="token function">yes</span><span class="token comment" spellcheck="true">#pidfile文件对应7000，7001，7002</span>pidfile /var/run/redis_7000.pid<span class="token comment" spellcheck="true">#开启集群，把注释#去掉</span>cluster-enabled <span class="token function">yes</span><span class="token comment" spellcheck="true">#集群的配置，配置文件首次启动自动生成 7000，7001，7002          </span>cluster-config-file nodes_7000.conf<span class="token comment" spellcheck="true">#请求超时，默认15秒，可自行设置 </span>cluster-node-timeout 10100    <span class="token comment" spellcheck="true">#aof日志开启，有需要就开启，它会每次写操作都记录一条日志</span>appendonly <span class="token function">yes</span></code></pre><p>接着在另外两台机器上<code>(192.168.252.102，192.168.252.103)</code>重复以上三步，只是把目录改为<code>7003、7004、7005、7006、7007、7008</code>对应的配置文件也按照这个规则修改即可</p><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#第一台机器上执行 3个节点</span>$ <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> /opt/redis-4.0.1/src/redis-server /opt/redis-4.0.1/redis-cluster/700<span class="token variable">$i</span>/redis.conf<span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token comment" spellcheck="true">#第二台机器上执行 3个节点</span>$ <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> /opt/redis-4.0.1/src/redis-server /opt/redis-4.0.1/redis-cluster/700<span class="token variable">$i</span>/redis.conf<span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token comment" spellcheck="true">#第三台机器上执行 3个节点 </span>$ <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> /opt/redis-4.0.1/src/redis-server /opt/redis-4.0.1/redis-cluster/700<span class="token variable">$i</span>/redis.conf<span class="token punctuation">;</span> <span class="token keyword">done</span></code></pre><h3 id="检查服务"><a href="#检查服务" class="headerlink" title="检查服务"></a>检查服务</h3><p>检查各 Redis 各个节点启动情况</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> redis           //redis是否启动成功$ <span class="token function">netstat</span> -tnlp <span class="token operator">|</span> <span class="token function">grep</span> redis    //监听redis端口</code></pre><h3 id="安装-Ruby"><a href="#安装-Ruby" class="headerlink" title="安装 Ruby"></a>安装 Ruby</h3><pre class=" language-bash"><code class="language-bash">$ yum -y <span class="token function">install</span> ruby ruby-devel rubygems rpm-build$ gem <span class="token function">install</span> redis</code></pre><h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><blockquote><p>注意：在任意一台上运行 不要在每台机器上都运行，一台就够了</p></blockquote><p>Redis 官方提供了<code>redis-trib.rb</code>这个工具，就在解压目录的<code>src</code>目录中</p><pre class=" language-bash"><code class="language-bash">$ /opt/redis-4.0.1/src/redis-trib.rb create --replicas 1 192.168.252.101:7000 192.168.252.101:7001 192.168.252.101:7002 192.168.252.102:7003 192.168.252.102:7004 192.168.252.102:7005 192.168.252.103:7006 192.168.252.103:7007 192.168.252.103:7008</code></pre><p>出现以下内容</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost redis-cluster<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># /opt/redis-4.0.1/src/redis-trib.rb create --replicas 1 192.168.252.101:7000 192.168.252.101:7001 192.168.252.101:7002 192.168.252.102:7003 192.168.252.102:7004 192.168.252.102:7005 192.168.252.103:7006 192.168.252.103:7007 192.168.252.103:7008</span><span class="token operator">>></span><span class="token operator">></span> Creating cluster<span class="token operator">>></span><span class="token operator">></span> Performing <span class="token function">hash</span> slots allocation on 9 nodes<span class="token punctuation">..</span>.Using 4 masters:192.168.252.101:7000192.168.252.102:7003192.168.252.103:7006192.168.252.101:7001Adding replica 192.168.252.102:7004 to 192.168.252.101:7000Adding replica 192.168.252.103:7007 to 192.168.252.102:7003Adding replica 192.168.252.101:7002 to 192.168.252.103:7006Adding replica 192.168.252.102:7005 to 192.168.252.101:7001Adding replica 192.168.252.103:7008 to 192.168.252.101:7000M: 7c622ac191edd40dd61d9b79b27f6f69d02a5bbf 192.168.252.101:7000   slots:0-4095 <span class="token punctuation">(</span>4096 slots<span class="token punctuation">)</span> masterM: 44c81c15b01d992cb9ede4ad35477ec853d70723 192.168.252.101:7001   slots:12288-16383 <span class="token punctuation">(</span>4096 slots<span class="token punctuation">)</span> masterS: 38f03c27af39723e1828eb62d1775c4b6e2c3638 192.168.252.101:7002   replicates f1abb62a8c9b448ea14db421bdfe3f1d8075189cM: 987965baf505a9aa43e50e46c76189c51a8f17ec 192.168.252.102:7003   slots:4096-8191 <span class="token punctuation">(</span>4096 slots<span class="token punctuation">)</span> masterS: 6555292fed9c5d52fcf5b983c441aff6f96923d5 192.168.252.102:7004   replicates 7c622ac191edd40dd61d9b79b27f6f69d02a5bbfS: 2b5ba254a0405d4efde4c459867b15176f79244a 192.168.252.102:7005   replicates 44c81c15b01d992cb9ede4ad35477ec853d70723M: f1abb62a8c9b448ea14db421bdfe3f1d8075189c 192.168.252.103:7006   slots:8192-12287 <span class="token punctuation">(</span>4096 slots<span class="token punctuation">)</span> masterS: eb4067373d36d8a8df07951f92794e67a6aac022 192.168.252.103:7007   replicates 987965baf505a9aa43e50e46c76189c51a8f17ecS: 2919e041dd3d1daf176d6800dcd262f4e727f366 192.168.252.103:7008   replicates 7c622ac191edd40dd61d9b79b27f6f69d02a5bbfCan I <span class="token keyword">set</span> the above configuration? <span class="token punctuation">(</span>type <span class="token string">'yes'</span> to accept<span class="token punctuation">)</span>: <span class="token function">yes</span></code></pre><p><strong>输入 yes</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">></span> Nodes configuration updated<span class="token operator">>></span><span class="token operator">></span> Assign a different config epoch to each node<span class="token operator">>></span><span class="token operator">></span> Sending CLUSTER MEET messages to <span class="token function">join</span> the clusterWaiting <span class="token keyword">for</span> the cluster to join<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using node 192.168.252.101:7000<span class="token punctuation">)</span>M: 7c622ac191edd40dd61d9b79b27f6f69d02a5bbf 192.168.252.101:7000   slots:0-4095 <span class="token punctuation">(</span>4096 slots<span class="token punctuation">)</span> master   2 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 6555292fed9c5d52fcf5b983c441aff6f96923d5 192.168.252.102:7004   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates 7c622ac191edd40dd61d9b79b27f6f69d02a5bbfM: 44c81c15b01d992cb9ede4ad35477ec853d70723 192.168.252.101:7001   slots:12288-16383 <span class="token punctuation">(</span>4096 slots<span class="token punctuation">)</span> master   1 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 2919e041dd3d1daf176d6800dcd262f4e727f366 192.168.252.103:7008   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates 7c622ac191edd40dd61d9b79b27f6f69d02a5bbfM: f1abb62a8c9b448ea14db421bdfe3f1d8075189c 192.168.252.103:7006   slots:8192-12287 <span class="token punctuation">(</span>4096 slots<span class="token punctuation">)</span> master   1 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: eb4067373d36d8a8df07951f92794e67a6aac022 192.168.252.103:7007   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates 987965baf505a9aa43e50e46c76189c51a8f17ecS: 38f03c27af39723e1828eb62d1775c4b6e2c3638 192.168.252.101:7002   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates f1abb62a8c9b448ea14db421bdfe3f1d8075189cS: 2b5ba254a0405d4efde4c459867b15176f79244a 192.168.252.102:7005   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates 44c81c15b01d992cb9ede4ad35477ec853d70723M: 987965baf505a9aa43e50e46c76189c51a8f17ec 192.168.252.102:7003   slots:4096-8191 <span class="token punctuation">(</span>4096 slots<span class="token punctuation">)</span> master   1 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All 16384 slots covered.</code></pre><h3 id="关闭集群"><a href="#关闭集群" class="headerlink" title="关闭集群"></a>关闭集群</h3><p>这样也可以，推荐</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">pkill</span> redis</code></pre><p>循环节点逐个关闭</p><pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> /opt/redis-4.0.1/src/redis-cli -c -h 192.168.252.101 -p 700<span class="token variable">$i</span> <span class="token function">shutdown</span><span class="token punctuation">;</span> <span class="token keyword">done</span>$ <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> /opt/redis-4.0.1/src/redis-cli -c -h 192.168.252.102 -p 700<span class="token variable">$i</span> <span class="token function">shutdown</span><span class="token punctuation">;</span> <span class="token keyword">done</span>$ <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> /opt/redis-4.0.1/src/redis-cli -c -h 192.168.252.103 -p 700<span class="token variable">$i</span> <span class="token function">shutdown</span><span class="token punctuation">;</span> <span class="token keyword">done</span></code></pre><h3 id="集群验证"><a href="#集群验证" class="headerlink" title="集群验证"></a>集群验证</h3><h4 id="连接集群测试"><a href="#连接集群测试" class="headerlink" title="连接集群测试"></a>连接集群测试</h4><p>参数 -C 可连接到集群，因为 redis.conf 将 bind 改为了ip地址，所以 -h 参数不可以省略，-p 参数为端口号</p><ul><li>我们在192.168.252.101机器redis 7000 的节点set 一个key</li></ul><pre class=" language-bash"><code class="language-bash">$ /opt/redis-4.0.1/src/redis-cli -h 192.168.252.101 -c -p 7000192.168.252.101:7000<span class="token operator">></span> <span class="token keyword">set</span> name www.ymq.io-<span class="token operator">></span> Redirected to slot <span class="token punctuation">[</span>5798<span class="token punctuation">]</span> located at 192.168.252.102:7003OK192.168.252.102:7003<span class="token operator">></span> get name<span class="token string">"www.ymq.io"</span>192.168.252.102:7003<span class="token operator">></span></code></pre><p>发现redis set name 之后重定向到192.168.252.102机器 redis 7003 这个节点</p><ul><li>我们在192.168.252.103机器redis 7008 的节点get一个key</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost redis-cluster<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># /opt/redis-4.0.1/src/redis-cli -h 192.168.252.103 -c -p 7008</span>192.168.252.103:7008<span class="token operator">></span> get name-<span class="token operator">></span> Redirected to slot <span class="token punctuation">[</span>5798<span class="token punctuation">]</span> located at 192.168.252.102:7003<span class="token string">"www.ymq.io"</span>192.168.252.102:7003<span class="token operator">></span> </code></pre><p>发现redis get name 重定向到192.168.252.102机器 redis 7003 这个节点</p><blockquote><p>如果您看到这样的现象，说明集群已经是可用的了</p></blockquote><h3 id="检查集群状态"><a href="#检查集群状态" class="headerlink" title="检查集群状态"></a>检查集群状态</h3><pre class=" language-bash"><code class="language-bash">$ /opt/redis-4.0.1/src/redis-trib.rb check 192.168.252.101:7000<span class="token operator">>></span><span class="token operator">></span> Performing Cluster Check <span class="token punctuation">(</span>using node 192.168.252.101:7000<span class="token punctuation">)</span>M: 7c622ac191edd40dd61d9b79b27f6f69d02a5bbf 192.168.252.101:7000   slots:0-4095 <span class="token punctuation">(</span>4096 slots<span class="token punctuation">)</span> master   2 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 6555292fed9c5d52fcf5b983c441aff6f96923d5 192.168.252.102:7004   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates 7c622ac191edd40dd61d9b79b27f6f69d02a5bbfM: 44c81c15b01d992cb9ede4ad35477ec853d70723 192.168.252.101:7001   slots:12288-16383 <span class="token punctuation">(</span>4096 slots<span class="token punctuation">)</span> master   1 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: 2919e041dd3d1daf176d6800dcd262f4e727f366 192.168.252.103:7008   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates 7c622ac191edd40dd61d9b79b27f6f69d02a5bbfM: f1abb62a8c9b448ea14db421bdfe3f1d8075189c 192.168.252.103:7006   slots:8192-12287 <span class="token punctuation">(</span>4096 slots<span class="token punctuation">)</span> master   1 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span>S: eb4067373d36d8a8df07951f92794e67a6aac022 192.168.252.103:7007   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates 987965baf505a9aa43e50e46c76189c51a8f17ecS: 38f03c27af39723e1828eb62d1775c4b6e2c3638 192.168.252.101:7002   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates f1abb62a8c9b448ea14db421bdfe3f1d8075189cS: 2b5ba254a0405d4efde4c459867b15176f79244a 192.168.252.102:7005   slots: <span class="token punctuation">(</span>0 slots<span class="token punctuation">)</span> slave   replicates 44c81c15b01d992cb9ede4ad35477ec853d70723M: 987965baf505a9aa43e50e46c76189c51a8f17ec 192.168.252.102:7003   slots:4096-8191 <span class="token punctuation">(</span>4096 slots<span class="token punctuation">)</span> master   1 additional replica<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All nodes agree about slots configuration.<span class="token operator">>></span><span class="token operator">></span> Check <span class="token keyword">for</span> <span class="token function">open</span> slots<span class="token punctuation">..</span>.<span class="token operator">>></span><span class="token operator">></span> Check slots coverage<span class="token punctuation">..</span>.<span class="token punctuation">[</span>OK<span class="token punctuation">]</span> All 16384 slots covered.</code></pre><h3 id="列出集群节点"><a href="#列出集群节点" class="headerlink" title="列出集群节点"></a>列出集群节点</h3><p>列出集群当前已知的所有节点（node），以及这些节点的相关信息</p><pre class=" language-bash"><code class="language-bash">$ /opt/redis-4.0.1/src/redis-cli -h 192.168.252.101 -c -p 7000192.168.252.101:7000<span class="token operator">></span> cluster nodes6555292fed9c5d52fcf5b983c441aff6f96923d5 192.168.252.102:7004@17004 slave 7c622ac191edd40dd61d9b79b27f6f69d02a5bbf 0 1502815268317 5 connected44c81c15b01d992cb9ede4ad35477ec853d70723 192.168.252.101:7001@17001 master - 0 1502815268000 2 connected 12288-163832919e041dd3d1daf176d6800dcd262f4e727f366 192.168.252.103:7008@17008 slave 7c622ac191edd40dd61d9b79b27f6f69d02a5bbf 0 1502815269000 9 connected7c622ac191edd40dd61d9b79b27f6f69d02a5bbf 192.168.252.101:7000@17000 myself,master - 0 1502815269000 1 connected 0-4095f1abb62a8c9b448ea14db421bdfe3f1d8075189c 192.168.252.103:7006@17006 master - 0 1502815269000 7 connected 8192-12287eb4067373d36d8a8df07951f92794e67a6aac022 192.168.252.103:7007@17007 slave 987965baf505a9aa43e50e46c76189c51a8f17ec 0 1502815267000 8 connected38f03c27af39723e1828eb62d1775c4b6e2c3638 192.168.252.101:7002@17002 slave f1abb62a8c9b448ea14db421bdfe3f1d8075189c 0 1502815269327 7 connected2b5ba254a0405d4efde4c459867b15176f79244a 192.168.252.102:7005@17005 slave 44c81c15b01d992cb9ede4ad35477ec853d70723 0 1502815270336 6 connected987965baf505a9aa43e50e46c76189c51a8f17ec 192.168.252.102:7003@17003 master - 0 1502815271345 4 connected 4096-8191192.168.252.101:7000<span class="token operator">></span> </code></pre><h3 id="打印集群信息"><a href="#打印集群信息" class="headerlink" title="打印集群信息"></a>打印集群信息</h3><pre class=" language-bash"><code class="language-bash">$ 192.168.252.101:7000<span class="token operator">></span> cluster infocluster_state:okcluster_slots_assigned:16384cluster_slots_ok:16384cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:9cluster_size:4cluster_current_epoch:9cluster_my_epoch:1cluster_stats_messages_ping_sent:485cluster_stats_messages_pong_sent:485cluster_stats_messages_sent:970cluster_stats_messages_ping_received:477cluster_stats_messages_pong_received:485cluster_stats_messages_meet_received:8cluster_stats_messages_received:970192.168.252.101:7000<span class="token operator">></span> </code></pre><h3 id="集群命令"><a href="#集群命令" class="headerlink" title="集群命令"></a>集群命令</h3><p>语法格式</p><pre class=" language-bash"><code class="language-bash">redis-cli -c -p port</code></pre><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><pre class=" language-bash"><code class="language-bash">cluster info ：打印集群的信息cluster nodes ：列出集群当前已知的所有节点（ node），以及这些节点的相关信息。</code></pre><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><pre class=" language-bash"><code class="language-bash">cluster meet <span class="token operator">&lt;</span>ip<span class="token operator">></span> <span class="token operator">&lt;</span>port<span class="token operator">></span> ：将 ip 和 port 所指定的节点添加到集群当中，让它成为集群的一份子。cluster forget <span class="token operator">&lt;</span>node_id<span class="token operator">></span> ：从集群中移除 node_id 指定的节点。cluster replicate <span class="token operator">&lt;</span>node_id<span class="token operator">></span> ：将当前节点设置为 node_id 指定的节点的从节点。cluster saveconfig ：将节点的配置文件保存到硬盘里面。</code></pre><h3 id="槽-slot"><a href="#槽-slot" class="headerlink" title="槽(slot)"></a>槽(slot)</h3><pre class=" language-bash"><code class="language-bash">cluster addslots <span class="token operator">&lt;</span>slot<span class="token operator">></span> <span class="token punctuation">[</span>slot <span class="token punctuation">..</span>.<span class="token punctuation">]</span> ：将一个或多个槽（ slot）指派（ assign）给当前节点。cluster delslots <span class="token operator">&lt;</span>slot<span class="token operator">></span> <span class="token punctuation">[</span>slot <span class="token punctuation">..</span>.<span class="token punctuation">]</span> ：移除一个或多个槽对当前节点的指派。cluster flushslots ：移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。cluster setslot <span class="token operator">&lt;</span>slot<span class="token operator">></span> node <span class="token operator">&lt;</span>node_id<span class="token operator">></span> ：将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽<span class="token operator">></span>，然后再进行指派。cluster setslot <span class="token operator">&lt;</span>slot<span class="token operator">></span> migrating <span class="token operator">&lt;</span>node_id<span class="token operator">></span> ：将本节点的槽 slot 迁移到 node_id 指定的节点中。cluster setslot <span class="token operator">&lt;</span>slot<span class="token operator">></span> importing <span class="token operator">&lt;</span>node_id<span class="token operator">></span> ：从 node_id 指定的节点中导入槽 slot 到本节点。cluster setslot <span class="token operator">&lt;</span>slot<span class="token operator">></span> stable ：取消对槽 slot 的导入（ import）或者迁移（ migrate）。</code></pre><h3 id="键"><a href="#键" class="headerlink" title="键"></a>键</h3><pre class=" language-bash"><code class="language-bash">cluster keyslot <span class="token operator">&lt;</span>key<span class="token operator">></span> ：计算键 key 应该被放置在哪个槽上。cluster countkeysinslot <span class="token operator">&lt;</span>slot<span class="token operator">></span> ：返回槽 slot 目前包含的键值对数量。cluster getkeysinslot <span class="token operator">&lt;</span>slot<span class="token operator">></span> <span class="token operator">&lt;</span>count<span class="token operator">></span> ：返回 count 个 slot 槽中的键 。</code></pre><blockquote><p>作者：鹏磊<br>出处：<a href="http://www.ymq.io" target="_blank" rel="noopener">http://www.ymq.io</a><br>Email：<a href="mailto:admin@souyunku.com" target="_blank" rel="noopener">admin@souyunku.com</a><br>参考链接：<a href="https://segmentfault.com/a/1190000010682551" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010682551</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Nosql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis主从配置</title>
      <link href="/2019/11/15/redis2/"/>
      <url>/2019/11/15/redis2/</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装Redis"><a href="#一、安装Redis" class="headerlink" title="一、安装Redis"></a>一、安装Redis</h3><p>可以参考 <a href="https://www.faber.cc/2019/11/15/redis1/">redis的安装与介绍</a></p><h3 id="二、修改Rdis配置文件"><a href="#二、修改Rdis配置文件" class="headerlink" title="二、修改Rdis配置文件"></a>二、修改Rdis配置文件</h3><p>这里用一个主库、两个从库来举例：<br>创建主库的配置文件：（文件存放位置也最好放在指定目录下面方便查找）<br>我在配置文件统一放置在/data/redis/conf中</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /data/redis/conf$ <span class="token function">cp</span> redis.conf redis-6379.conf  $ <span class="token function">cp</span> redis.conf redis-6380.conf $ <span class="token function">cp</span> redis.conf redis-6381.conf</code></pre><p><strong>redis-6379.conf配置文件如下：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#主表的配置文件</span><span class="token comment" spellcheck="true"># Redis使用后台模式</span>daemonize <span class="token function">yes</span><span class="token comment" spellcheck="true"># 注释以下内容开启远程访问</span><span class="token comment" spellcheck="true"># bind 127.0.0.1</span><span class="token comment" spellcheck="true"># 修改启动端口为6379</span>port 6379<span class="token comment" spellcheck="true"># 修改pidfile指向路径--Redis以守护进程方式运行时把pid写入文件</span>pidfile /data/redis/conf/redis_6379.pid<span class="token comment" spellcheck="true">#数据库的存放位置 自己定义</span><span class="token function">dir</span> /data/redis/db/master/</code></pre><p><strong>redis-6380.conf配置文件如下：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Redis使用后台模式</span>daemonize <span class="token function">yes</span><span class="token comment" spellcheck="true"># 关闭保护模式</span><span class="token comment" spellcheck="true">#protected-mode no</span><span class="token comment" spellcheck="true"># 注释以下内容开启远程访问</span><span class="token comment" spellcheck="true"># bind 127.0.0.1</span><span class="token comment" spellcheck="true"># 修改启动端口为6379</span>port 6380<span class="token comment" spellcheck="true"># 修改pidfile指向路径</span>pidfile /data/redis/conf/redis_6380.pid<span class="token comment" spellcheck="true">#数据库的存放位置</span><span class="token function">dir</span> /usr/local/redis-3.0.4/db/slave_one<span class="token comment" spellcheck="true">#Slaveof命令可以将当前服务器转变为指定服务器的从属服务器(slave server)。</span>slaveof 127.0.0.1 6379</code></pre><p><strong>redis-6381.conf配置文件如下：</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Redis使用后台模式</span>daemonize <span class="token function">yes</span><span class="token comment" spellcheck="true"># 关闭保护模式</span><span class="token comment" spellcheck="true">#protected-mode no</span><span class="token comment" spellcheck="true"># 注释以下内容开启远程访问</span><span class="token comment" spellcheck="true"># bind 127.0.0.1</span><span class="token comment" spellcheck="true"># 修改启动端口为6379</span>port 6381<span class="token comment" spellcheck="true"># 修改pidfile指向路径</span>pidfile /data/redis/conf/redis_6381.pid<span class="token comment" spellcheck="true">#数据库的存放位置</span><span class="token function">dir</span> /data/redis/db/slave_two/<span class="token comment" spellcheck="true">#Slaveof命令可以将当前服务器转变为指定服务器的从属服务器(slave server)。</span>slaveof 127.0.0.1 6379</code></pre><h3 id="三、启动Redis服务"><a href="#三、启动Redis服务" class="headerlink" title="三、启动Redis服务"></a>三、启动Redis服务</h3><p>使用新创建的配置文件启动redis服务</p><pre class=" language-bash"><code class="language-bash">$ /data/redis/bin/redis-server /data/redis/conf/redis-6379.conf $ /data/redis/bin/redis-server /data/redis/conf/redis-6380.conf $ /data/redis/bin/redis-server /data/redis/conf/redis-6381.conf </code></pre><p>检查redis是否启动成功，如下所示表示启动成功。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> redisroot    8898    1   0 20:29 ?       00:00:01  /data/redis/bin/redis-server  *:6379root    8956    1   0 20:30 ?       00:00:01  /data/redis/bin/redis-server  *:6380root    8959    1   0 20:30 ?       00:00:01  /data/redis/bin/redis-server  *:6381root   100325  2297  0 20:56 pts/1       00:00:01 <span class="token function">grep</span> redis</code></pre><h3 id="四、验证主从"><a href="#四、验证主从" class="headerlink" title="四、验证主从"></a>四、验证主从</h3><p>利用redis-cli连接本地redis进行查看。首先连接redis-6379的客户端：<br>在主库中插入一条数据</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#默认连接6379端口</span>$ /data/redis/bin/redis-cli127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> username <span class="token function">test</span>OK127.0.0.1:6379<span class="token operator">></span> get username<span class="token string">"test"</span>127.0.0.1:6379<span class="token operator">></span></code></pre><p>切换至从库。检查数据是否存在。存在及配置主从生效。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#连接6380从库</span>/usr/local/bin/redis-cli -p 6380127.0.0.1:6379<span class="token operator">></span> get username<span class="token string">"test"</span>127.0.0.1:6379<span class="token operator">></span> quit<span class="token comment" spellcheck="true">#连接6381从库</span>/usr/local/bin/redis-cli -p 6381127.0.0.1:6379<span class="token operator">></span> get username<span class="token string">"test"</span>127.0.0.1:6379<span class="token operator">></span> quit</code></pre><p>或者直接在redis命令中输入以下内容</p><pre class=" language-bash"><code class="language-bash">$ /data/redis/bin/redis-cli127.0.0.1:6379<span class="token operator">></span> info replication<span class="token comment" spellcheck="true"># Replication</span>role:masterconnected_salves:2slave0:ip<span class="token operator">=</span>127.0.0.1,port<span class="token operator">=</span>6380,state<span class="token operator">=</span>online,offset<span class="token operator">=</span>11682,lag<span class="token operator">=</span>0slave0:ip<span class="token operator">=</span>127.0.0.1,port<span class="token operator">=</span>6381,state<span class="token operator">=</span>online,offset<span class="token operator">=</span>11682,lag<span class="token operator">=</span>0master_repl_offset:11682repl_backlog_active:1repl_backlog_size:1048567repl_backlog_first_byte_offset:2repl_backlog_histlen:11681<span class="token punctuation">..</span>.</code></pre><p>到此Redis的主从已经配置完成</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Nosql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的安装与介绍</title>
      <link href="/2019/11/15/redis1/"/>
      <url>/2019/11/15/redis1/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Redis介绍"><a href="#一、Redis介绍" class="headerlink" title="一、Redis介绍"></a>一、Redis介绍</h3><p>Redis是当前比较热门的NOSQL系统之一，它是一个key-value存储系统。和Memcache类似，但很大程度补偿了Memcache的不足，它支持存储的value类型相对更多，包括string、list、set、zset和hash。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作。在此基础上，Redis支持各种不同方式的排序。<br><br>和Memcache一样，Redis数据都是缓存在计算机内存中，不同的是，Memcache只能将数据缓存到内存中，无法自动定期写入硬盘，这就表示，一断电或重启，内存清空，数据丢失。所以Memcache的应用场景适用于缓存无需持久化的数据。而Redis不同的是它会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，实现数据的持久化。</p><h3 id="二、Redis的安装"><a href="#二、Redis的安装" class="headerlink" title="二、Redis的安装"></a>二、Redis的安装</h3><p>下面介绍在Linux环境下，Redis的安装与部署<br>1、首先上官网下载Redis 压缩包，地址：<a href="http://redis.io/download" target="_blank" rel="noopener">http://redis.io/download</a> 下载稳定版即可。<br>2、通过远程管理工具，将压缩包拷贝到Linux服务器中，提取和编译Redis</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">wget</span> http://download.redis.io/releases/redis-5.0.6.tar.gz$ <span class="token function">tar</span> xzf redis-5.0.6.tar.gz$ <span class="token function">cd</span> redis-5.0.6$ <span class="token function">make</span></code></pre><p>安装结束没有报错即安装成功<br>3、为了方便管理，将Redis文件中的conf配置文件和常用命令移动到统一文件中，创建bin和redis.conf文件：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p /data/redis/bin$ <span class="token function">mkdir</span> -p /data/redis/conf$ <span class="token function">mv</span> /redis-5.0.6/redis.conf /data/redis/conf$ <span class="token function">cd</span> /redis-5.0.6/src$ <span class="token function">mv</span> mkreleasdhdr.sh redis-benchmark redis-check-aof redis-check-dump redis-cli redis-server /data/redis/bin</code></pre><p>4、编辑conf文件，将daemonize属性改为yes（表明需要在后台运行）</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#是否在后台执行，yes：后台运行；no：不是后台运行（老版本默认）</span>daemonize <span class="token function">yes</span></code></pre><p>5、执行<code>Redis-server</code>命令，启动Redis服务</p><pre class=" language-bash"><code class="language-bash">$ /data/redis/bin/redis-server /data/redis/conf/redis.conf</code></pre><p>6、可以使用内置客户端与Redis进行交互</p><pre class=" language-bash"><code class="language-bash">$ /data/redis/bin/redis-cli$ 127.0.0.1:6379<span class="token operator">></span> </code></pre><h3 id="三、Redis配置详解"><a href="#三、Redis配置详解" class="headerlink" title="三、Redis配置详解"></a>三、Redis配置详解</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">######################### 通用 #########################</span><span class="token comment" spellcheck="true"># 是否在后台执行，yes：后台运行；no：不是后台运行</span>daemonize <span class="token function">yes</span><span class="token comment" spellcheck="true"># 后台进程的pid文件存储位置</span>pidfile /var/run/redis.pid<span class="token comment" spellcheck="true"># 默认监听端口</span>port 6379<span class="token comment" spellcheck="true"># 在高并发的环境中，为避免慢客户端的连接问题，需要设置一个高速后台日志</span>tcp-backlog 511<span class="token comment" spellcheck="true"># 只接受以下绑定的IP请求</span><span class="token comment" spellcheck="true"># Examples:</span><span class="token comment" spellcheck="true"># bind 192.168.1.100 10.0.0.1</span>bind 127.0.0.1<span class="token comment" spellcheck="true"># 设置unix监听，默认为空</span><span class="token comment" spellcheck="true"># unixsocket /tmp/redis.sock</span><span class="token comment" spellcheck="true"># unixsocketperm 700</span><span class="token comment" spellcheck="true">#客户端空闲多长时间，关闭链接，0表示不关闭</span><span class="token function">timeout</span> 0<span class="token comment" spellcheck="true"># TCP keepalive.</span><span class="token comment" spellcheck="true"># 如果是非零值，当失去链接时，会使用SO_KEEPALIVE发送TCP ACKs 到客户端。</span><span class="token comment" spellcheck="true"># 这个参数有两个作用:</span><span class="token comment" spellcheck="true"># 1.检测断点。</span><span class="token comment" spellcheck="true"># 2.从网络中间设备来看，就是保持链接</span><span class="token comment" spellcheck="true"># 在Linux上，设定的时间就是发送ACKs的周期。</span><span class="token comment" spellcheck="true"># 注意：达到双倍的设定时间才会关闭链接。在其他内核上，周期依赖于内核设置。</span><span class="token comment" spellcheck="true"># 一个比较合理的值为60s</span>tcp-keepalive 0<span class="token comment" spellcheck="true"># 指定日志级别，以下记录信息依次递减</span><span class="token comment" spellcheck="true"># debug用于开发/测试</span><span class="token comment" spellcheck="true"># verbose没debug那么详细</span><span class="token comment" spellcheck="true"># notice适用于生产线</span><span class="token comment" spellcheck="true"># warning只记录非常重要的信息</span>loglevel notice<span class="token comment" spellcheck="true">#日志文件名称，如果为stdout则输出到标准输出端，如果是以后台进程运行则不产生日志</span>logfile <span class="token string">""</span><span class="token comment" spellcheck="true"># 要想启用系统日志记录器，设置一下选项为yes</span><span class="token comment" spellcheck="true"># syslog-enabled no</span><span class="token comment" spellcheck="true"># 指明syslog身份</span><span class="token comment" spellcheck="true"># syslog-ident redis</span><span class="token comment" spellcheck="true"># 指明syslog设备。必须是一个用户或者是local0 ~ local7之一</span><span class="token comment" spellcheck="true"># syslog-facility local0</span><span class="token comment" spellcheck="true">#设置数据库数目，第一个数据库编号为：0</span>databases 16<span class="token comment" spellcheck="true">######################### 快照 #########################</span><span class="token comment" spellcheck="true"># 在什么条件下保存数据库到磁盘，条件可以有很多个，满足任何一个条件都会进行快照存储</span><span class="token comment" spellcheck="true"># 在900秒之内有一次key的变化</span>save 900 1<span class="token comment" spellcheck="true"># 在300秒之内，有10个key的变化</span>save 300 10<span class="token comment" spellcheck="true"># 在60秒之内有10000个key变化</span>save 60 10000<span class="token comment" spellcheck="true"># 当持久化失败的时候，是否继续提供服务</span>stop-writes-on-bgsave-error <span class="token function">yes</span><span class="token comment" spellcheck="true"># 当写入磁盘时，是否使用LZF算法压缩数据，默认为yes</span>rdbcompression <span class="token function">yes</span><span class="token comment" spellcheck="true"># 是否添加CRC64校验到每个文件末尾--花费时间保证安全</span>rdbchecksum <span class="token function">yes</span><span class="token comment" spellcheck="true"># 磁盘上数据库的保存名称</span>dbfilename dump.rdb<span class="token comment" spellcheck="true"># Redis工作目录，以上数据库保存文件和AOF日志都会写入此目录</span><span class="token function">dir</span> ./<span class="token comment" spellcheck="true">######################### 主从同步 #########################</span><span class="token comment" spellcheck="true"># 主从复制，当本机是slave时配置</span><span class="token comment" spellcheck="true"># slaveof &lt;masterip> &lt;masterport></span><span class="token comment" spellcheck="true"># 当主机需要密码验证时候配置</span><span class="token comment" spellcheck="true"># masterauth &lt;master-password></span><span class="token comment" spellcheck="true"># 当slave和master丢失链接，或正处于同步过程中。是否响应客户端请求</span><span class="token comment" spellcheck="true"># 设置为yes表示响应</span><span class="token comment" spellcheck="true"># 设置为no，直接返回"SYNC with master in progress"（正在和主服务器同步中）</span>slave-serve-stale-data <span class="token function">yes</span><span class="token comment" spellcheck="true"># 设置slave是否为只读。</span><span class="token comment" spellcheck="true"># 注意：即使slave设置为只读，也不能令其暴露在不受信任的网络环境中</span>slave-read-only <span class="token function">yes</span><span class="token comment" spellcheck="true"># 无硬盘复制功能</span>repl-diskless-sync no<span class="token comment" spellcheck="true"># 等待多个slave一起来请求之间的间隔时间</span>repl-diskless-sync-delay 5<span class="token comment" spellcheck="true"># 设置slave给master发送ping的时间间隔</span><span class="token comment" spellcheck="true"># repl-ping-slave-period 10</span><span class="token comment" spellcheck="true"># 设置数据传输I/O，主机数据、ping响应超时时间，默认60s</span><span class="token comment" spellcheck="true"># 这个时间一定要比repl-ping-slave-period大，否则会不断检测到超时</span><span class="token comment" spellcheck="true"># repl-timeout 60</span><span class="token comment" spellcheck="true"># 是否在SYNC后slave socket上禁用TCP_NODELAY？</span><span class="token comment" spellcheck="true"># 如果你设置为yes，Redis会使用少量TCP报文和少量带宽发送数据给slave。</span><span class="token comment" spellcheck="true"># 但是这样会在slave端出现延迟。如果使用Linux内核的默认设置，大概40毫秒。</span><span class="token comment" spellcheck="true"># 如果你设置为no，那么在slave端研究就会减少但是同步带宽要增加。</span><span class="token comment" spellcheck="true"># 默认我们是为低延迟优化的。</span><span class="token comment" spellcheck="true"># 但是如果流量特别大或者主从服务器相距比较远，设置为yes比较合理。</span>repl-disable-tcp-nodelay no<span class="token comment" spellcheck="true"># 设置复制的后台日志大小。</span><span class="token comment" spellcheck="true"># 复制的后台日志越大， slave 断开连接及后来可能执行部分复制花的时间就越长。</span><span class="token comment" spellcheck="true"># 后台日志在至少有一个 slave 连接时，仅仅分配一次。</span><span class="token comment" spellcheck="true"># repl-backlog-size 1mb</span><span class="token comment" spellcheck="true"># 在 master 不再连接 slave 后，后台日志将被释放。下面的配置定义从最后一个 slave 断开连接后需要释放的时间（秒）。</span><span class="token comment" spellcheck="true"># 0 意味着从不释放后台日志</span><span class="token comment" spellcheck="true"># repl-backlog-ttl 3600</span><span class="token comment" spellcheck="true"># 设置slave优先级，默认为100</span><span class="token comment" spellcheck="true"># 当主服务器不能正确工作的时候，数字低的首先被提升为主服务器，但是0是禁用选择</span>slave-priority 100<span class="token comment" spellcheck="true"># 如果少于 N 个 slave 连接，且延迟时间 &lt;=M 秒，则 master 可配置停止接受写操作。</span><span class="token comment" spellcheck="true"># 例如需要至少 3 个 slave 连接，且延迟 &lt;=10 秒的配置：</span><span class="token comment" spellcheck="true"># min-slaves-to-write 3</span><span class="token comment" spellcheck="true"># min-slaves-max-lag 10</span><span class="token comment" spellcheck="true"># 设置 0 为禁用</span><span class="token comment" spellcheck="true"># 默认 min-slaves-to-write 为 0 （禁用）， min-slaves-max-lag 为 10</span><span class="token comment" spellcheck="true">######################### 安全 #########################</span><span class="token comment" spellcheck="true"># 设置客户端连接密码，因为Redis响应速度可以达到每秒100w次，所以密码要特别复杂</span><span class="token comment" spellcheck="true"># requirepass 1413</span><span class="token comment" spellcheck="true"># 命令重新命名，或者禁用。</span><span class="token comment" spellcheck="true"># 重命名命令为空字符串可以禁用一些危险命令比如：FLUSHALL删除所有数据</span><span class="token comment" spellcheck="true"># 需要注意的是，写入AOF文件或传送给slave的命令别名也许会引起一些问题</span><span class="token comment" spellcheck="true"># rename-command CONFIG ""</span><span class="token comment" spellcheck="true"># 设置客户端连接密码，因为Redis响应速度可以达到每秒100w次，所以密码要特别复杂</span>requirepass 1413<span class="token comment" spellcheck="true"># 命令重新命名，或者禁用。</span><span class="token comment" spellcheck="true"># 重命名命令为空字符串可以禁用一些危险命令比如：FLUSHALL删除所有数据</span><span class="token comment" spellcheck="true"># 需要注意的是，写入AOF文件或传送给slave的命令别名也许会引起一些问题</span><span class="token comment" spellcheck="true"># rename-command CONFIG ""</span><span class="token comment" spellcheck="true">######################### 限制 #########################</span><span class="token comment" spellcheck="true"># 设置最多链接客户端数量，默认为10000。</span><span class="token comment" spellcheck="true"># 实际可以接受的请求数目为设置值减去32，这32是Redis为内部文件描述符保留的</span><span class="token comment" spellcheck="true"># maxclients 10000</span><span class="token comment" spellcheck="true"># 设置最多链接客户端数量，默认为10000。</span><span class="token comment" spellcheck="true"># 实际可以接受的请求数目为设置值减去32，这32是Redis为内部文件描述符保留的</span><span class="token comment" spellcheck="true"># maxclients 10000</span><span class="token comment" spellcheck="true"># 设置最大使用内存数量，在把Redis当作LRU缓存时特别有用。</span><span class="token comment" spellcheck="true"># 设置的值要比系统能使用的值要小</span><span class="token comment" spellcheck="true"># 因为当启用删除算法时，slave输出缓存也要占用内存</span><span class="token comment" spellcheck="true"># maxmemory &lt;bytes></span><span class="token comment" spellcheck="true">#达到最大内存限制时，使用何种删除算法</span><span class="token comment" spellcheck="true"># volatile-lru  使用LRU算法移除带有过期标致的key</span><span class="token comment" spellcheck="true"># allkeys-lru -> 使用LRU算法移除任何key</span><span class="token comment" spellcheck="true"># volatile-random -> 随机移除一个带有过期标致的key</span><span class="token comment" spellcheck="true"># allkeys-random ->  随机移除一个key</span><span class="token comment" spellcheck="true"># volatile-ttl -> 移除最近要过期的key</span><span class="token comment" spellcheck="true"># noeviction -> 不删除key，当有写请求时，返回错误</span><span class="token comment" spellcheck="true">#默认设置为volatile-lru</span><span class="token comment" spellcheck="true"># maxmemory-policy noeviction</span><span class="token comment" spellcheck="true"># LRU和最小TTL算法没有精确的实现</span><span class="token comment" spellcheck="true"># 为了节省内存只在一个样本范围内选择一个最近最少使用的key，可以设置这个样本大小</span><span class="token comment" spellcheck="true"># maxmemory-samples 5</span><span class="token comment" spellcheck="true">######################### AO模式 #########################</span><span class="token comment" spellcheck="true"># AOF和RDB持久化可以同时启用</span><span class="token comment" spellcheck="true"># Redis启动时候会读取AOF文件，AOF文件有更好的持久化保证</span>appendonly no<span class="token comment" spellcheck="true"># AOF的保存名称，默认为appendonly.aof</span>appendfilename <span class="token string">"appendonly.aof"</span><span class="token comment" spellcheck="true"># 设置何时写入追加日志，又三种模式</span><span class="token comment" spellcheck="true"># no：表示由操作系统决定何时写入。性能最好，但可靠性最低</span><span class="token comment" spellcheck="true"># everysec：表示每秒执行一次写入。折中方案，推荐</span><span class="token comment" spellcheck="true"># always：表示每次都写入磁盘。性能最差，比上面的安全一些</span><span class="token comment" spellcheck="true"># appendfsync always</span>appendfsync everysec<span class="token comment" spellcheck="true"># appendfsync no</span><span class="token comment" spellcheck="true"># 当AOF同步策略设定为alway或everysec</span><span class="token comment" spellcheck="true"># 当后台存储进程（后台存储或者AOF日志后台写入）会产生很多磁盘开销</span><span class="token comment" spellcheck="true"># 某些Linux配置会使Redis因为fsync()调用产生阻塞很久</span><span class="token comment" spellcheck="true"># 现在还没有修复补丁，甚至使用不同线程进行fsync都会阻塞我们的同步write(2)调用。</span><span class="token comment" spellcheck="true"># 为了缓解这个问题，使用以下选项在一个BGSAVE或BGREWRITEAOF运行的时候</span><span class="token comment" spellcheck="true"># 可以阻止fsync()在主程序中被调用，</span>no-appendfsync-on-rewrite no<span class="token comment" spellcheck="true"># AOF自动重写（合并命令，减少日志大小）</span><span class="token comment" spellcheck="true"># 当AOF日志大小增加到一个特定比率，Redis调用BGREWRITEAOF自动重写日志文件</span><span class="token comment" spellcheck="true"># 原理：Redis 会记录上次重写后AOF文件的文件大小。</span><span class="token comment" spellcheck="true"># 如果刚启动，则记录启动时AOF大小</span><span class="token comment" spellcheck="true"># 这个基本大小会用来和当前大小比较。如果当前大小比特定比率大，就会触发重写。</span><span class="token comment" spellcheck="true"># 你也需要指定一个AOF需要被重写的最小值，这样会避免达到了比率。</span><span class="token comment" spellcheck="true"># 但是AOF文件还很小的情况下重写AOF文件。</span><span class="token comment" spellcheck="true"># 设置为0禁用自动重写</span>auto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mb<span class="token comment" spellcheck="true">#redis在启动时可以加载被截断的AOF文件，而不需要先执行 redis-check-aof 工具</span>aof-load-truncated <span class="token function">yes</span><span class="token comment" spellcheck="true">######################### LUA脚本 #########################</span><span class="token comment" spellcheck="true"># Lua脚本的最大执行时间，单位毫秒</span><span class="token comment" spellcheck="true"># 超时后会报错，并且计入日志</span><span class="token comment" spellcheck="true"># 当一个脚本运行时间超过了最大执行时间</span><span class="token comment" spellcheck="true"># 只有SCRIPT KILL和 SHUTDOWN NOSAVE两个命令可以使用。</span><span class="token comment" spellcheck="true"># SCRIPT KILL用于停止没有调用写命令的脚本。</span><span class="token comment" spellcheck="true"># SHUTDOWN NOSAVE是唯一的一个，在脚本的写命令正在执行</span><span class="token comment" spellcheck="true"># 用户又不想等待脚本的正常结束的情况下，关闭服务器的方法。</span><span class="token comment" spellcheck="true"># 以下选项设置为0或负数就会取消脚本执行时间限制</span>lua-time-limit 5000<span class="token comment" spellcheck="true">####################### redis集群  ########################</span><span class="token comment" spellcheck="true"># 是否启用集群</span><span class="token comment" spellcheck="true"># cluster-enabled yes</span><span class="token comment" spellcheck="true"># 集群配置文件</span><span class="token comment" spellcheck="true"># 集群配置变更后会自动写入改文件</span><span class="token comment" spellcheck="true"># cluster-config-file nodes-6379.conf</span><span class="token comment" spellcheck="true"># 节点互连超时的阀值</span><span class="token comment" spellcheck="true"># 节点超时时间，超过该时间无法连接主要Master节点后，会停止接受查询服务</span><span class="token comment" spellcheck="true"># cluster-node-timeout 15000</span><span class="token comment" spellcheck="true"># 控制从节点FailOver相关的设置,设为0，从节点会一直尝试启动FailOver.</span><span class="token comment" spellcheck="true"># 设为正数，失联大于一定时间（factor*节点TimeOut），不再进行FailOver</span><span class="token comment" spellcheck="true"># cluster-slave-validity-factor 10</span><span class="token comment" spellcheck="true"># 最小从节点连接数</span><span class="token comment" spellcheck="true"># cluster-migration-barrier 1</span><span class="token comment" spellcheck="true"># 默认为Yes,丢失一定比例Key后（可能Node无法连接或者挂掉），集群停止接受写操作</span><span class="token comment" spellcheck="true"># 设置为No，集群丢失Key的情况下仍提供查询服务</span><span class="token comment" spellcheck="true"># cluster-require-full-coverage yes</span><span class="token comment" spellcheck="true">######################### 慢查询 #########################</span><span class="token comment" spellcheck="true"># Redis慢查询日志记录超过设定时间的查询，且只记录执行命令的时间</span><span class="token comment" spellcheck="true"># 不记录I/O操作，比如：和客户端交互，发送回复等。</span><span class="token comment" spellcheck="true"># 时间单位为微妙，1000000微妙 = 1 秒</span><span class="token comment" spellcheck="true"># 设置为负数会禁用慢查询日志，设置为0会记录所有查询命令</span>slowlog-log-slower-than 10000<span class="token comment" spellcheck="true"># 日志长度没有限制，但是会消耗内存。超过日志长度后，最旧的记录会被移除</span><span class="token comment" spellcheck="true"># 使用SLOWLOG RESET命令可以回收内存</span>slowlog-max-len 128<span class="token comment" spellcheck="true">######################### 延迟监测 #########################</span><span class="token comment" spellcheck="true"># 系统只记录超过设定值的操作，单位是毫秒，0表示禁用该功能  </span><span class="token comment" spellcheck="true"># 可以通过命令“CONFIG SET latency-monitor-threshold &lt;milliseconds>” 直接设置而不需要重启redis  </span>latency-monitor-threshold 0<span class="token comment" spellcheck="true">######################### 事件通知 #########################</span><span class="token comment" spellcheck="true">#  当事件发生时， Redis 可以通知 Pub/Sub 客户端。</span><span class="token comment" spellcheck="true">#  可以在下表中选择 Redis 要通知的事件类型。事件类型由单个字符来标识：</span><span class="token comment" spellcheck="true"># K     Keyspace 事件，以 _keyspace@&lt;db>_ 的前缀方式发布</span><span class="token comment" spellcheck="true"># E     Keyevent 事件，以 _keysevent@&lt;db>_ 的前缀方式发布</span><span class="token comment" spellcheck="true"># g     通用事件（不指定类型），像 DEL, EXPIRE, RENAME, …</span><span class="token comment" spellcheck="true"># $     String 命令</span><span class="token comment" spellcheck="true"># s     Set 命令</span><span class="token comment" spellcheck="true"># h     Hash 命令</span><span class="token comment" spellcheck="true"># z     有序集合命令</span><span class="token comment" spellcheck="true"># x     过期事件（每次 key 过期时生成）</span><span class="token comment" spellcheck="true"># e     清除事件（当 key 在内存被清除时生成）</span><span class="token comment" spellcheck="true"># A     g$lshzxe 的别称，因此 ”AKE” 意味着所有的事件</span><span class="token comment" spellcheck="true"># notify-keyspace-events 带一个由 0 到多个字符组成的字符串参数。空字符串意思是通知被禁用。</span><span class="token comment" spellcheck="true">#  例子：启用 list 和通用事件：</span><span class="token comment" spellcheck="true"># notify-keyspace-events Elg</span><span class="token comment" spellcheck="true">#  默认所用的通知被禁用，因为用户通常不需要改特性，并且该特性会有性能损耗。</span><span class="token comment" spellcheck="true">#  注意如果你不指定至少 K 或 E 之一，不会发送任何事件。</span>notify-keyspace-events <span class="token string">""</span><span class="token comment" spellcheck="true">#notify-keyspace-events AKE</span><span class="token comment" spellcheck="true">######################### 高级设置 #########################</span><span class="token comment" spellcheck="true"># 当有少量条目的时候，哈希使用高效内存数据结构。最大的条目也不能超过设定的阈值。# “少量”定义如下：</span>hash-max-ziplist-entries 512hash-max-ziplist-value 64<span class="token comment" spellcheck="true"># 和哈希编码一样，少量列表也以特殊方式编码节省内存。“少量”设定如下：</span>list-max-ziplist-entries 512list-max-ziplist-value 64<span class="token comment" spellcheck="true"># 集合只在以下情况下使用特殊编码来节省内存</span><span class="token comment" spellcheck="true"># -->集合全部由64位带符号10进制整数构成的字符串组成</span><span class="token comment" spellcheck="true"># 下面的选项设置这个特殊集合的大小。</span>set-max-intset-entries 512<span class="token comment" spellcheck="true"># 当有序集合的长度和元素设定为以下数字时，又特殊编码节省内存</span>zset-max-ziplist-entries 128zset-max-ziplist-value 64<span class="token comment" spellcheck="true"># HyperLogLog 稀疏表示字节限制</span><span class="token comment" spellcheck="true"># 这个限制包含了16个字节的头部，当一个HyperLogLog使用sparse representation</span><span class="token comment" spellcheck="true"># 超过了这个显示，它就会转换到dense representation上</span>hll-sparse-max-bytes 3000<span class="token comment" spellcheck="true"># 哈希刷新使用每100个CPU毫秒中的1毫秒来帮助刷新主哈希表（顶级键值映射表）。</span><span class="token comment" spellcheck="true">#  Redis哈希表使用延迟刷新机制，越多操作，越多刷新。</span><span class="token comment" spellcheck="true"># 如果服务器空闲，刷新操作就不会进行，更多内存会被哈希表占用</span><span class="token comment" spellcheck="true"># 默认每秒进行10次主字典刷新，释放内存。</span><span class="token comment" spellcheck="true"># 如果你有硬性延迟需求，偶尔2毫秒的延迟无法忍受的话。设置为no</span><span class="token comment" spellcheck="true"># 否则设置为yes</span>activerehashing <span class="token function">yes</span><span class="token comment" spellcheck="true"># 客户端输出缓存限制强迫断开读取速度比较慢的客户端</span><span class="token comment" spellcheck="true"># 有三种类型的限制</span><span class="token comment" spellcheck="true"># normal -> 正常</span><span class="token comment" spellcheck="true"># slave  -> slave和 MONITOR</span><span class="token comment" spellcheck="true"># pubsub -> 客户端至少订阅了一个频道或者模式</span><span class="token comment" spellcheck="true"># 客户端输出缓存限制语法如下（时间单位：秒）</span><span class="token comment" spellcheck="true"># client-output-buffer-limit &lt;类别> &lt;强制限制> &lt;软性限制> &lt;软性时间></span><span class="token comment" spellcheck="true"># 达到强制限制缓存大小，立刻断开链接。</span><span class="token comment" spellcheck="true"># 达到软性限制，仍然会有软性时间大小的链接时间</span><span class="token comment" spellcheck="true"># 默认正常客户端无限制，只有请求后，异步客户端数据请求速度快于它能读取数据的速度</span><span class="token comment" spellcheck="true"># 订阅模式和主从客户端又默认限制，因为它们都接受推送。</span><span class="token comment" spellcheck="true"># 强制限制和软性限制都可以设置为0来禁用这个特性</span>client-output-buffer-limit normal 0 0 0client-output-buffer-limit slave 256mb 64mb 60client-output-buffer-limit pubsub 32mb 8mb 60<span class="token comment" spellcheck="true"># 设置Redis后台任务执行频率，比如清除过期键任务。</span><span class="token comment" spellcheck="true"># 设置范围为1到500，默认为10.越大CPU消耗越大，延迟越小。</span><span class="token comment" spellcheck="true"># 建议不要超过100</span>hz 10<span class="token comment" spellcheck="true"># 当子进程重写AOF文件，以下选项开启时，AOF文件会每产生32M数据同步一次。</span><span class="token comment" spellcheck="true"># 这有助于更快写入文件到磁盘避免延迟</span>aof-rewrite-incremental-fsync <span class="token function">yes</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Nosql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的三种模式</title>
      <link href="/2019/11/14/mianshi/"/>
      <url>/2019/11/14/mianshi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。普遍用于目前主流的分布式架构系统中，关于redis的详细介绍，见另一篇文章：<a href="https://www.faber.cc/2019/11/15/redis1/">redis的安装与介绍</a></p><p>redis的多机数据库实现，主要分为以下三种：</p><ol><li><a href="https://www.faber.cc/2019/11/15/redis3/">Redis哨兵（Sentinel）</a></li><li><a href="https://www.faber.cc/2019/11/15/redis2/">Redis复制（主从）</a></li><li><a href="https://www.faber.cc/2019/11/15/redis4/">Redis集群</a><blockquote><ul><li>温馨提示：点击查看详细部署配置</li></ul></blockquote></li></ol><h3 id="一、Redis的主从复制"><a href="#一、Redis的主从复制" class="headerlink" title="一、Redis的主从复制"></a>一、Redis的主从复制</h3><p>通过执行slaveof命令或设置slaveof选项，让一个服务器去复制另一个服务器的数据。被复制的服务器称为：<code>Master</code>主服务；对主服务器进行复制的服务器称为：<code>Slave</code>从服务器。主数据库可以进行读写操作，当写操作导致数据变化时会自动将数据同步给从数据库。而从数据库一般是只读的，并接受主数据库同步过来的数据。一个主数据库可以拥有多个从数据库，而一个从数据库只能拥有一个主数据库。<br><br>主从复制问题：当<code>master</code>down，需要手动将一台<code>slave</code>使用<code>slaveof no one</code>提升为<code>master</code>要实现自动，就需要redis哨兵。<br><br><strong>实现原理步骤：</strong></p><ul><li>从服务器连接主服务器，发送SYNC命令； </li><li>主服务器接收到SYNC命名后，开始执行BGSAVE命令生成RDB文件并使用缓冲区记录此后执行的所有写命令； </li><li>主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令； </li><li>从服务器收到快照文件后丢弃所有旧数据，载入收到的快照； </li><li>主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令； </li><li>从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；（从服务器初始化完成）</li><li>主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令（从服务器初始化完成后的操作</li></ul><p><strong>主从复制优缺点：</strong></p><p><strong>优点：</strong></p><ul><li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离</li><li>为了分载Master的读操作压力，Slave服务器可以为客户端提供只读操作的服务，写服务仍然必须由Master来完成</li><li>Slave同样可以接受其它Slaves的连接和同步请求，这样可以有效的分载Master的同步压力。</li><li>Master Server是以非阻塞的方式为Slaves提供服务。所以在Master-Slave同步期间，客户端仍然可以提交查询或修改请求。</li><li>Slave Server同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据</li></ul><p><strong>缺点：</strong></p><ul><li>Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。</li><li>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。</li><li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</li></ul><h3 id="二、Redis的哨兵（Sentinel）"><a href="#二、Redis的哨兵（Sentinel）" class="headerlink" title="二、Redis的哨兵（Sentinel）"></a>二、Redis的哨兵（Sentinel）</h3><p>当主服务器中断服务后，可以将一个从服务器升级为主服务器，以便继续提供服务，但是这个过程需要人工手动来操作。 为此，Redis 2.8中提供了哨兵工具来实现自动化的系统监控和故障恢复功能。<br><br>哨兵的作用就是监控Redis系统的运行状况。它的功能包括以下两个。<br>    （1）监控主服务器和从服务器是否正常运行。<br>    （2）主服务器出现故障时自动将从服务器转换为主服务器。</p><p><strong>哨兵的工作方式：</strong></p><ul><li>每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的<code>Master</code>主服务器，<code>Slave</code>从服务器以及其他Sentinel（哨兵）进程发送一个 PING 命令。</li><li>如果一个实例（instance）距离最后一次有效回复<code>PING</code>命令的时间超过<code>down-after-milliseconds</code>选项所指定的值， 则这个实例会被<code>Sentinel（哨兵</code>进程标记为主观下线（SDOWN）</li><li>如果一个<code>Master</code>主服务器被标记为主观下线（SDOWN），则正在监视这个<code>Master</code>主服务器的所有<code>Sentinel（哨兵）</code>进程要以每秒一次的频率确认Master主服务器的确进入了主观下线状态</li><li>当有足够数量的 Sentinel（哨兵）进程（大于等于配置文件指定的值）在指定的时间范围内确认Master主服务器进入了主观下线状态（SDOWN）， 则Master主服务器会被标记为客观下线（ODOWN）</li><li>在一般情况下， 每个<code>Sentinel（哨兵）</code>进程会以每 10 秒一次的频率向集群中的所有Master主服务器、Slave从服务器发送 INFO 命令。</li><li>当Master主服务器被<code>Sentinel（哨兵）</code>进程标记为客观下线（ODOWN）时，Sentinel（哨兵）进程向下线的<code>Master</code>主服务器的所有<code>Slave</code>从服务器发送<code>INFO</code>命令的频率会从 <code>10</code>秒一次改为每秒一次。</li><li>若没有足够数量的 <code>Sentinel（哨兵）</code>进程同意<code>Master</code>主服务器下线，<code>Master</code>主服务器的客观下线状态就会被移除。若<code>Master</code>主服务器重新向<code>Sentinel（哨兵）</code>进程发送 <code>PING</code> 命令返回有效回复，Master主服务器的主观下线状态就会被移除。</li></ul><p><strong>哨兵模式的优缺点</strong></p><p><strong>优点：</strong></p><ul><li>哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。</li><li>主从可以自动切换，系统更健壮，可用性更高。</li></ul><p><strong>缺点：</strong></p><ul><li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</li></ul><h3 id="三、Redis集群"><a href="#三、Redis集群" class="headerlink" title="三、Redis集群"></a>三、Redis集群</h3><p>redis的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台redis服务器都存储相同的数据，很浪费内存，所以在redis3.0上加入了cluster模式，实现的redis的分布式存储，也就是说每台redis节点上存储不同的内容。<br><br>Redis-Cluster采用无中心结构,它的特点如下：</p><ul><li>所有的redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽。</li><li>节点的fail是通过集群中超过半数的节点检测失效时才生效。</li><li>客户端与redis节点直连,不需要中间代理层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可。</li></ul><p><strong>工作方式：</strong><br>在redis的每一个节点上，都有这么两个东西，一个是插槽（slot），它的的取值范围是：<code>0-16383</code>。还有一个就是cluster，可以理解为是一个集群管理的插件。当我们的存取的key到达的时候，redis会根据crc16的算法得出一个结果，然后把结果对<code>16384</code> 求余数，这样每个<code>key</code>都会对应一个编号在<code>0-16383</code>之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。<br><br>为了保证高可用，redis-cluster集群引入了主从模式，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点。当其它主节点<code>ping</code>一个主节点A时，如果半数以上的主节点与A通信超时，那么认为主节点A宕机了。如果主节点A和它的从节点A1都宕机了，那么该集群就无法再提供服务了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Nosql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十八个自然效应</title>
      <link href="/2019/11/12/xiaoying/"/>
      <url>/2019/11/12/xiaoying/</url>
      
        <content type="html"><![CDATA[<h1 id="酒与污水定律"><a href="#酒与污水定律" class="headerlink" title="酒与污水定律"></a>酒与污水定律</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">酒与污水定律是指，如果把一匙酒倒进一桶污水中，你得到的是一桶污水；如果把一匙污水倒进一桶酒中，你得到的还是一桶污水。</font><br><p><strong>启迪：一个正直能干的年轻人进去一个混乱的部门，可能会被吞没，年轻人要多接触一些美好的东西，防微杜渐，坚决摒弃丑恶的东西。</strong></p><h1 id="马太效应"><a href="#马太效应" class="headerlink" title="马太效应"></a>马太效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">指强者愈强、弱者愈弱的现象，名字来自圣经《新约·马太福音》一则寓言： “凡有的，还要加倍给他叫他多余；没有的，连他所有的也要夺过来”。</font><br><p><strong>启迪：要保持在某个领域有不可替代的优势，就能够将大部分有利的资源聚拢在你的身边。再者，当目标领域有强大对手的情况下，就要另辟蹊径，找准对手的弱项和自己的优势。</strong></p><h1 id="糖果效应"><a href="#糖果效应" class="headerlink" title="糖果效应"></a>糖果效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">心理学家测试一群4岁的孩子能否坚持在20分钟后吃糖，经过12年追踪，发现表现不同的孩子长大后个性不同。从小时候的自控、判断、自信的小实验中能预测出他长大后个性的效应，就叫糖果效应。</font><br><p><strong>启迪：要善于抵制诱惑，不被眼前利益所迷惑。别指望自制力会随着年龄的长大而增长，需要有意识地去锻炼。</strong></p><h1 id="聚光灯效应"><a href="#聚光灯效应" class="headerlink" title="聚光灯效应"></a>聚光灯效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">有时候我们总是不经意的把自己的问题放到无限大，当我们出丑时总以为人家会注意到，其实并不是这样的，人家或许当时会注意到可是事后马上就忘了。</font><br><p><strong>启迪：不用太在乎别人的看法。你感觉自己在他们眼中是失败的、消极的，其实不是的，勇敢抛掉这些不正确的“假设”，因为这些想法本来就是不切实际的。</strong></p><h1 id="蘑菇定律"><a href="#蘑菇定律" class="headerlink" title="蘑菇定律"></a>蘑菇定律</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">指初入世者常常会被置于阴暗的角落，不受重视或打杂跑腿，就像蘑菇培育一样还要被浇上大粪，接受各种无端的批评、指责，得不到必要的指导和提携，处于自生自灭过程中。蘑菇生长必须经历这样一个过程，人的成长也肯定会经历这样一个过程。</font><br><p><strong>启迪：当几天蘑菇，能让我们消除很多不切实际的想法，让我们更加接近现实。</strong></p><h1 id="飞轮效应"><a href="#飞轮效应" class="headerlink" title="飞轮效应"></a>飞轮效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">为了使静止的飞轮转动起来，一开始你必须使很大的力气，一圈一圈反复地推，达到某一临界点后，飞轮的重力和冲力会成为推动力的一部分。这时，你无须再费更大的力气，飞轮依旧会快速转动，而且不停地转动。</font><br><p><strong>启迪：人在进入某一新的或陌生的领域的时候，都会经历这一过程。如果要让飞轮转起来不花太大力气，条件是要有足够的坚持，这也意味着得用时间足够来保证。</strong></p><h1 id="酸葡萄效应"><a href="#酸葡萄效应" class="headerlink" title="酸葡萄效应"></a>酸葡萄效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">当自己真正的需求无法得到满足产生挫折感时，为了解除内心不安，编造一些“理由”自我安慰，以消除紧张，减轻压力，使自己从不满、不安等消极心理状态中解脱出来，保护自己免受伤害。</font><br><p><strong>启迪：任何一种事物都会有正反两种意义，只要起到暂缓心理压力作用，使心理得以平衡，就有其实际意义，即”合理化”的酸葡萄效应。当然，我们不能总是停留在此，事后应采取积极措施，解决问题。</strong></p><h1 id="凡勃伦效应"><a href="#凡勃伦效应" class="headerlink" title="凡勃伦效应"></a>凡勃伦效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">商品价格定得越高，越能受到消费者的青睐。商品价格越高消费者反而越愿意购买的消费倾向，最早由美国经济学家凡勃伦注意到，因此被命名为“凡勃伦效应”。</font><br><p><strong>启迪：人也是一样的，要想得到“好价钱”，就应该把自己雕琢成器，放在正确的地方待价而沽。</strong></p><h1 id="南风效应"><a href="#南风效应" class="headerlink" title="南风效应"></a>南风效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">源于一则法国寓言，北风和南风比威力，看谁能把行人身上的大衣脱掉。北风呼啸，结果行人为了抵御寒冷，便把大衣裹得紧紧的。南风则徐徐吹动，顿时风和日丽，行人因为觉得温暖，继而脱掉大衣，南风获得了胜利。</font><br><p><strong>启迪：在处理人与人之间关系时，要特别注意讲究方法。北风和南风都要使行人脱掉大衣，但由于方法不一样，结果大相径庭。</strong></p><h1 id="三明治效应"><a href="#三明治效应" class="headerlink" title="三明治效应"></a>三明治效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">在批评心理学中，人们把批评的内容夹在两个表扬之中从而使受批评者愉快地接受批评的现象，称之为三明治效应。</font><br><p><strong>启迪：在建议和批评的同时，不忘认同、肯定、赏识对方，可以使接受批评者积极地接受批评，并改正自己的不足之处。</strong></p><h1 id="曝光效应"><a href="#曝光效应" class="headerlink" title="曝光效应"></a>曝光效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">这是一种心理现象，指的是我们会偏好自己熟悉的事物，社会心理学又把这种效应叫做熟悉定律，我们把这种只要经常出现就能增加喜欢程度的现象叫做曝光效应。</font><br><p><strong>启迪：若想增强人际吸引，就要留心自己在别人面前的熟悉度，在某人面前混个脸熟会赢得好感。</strong></p><h1 id="首因效应"><a href="#首因效应" class="headerlink" title="首因效应"></a>首因效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">首因效应是指个体在社会认知过程中，通过“第一印象”最先输入的信息对客体以后的认知产生的影响作用。</font><br><p><strong>启迪：在日常交往过程中，尤其是初次交往时，要注意给人留下美好的印象。首先，要注重仪表风度，—般情况下人们都愿意同衣着干净整齐、落落大方的人接触和交往。其次，要注意言谈举止，举止优雅，会给人留下好的印象。</strong></p><h1 id="木桶效应"><a href="#木桶效应" class="headerlink" title="木桶效应"></a>木桶效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">由一些木板钉成的木桶，它盛水的多少，只由最短的那块木板决定。要想使木桶多盛水，就要下功夫弥补最短的那块木板。</font><br><p><strong>启迪：任何一个组织，可能面临的一个共同问题，即构成组织的各个部分往往是优劣不齐的，而劣势部分往往决定整个组织的水平。因此，整个社会与我们每个人都应思考一下自己的“短板”，并尽早补足它。</strong></p><h1 id="破窗效应"><a href="#破窗效应" class="headerlink" title="破窗效应"></a>破窗效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">如果有人打坏了一幢建筑物的窗户玻璃，而这扇窗户又得不到及时的维修，别人就可能受到某些暗示性的纵容去打烂更多的窗户。</font><br><p><strong>启迪：任何一种不良现象的存在，都在传递着一种信息，这种信息会导致不良现象的无限扩展。同时必须高度警觉那些看起来是偶然的、个别的、轻微的“过错”，如果对这种行为不闻不问纠正不力，就会纵容更多的人“去打烂更多的窗户玻璃”。</strong></p><h1 id="登门槛效应"><a href="#登门槛效应" class="headerlink" title="登门槛效应"></a>登门槛效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">指一个人一旦接受了他人的一个微不足道的要求，为了避免认知上的不协调，或想给他人以前后一致的印象，就有可能接受更大的要求。这种现象，犹如登门坎时要一级台阶一级台阶地登，这样能更容易更顺利地登上高处。</font><br><p><strong>启迪：在要求别人做某件较难的事情而又担心他不愿意做时，可以先向他提出做一件类似的较小的事情。当他们达到这个要求后，再通过鼓励，逐步向其提出更高的要求，这样别人容易接受，预期目标也容易实现。</strong></p><h1 id="鸟笼效应"><a href="#鸟笼效应" class="headerlink" title="鸟笼效应"></a>鸟笼效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">假如一个人买了一只空鸟笼放在家里，那么一段时间后，他一般会为了用这只笼子再买一只鸟回来养而不会把笼子丢掉，也就是这个人反而被笼子给异化掉了，成为笼子的俘虏 。</font><br><p><strong>启迪：鸟笼效应告诉我们看待任何事物都不要绝对化，合理的东西里面会有不合理的因素，貌似不合理的东西其实也会蕴藏着合理的因素。</strong></p><h1 id="毛毛虫效应"><a href="#毛毛虫效应" class="headerlink" title="毛毛虫效应"></a>毛毛虫效应</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">科学家通过研究，把跟着前面的路线走的习惯称之为“跟随者”的习惯，把盲目跟从习惯和思维惯性而做出反应导致失败结果的现象称为“毛毛虫效应”。</font><br><p><strong>启迪：无论在工作、生活还是学习中，我们经常会犯毛毛虫似的错误，一是思维存在惰性，二是目光短浅，三是害怕风险，四是缺乏胆识和魄力，五是缺乏创新的思想，六是缺乏可行性目标。</strong></p><h1 id="野马结局"><a href="#野马结局" class="headerlink" title="野马结局"></a>野马结局</h1><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">指因芝麻小事而大动肝火，以致因别人的过失而伤害自己的现象。动辄生气的人很难健康、长寿，很多人其实是“气死的”。</font><br><p><strong>启迪：情绪是自身选择的结果。外在事物并不能伤害我们。倒是我们自己对这些事物的信念与态度让自己受到了伤害。所以，我们应该学会管理好自己的情绪。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7下Samba服务安装与配置</title>
      <link href="/2019/11/12/samba/"/>
      <url>/2019/11/12/samba/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Samba简介"><a href="#1-Samba简介" class="headerlink" title="1. Samba简介"></a>1. Samba简介</h3><p>Samba是在Linux和UNIX系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。SMB协议是客户机/服务器型协议，客户机通过该协议可以访问服务器上的共享文件系统、打印机及其他资源。通过设置“NetBIOS over TCP/IP”使得Samba不但能与局域网络主机分享资源，还能与全世界的电脑分享资源。<br><br>Samba最大的功能就是可以用于Linux与windows系统直接的文件共享和打印共享，Samba既可以用于windows与Linux之间的文件共享，也可以用于Linux与Linux之间的资源共享。<br><br>Samba由两个主要程序组成，它们是<code>smbd</code>和<code>nmbd</code>。这两个守护进程在服务器启动到停止期间持续运行，功能各异。<code>Smbd</code>和<code>nmbd</code>使用的全部配置信息全都保存在smb.conf文件中。Smb.conf向<code>smbd</code>和<code>nmbd</code>两个守护进程说明输出什么以便共享，共享输出给谁及如何进行输出。<br><br>Samba提供了基于CIFS的四个服务：文件和打印服务、授权与被授权、名称解析、浏览服务。前两项服务由<code>smbd</code>提供，后两项服务则由nmbd提供。 简单地说，<code>smbd</code>进程的作用是处理到来的SMB软件包，为使用该软件包的资源与Linux进行协商，<code>nmbd</code>进程使主机(或工作站)能浏览Linux服务器。</p><h3 id="2-Samba安装与配置"><a href="#2-Samba安装与配置" class="headerlink" title="2. Samba安装与配置"></a>2. Samba安装与配置</h3><h4 id="2-1-Samba安装与查看"><a href="#2-1-Samba安装与查看" class="headerlink" title="2.1 Samba安装与查看"></a>2.1 Samba安装与查看</h4><ul><li><p>安装samba应用</p><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> samba samba-client </code></pre></li><li><p>启动Samba应用</p><pre class=" language-bash"><code class="language-bash">systemctl start smb nmb</code></pre></li><li><p>查看Samba服务进程</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@samba ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -ef | grep -E 'smb|nmb'</span>root      9885     1  0 14:48 ?        00:00:00 /usr/sbin/nmbdroot      9887     1  0 14:48 ?        00:00:00 /usr/sbin/smbdroot      9888  9887  0 14:48 ?        00:00:00 /usr/sbin/smbdroot      9889  9887  0 14:48 ?        00:00:00 /usr/sbin/smbdroot      9890  9887  0 14:48 ?        00:00:00 /usr/sbin/smbdroot      9959  9627  0 15:02 pts/0    00:00:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto -E smb<span class="token operator">|</span>nmb</code></pre></li><li><p>查看Samba应用服务端口<br>smbd应用进程主要监听139和445端口， nmbd应用进程主要监听137与138端口。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@samba ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># netstat -tunlp | grep -E 'smbd|nmbd'</span>tcp        0      0 0.0.0.0:139             0.0.0.0:*               LISTEN      9887/smbd           tcp        0      0 0.0.0.0:445             0.0.0.0:*               LISTEN      9887/smbd           tcp6       0      0 :::139                  :::*                    LISTEN      9887/smbd           tcp6       0      0 :::445                  :::*                    LISTEN      9887/smbd           udp        0      0 192.168.6.255:137       0.0.0.0:*                           9885/nmbd           udp        0      0 192.168.6.186:137       0.0.0.0:*                           9885/nmbd           udp        0      0 0.0.0.0:137             0.0.0.0:*                           9885/nmbd           udp        0      0 192.168.6.255:138       0.0.0.0:*                           9885/nmbd           udp        0      0 192.168.6.186:138       0.0.0.0:*                           9885/nmbd           udp        0      0 0.0.0.0:138             0.0.0.0:*                           9885/nmbd           </code></pre><h4 id="2-2-Samba服务配置介绍"><a href="#2-2-Samba服务配置介绍" class="headerlink" title="2.2 Samba服务配置介绍"></a>2.2 Samba服务配置介绍</h4><p>1、查看Samba配置文件<br>samba文件共享默认配置文件存放于/etc/samba/smb.conf下， 用于配置Samba服务内容。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/samba/smb.conf<span class="token punctuation">[</span>global<span class="token punctuation">]</span>   workgroup <span class="token operator">=</span> SAMBA   security <span class="token operator">=</span> user   passdb backend <span class="token operator">=</span> tdbsam   printing <span class="token operator">=</span> cups   <span class="token function">printcap</span> name <span class="token operator">=</span> cups   load printers <span class="token operator">=</span> <span class="token function">yes</span>   cups options <span class="token operator">=</span> raw<span class="token punctuation">[</span>homes<span class="token punctuation">]</span>   comment <span class="token operator">=</span> Home Directories   valid <span class="token function">users</span> <span class="token operator">=</span> %S, %D%w%S   browseable <span class="token operator">=</span> No   <span class="token function">read</span> only <span class="token operator">=</span> No   inherit acls <span class="token operator">=</span> Yes<span class="token punctuation">[</span>printers<span class="token punctuation">]</span>   comment <span class="token operator">=</span> All Printers   path <span class="token operator">=</span> /var/tmp   printable <span class="token operator">=</span> Yes   create mask <span class="token operator">=</span> 0600   browseable <span class="token operator">=</span> No<span class="token punctuation">[</span>print$<span class="token punctuation">]</span>   comment <span class="token operator">=</span> Printer Drivers   path <span class="token operator">=</span> /var/lib/samba/drivers   <span class="token function">write</span> list <span class="token operator">=</span> root   create mask <span class="token operator">=</span> 0664   directory mask <span class="token operator">=</span> 0775</code></pre></li></ul><ol start="2"><li>Samba配置文件详解</li></ol><ul><li><p><strong>全局参数 [global]</strong></p></li><li><p><code>config file = /usr/local/samba/lib/smb.conf.%m</code><br>说明：config file可以让你使用另一个配置文件来覆盖缺省的配置文件。如果文件 不存在，则该项无效。这个参数很有用，可以使得samba配置更灵活，可以让一台samba服务器模拟多台不同配置的服务器。比如，你想让PC1（主机名）这台电脑在访问Samba Server时使用它自己的配置文件，那么先在/etc/samba/host/下为PC1配置一个名为smb.conf.pc1的文件，然后在smb.conf中加入：config file=/etc/samba/host/smb.conf.%m。这样当PC1请求连接Samba Server时，smb.conf.%m就被替换成smb.conf.pc1。这样，对于PC1来说，它所使用的Samba服务就是由smb.conf.pc1定义的，而其他机器访问Samba Server则还是应用smb.conf。</p></li><li><p><code>workgroup = WORKGROUP</code><br>说明：设定 Samba Server 所要加入的工作组或者域。</p></li><li><p><code>server string = Samba Server Version %v</code><br>说明：设定 Samba Server 的注释，可以是任何字符串，也可以不填。宏%v表示显示Samba的版本号。</p></li><li><p><code>netbios name = smbserver</code><br>说明：设置Samba Server的NetBIOS名称。如果不填，则默认会使用该服务器的DNS名称的第一部分。netbios name和workgroup名字不要设置成一样了。</p></li><li><p><code>interfaces = lo eth0 192.168.12.2/24 192.168.13.2/24</code><br>说明：设置Samba Server监听哪些网卡，可以写网卡名，也可以写该网卡的IP地址。</p></li><li><p><code>hosts allow = 127. 192.168.1. 192.168.10.1</code><br>说明：表示允许连接到Samba Server的客户端，多个参数以空格隔开。可以用一个IP表示，也可以用一个网段表示。hosts deny 与hosts allow 刚好相反。</p></li></ul><p>例如：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 表示容许来自172.17.2.*.*的主机连接，但排除172.17.2.50</span>hosts allow<span class="token operator">=</span>172.17.2.EXCEPT172.17.2.50<span class="token comment" spellcheck="true"># 表示容许来自172.17.2.0/255.255.0.0子网中的所有主机连接</span>hosts allow<span class="token operator">=</span>172.17.2.0/255.255.0.0<span class="token comment" spellcheck="true"># 表示容许来自M1和M2两台计算机连接</span>hosts allow<span class="token operator">=</span>M1，M2<span class="token comment" spellcheck="true"># 表示容许来自SC域的所有计算机连接</span>hosts allow<span class="token operator">=</span>@SC</code></pre><ul><li><p><code>max connections = 0</code><br>说明：max connections用来指定连接Samba Server的最大连接数目。如果超出连接数目，则新的连接请求将被拒绝。0表示不限制。</p></li><li><p><code>deadtime = 0</code><br>说明：deadtime用来设置断掉一个没有打开任何文件的连接的时间。单位是分钟，0代表Samba Server不自动切断任何连接。</p></li><li><p><code>time server = yes/no</code><br>说明：time server用来设置让nmdb成为windows客户端的时间服务器。</p></li><li><p><code>log file = /var/log/samba/log.%m</code><br>说明：设置Samba Server日志文件的存储位置以及日志文件名称。在文件名后加个宏%m（主机名），表示对每台访问Samba Server的机器都单独记录一个日志文件。如果pc1、pc2访问过Samba Server，就会在/var/log/samba目录下留下log.pc1和log.pc2两个日志文件。</p></li><li><p><code>max log size = 50</code><br>说明：设置Samba Server日志文件的最大容量，单位为kB，0代表不限制。</p></li><li><p><code>security = user</code><br>说明：设置用户访问Samba Server的验证方式，一共有四种验证方式。</p></li></ul><ol><li><em>share</em>：用户访问Samba Server不需要提供用户名和口令, 安全性能较低。</li><li><em>user</em>：Samba Server共享目录只能被授权的用户访问,由Samba Server负责检查账号和密码的正确性。账号和密码要在本Samba Server中建立。</li><li><em>server</em>：依靠其他Windows NT/2000或Samba Server来验证用户的账号和密码,是一种代理验证。此种安全模式下,系统管理员可以把所有的Windows用户和口令集中到一个NT系统上,使用Windows NT进行Samba认证, 远程服务器可以自动认证全部用户和口令,如果认证失败,Samba将使用用户级安全模式作为替代的方式。</li><li><em>domain</em>：域安全级别,使用主域控制器(PDC)来完成认证。</li></ol><ul><li><code>passdb backend = tdbsam</code><br>说明：passdb backend就是用户后台的意思。目前有三种后台：smbpasswd、tdbsam和ldapsam。sam应该是security account manager（安全账户管理）的简写。</li></ul><ol><li><p><em>smbpasswd</em>：该方式是使用smb自己的工具smbpasswd来给系统用户（真实<br>用户或者虚拟用户）设置一个Samba密码，客户端就用这个密码来访问Samba的资源。smbpasswd文件默认在/etc/samba目录下，不过有时候要手工建立该文件。</p></li><li><p><em>tdbsam</em>：该方式则是使用一个数据库文件来建立用户数据库。数据库文件叫passdb.tdb，默认在/etc/samba目录下。passdb.tdb用户数据库可以使用smbpasswd –a来建立Samba用户，不过要建立的Samba用户必须先是系统用户。我们也可以使用pdbedit命令来建立Samba账户。pdbedit命令的参数很多，我们列出几个主要的。</p></li></ol><blockquote><p>pdbedit –a username：新建Samba账户。<br>pdbedit –x username：删除Samba账户。<br>pdbedit –L：列出Samba用户列表，读取passdb.tdb数据库文件。<br>pdbedit –Lv：列出Samba用户列表的详细信息。<br>pdbedit –c “[D]” –u username：暂停该Samba用户的账号。<br>pdbedit –c “[]” –u username：恢复该Samba用户的账号。</p></blockquote><ol start="3"><li><em>ldapsam</em>：该方式则是基于LDAP的账户管理方式来验证用户。首先要建立LDAP服务，然后设置“passdb backend = ldapsam:ldap://LDAP Server”</li></ol><ul><li><p><code>encrypt passwords = yes/no</code><br>说明：是否将认证密码加密。因为现在windows操作系统都是使用加密密码，所以一般要开启此项。不过配置文件默认已开启。</p></li><li><p><code>smb passwd file = /etc/samba/smbpasswd</code><br>说明：用来定义samba用户的密码文件。smbpasswd文件如果没有那就要手工新建。</p></li><li><p><code>username map = /etc/samba/smbusers</code><br>说明：用来定义用户名映射，比如可以将root换成administrator、admin等。不过要事先在smbusers文件中定义好。比如：root = administrator admin，这样就可以用administrator或admin这两个用户来代替root登陆Samba Server，更贴近windows用户的习惯。</p></li><li><p><code>guest account = nobody</code><br>说明：用来设置guest用户名。</p></li><li><p><code>socket options = TCP_NODELAY SO_RCVBUF=8192 SO_SNDBUF=8192</code><br>说明：用来设置服务器和客户端之间会话的Socket选项，可以优化传输速度。</p></li><li><p><code>domain master = yes/no</code><br>说明：设置Samba服务器是否要成为网域主浏览器，网域主浏览器可以管理跨子网域的浏览服务。</p></li><li><p><code>local master = yes/no</code><br>说明：local master用来指定Samba Server是否试图成为本地网域主浏览器。如果设为no，则永远不会成为本地网域主浏览器。但是即使设置为yes，也不等于该Samba Server就能成为主浏览器，还需要参加选举。</p></li><li><p><code>preferred master = yes/no</code><br>说明：设置Samba Server一开机就强迫进行主浏览器选举，可以提高Samba Server成为本地网域主浏览器的机会。如果该参数指定为yes时，最好把domain master也指定为yes。使用该参数时要注意：如果在本Samba Server所在的子网有其他的机器（不论是windows NT还是其他Samba Server）也指定为首要主浏览器时，那么这些机器将会因为争夺主浏览器而在网络上大发广播，影响网络性能。如果同一个区域内有多台Samba Server，将上面三个参数设定在一台即可。</p></li><li><p><code>os level = 200</code><br>说明：设置samba服务器的os level。该参数决定Samba Server是否有机会成为本地网域的主浏览器。os level从0到255，winNT的os level是32，win95/98的os level是1。Windows 2000的os level是64。如果设置为0，则意味着Samba Server将失去浏览选择。如果想让Samba Server成为PDC，那么将它的os level值设大些。</p></li><li><p><code>domain logons = yes/no</code><br>说明：设置Samba Server是否要做为本地域控制器。主域控制器和备份域控制器都需要开启此项。</p></li><li><p><code>logon . = %u.bat</code><br>说明：当使用者用windows客户端登陆，那么Samba将提供一个登陆档。如果设置成%u.bat，那么就要为每个用户提供一个登陆档。如果人比较多，那就比较麻烦。可以设置成一个具体的文件名，比如start.bat，那么用户登陆后都会去执行start.bat，而不用为每个用户设定一个登陆档了。这个文件要放置在[netlogon]的path设置的目录路径下。</p></li><li><p><code>wins support = yes/no</code><br>说明：设置samba服务器是否提供wins服务。</p></li><li><p><code>wins server = wins服务器IP地址</code><br>说明：设置Samba Server是否使用别的wins服务器提供wins服务。</p></li><li><p><code>wins proxy = yes/no</code><br>说明：设置Samba Server是否开启wins代理服务。</p></li><li><p><code>dns proxy = yes/no</code><br>说明：设置Samba Server是否开启dns代理服务。</p></li><li><p><code>load printers = yes/no</code><br>说明：设置是否在启动Samba时就共享打印机。</p></li><li><p><code>printcap name = cups</code><br>说明：设置共享打印机的配置文件。</p></li><li><p><code>printing = cups</code><br>说明：设置Samba共享打印机的类型。现在支持的打印系统有：bsd, sysv, plp, lprng, aix, hpux, qnx</p></li><li><p><strong>共享参数 [共享名]：</strong></p></li><li><p><code>comment = 任意字符串</code><br>说明：comment是对该共享的描述，可以是任意字符串。</p></li><li><p><code>path = 共享目录路径</code><br>说明：path用来指定共享目录的路径。可以用%u、%m这样的宏来代替路径里的unix用户和客户机的Netbios名，用宏表示主要用于[homes]共享域。例如：如果我们不打算用home段做为客户的共享，而是在/home/share/下为每个Linux用户以他的用户名建个目录，作为他的共享目录，这样path就可以写成：path = /home/share/%u; 。用户在连接到这共享时具体的路径会被他的用户名代替，要注意这个用户名路径一定要存在，否则，客户机在访问时会找不到网络路径。同样，如果我们不是以用户来划分目录，而是以客户机来划分目录，为网络上每台可以访问samba的机器都各自建个以它的netbios名的路径，作为不同机器的共享资源，就可以这样写：<code>path = /home/share/%m</code>。</p></li><li><p><code>browseable = yes/no</code><br>说明：browseable用来指定该共享是否可以浏览。</p></li><li><p><code>writable = yes/no</code><br>说明：writable用来指定该共享路径是否可写。</p></li><li><p><code>available = yes/no</code><br>说明：available用来指定该共享资源是否可用。</p></li><li><p><code>admin users = 该共享的管理者</code><br>说明：admin users用来指定该共享的管理员（对该共享具有完全控制权限）。在samba 3.0中，如果用户验证方式设置成“security=share”时，此项无效。<br>例如：admin users =bobyuan，jane（多个用户中间用逗号隔开）。</p></li><li><p><code>valid users = 允许访问该共享的用户</code><br>说明：valid users用来指定允许访问该共享资源的用户。<br>例如：valid users = bobyuan，@bob，@tech（多个用户或者组中间用逗号隔开，如果要加入一个组就用“@+组名”表示。）</p></li><li><p><code>invalid users = 禁止访问该共享的用户</code><br>说明：invalid users用来指定不允许访问该共享资源的用户。<br>例如：invalid users = root，@bob（多个用户或者组中间用逗号隔开。）</p></li><li><p><code>write list = 允许写入该共享的用户</code><br>说明：write list用来指定可以在该共享下写入文件的用户。<br>例如：write list = bobyuan，@bob</p></li><li><p><code>public = yes/no</code><br>说明：public用来指定该共享是否允许guest账户访问。</p></li><li><p><code>guest ok = yes/no</code><br>说明：意义同“public”。</p></li></ul><h4 id="2-3-配置Samba服务"><a href="#2-3-配置Samba服务" class="headerlink" title="2.3 配置Samba服务"></a>2.3 配置Samba服务</h4><ol><li>服务规划</li></ol><ul><li>系统分区时，可以单独划分一个<code>/storage</code>的分区，分区下有logger和shared两个文件夹;</li><li>logger文件夹<code>/storage/logger</code>下对应的管理员账号为<code>logadmin</code>，用户账号为<code>loguser</code>;</li><li>shared文件夹<code>/storage/shared</code>下对应的管理员账号为<code>admin</code>，用户账户号为<code>shared</code>;<blockquote><p>注：以上所述分区或文件夹可以根据自己需求来定,不划分分区也可以，指定共享文件夹就可以了。</p></blockquote></li></ul><ol start="2"><li>创建文件夹和用户</li></ol><ul><li>创建文件夹<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建文件夹</span><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /storage</span><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir logger  shared</span><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>total 0drwxr-xr-x. 2 root root 6 Aug  3 10:12 loggerdrwxr-xr-x. 2 root root 6 Aug  3 10:12 shared</code></pre></li><li>创建用户</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd -s /sbin/nologin logadmin</span><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd -s /sbin/nologin admin</span><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd -g admin -s /sbin/nologin shared</span><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/passwd</span>root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltnobody:x:99:99:Nobody:/:/sbin/nologinsystemd-bus-proxy:x:999:998:systemd Bus Proxy:/:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinpolkitd:x:998:997:User <span class="token keyword">for</span> polkitd:/:/sbin/nologintss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologintcpdump:x:72:72::/:/sbin/nologinlogadmin:x:1000:1000::/home/logadmin:/sbin/nologinloguser:x:1001:1000::/home/loguser:/sbin/nologinadmin:x:1002:1002::/home/admin:/sbin/nologinshared:x:1003:1002::/home/shared:/sbin/nologin<span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre><ul><li>建立samba用户</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># smbpasswd -a logadmin</span>New SMB password:Retype new SMB password:Added user logadmin.<span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># smbpasswd -a loguser</span>New SMB password:Retype new SMB password:Added user loguser.<span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># smbpasswd -a admin</span>New SMB password:Retype new SMB password:Added user admin.<span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># smbpasswd -a shared</span>New SMB password:Retype new SMB password:Added user shared.</code></pre><ul><li>更改目录属性<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown logadmin.logadmin logger</span><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown admin.admin shared</span><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod -R 777 logger</span><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod -R 777 shared</span><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre></li></ul><ol start="3"><li>配置Samba服务<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@samba storage<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vi /etc/samba/smb.conf</span><span class="token punctuation">[</span>global<span class="token punctuation">]</span> workgroup <span class="token operator">=</span> SC.LOCAL server string <span class="token operator">=</span> Samba Server Version %v netbios name <span class="token operator">=</span> samba log <span class="token function">file</span> <span class="token operator">=</span> /var/log/samba/%m.log max log size <span class="token operator">=</span> 10240 security <span class="token operator">=</span> user passdb backend <span class="token operator">=</span> tdbsam<span class="token punctuation">[</span>logger<span class="token punctuation">]</span> comment <span class="token operator">=</span> Logs Directories path <span class="token operator">=</span> /storage/logger/ public <span class="token operator">=</span> no admin <span class="token function">users</span> <span class="token operator">=</span> logadmin valid <span class="token function">users</span> <span class="token operator">=</span> @logadmin browseable <span class="token operator">=</span> <span class="token function">yes</span> writable <span class="token operator">=</span> <span class="token function">yes</span> create mask <span class="token operator">=</span> 0777 directory mask <span class="token operator">=</span> 0777 force directory mode <span class="token operator">=</span> 0777 force create mode <span class="token operator">=</span> 0777<span class="token punctuation">[</span>shared<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 共享文件目录描述</span> comment <span class="token operator">=</span> Shared Directories <span class="token comment" spellcheck="true"># 共享文件目录</span> path <span class="token operator">=</span> /storage/shared/ <span class="token comment" spellcheck="true"># 是否允许guest访问</span> public <span class="token operator">=</span> no <span class="token comment" spellcheck="true"># 指定管理用户</span> admin <span class="token function">users</span> <span class="token operator">=</span> admin <span class="token comment" spellcheck="true"># 可访问的用户组、用户</span> valid <span class="token function">users</span> <span class="token operator">=</span> @admin <span class="token comment" spellcheck="true"># 是否浏览权限</span> browseable <span class="token operator">=</span> <span class="token function">yes</span> <span class="token comment" spellcheck="true"># 是否可写权限</span> writable <span class="token operator">=</span> <span class="token function">yes</span> <span class="token comment" spellcheck="true"># 文件权限设置</span> create mask <span class="token operator">=</span> 0777 directory mask <span class="token operator">=</span> 0777 force directory mode <span class="token operator">=</span> 0777 force create mode <span class="token operator">=</span> 0777</code></pre></li></ol><p>修改完Samba配置文件后，需要重启Samba服务配置才能生效。</p><ol start="4"><li>测试Samba服务</li></ol><ul><li>访问Samba服务</li></ul><p>使用Windows客户机通过UNC路径访问Samba服务， 如：<code>\\192.168.6.186</code>, 此时会提示输入用户名和密码（在第2步中创建的用户和密码，如<code>logadmin</code>等）。<br><img src="/2019/11/12/samba/1.webp" alt=""><br><img src="/2019/11/12/samba/2.webp" alt=""><br><img src="/2019/11/12/samba/3.webp" alt=""></p><ul><li>测试创建文件</li></ul><p>拷贝客户机文件到Samba共享文件夹下， 测试文件拷贝是否成功。<br>将文件<code>book.txt</code>拷贝到Samba共享文件夹<code>logger</code>下， 查看文件是否成功拷贝。<br><img src="/2019/11/12/samba/4.webp" alt=""></p><h3 id="3-错误处理"><a href="#3-错误处理" class="headerlink" title="3. 错误处理"></a>3. 错误处理</h3><ol><li>如果拷贝文件时出现<code>目标文件夹访问被拒绝</code>错误，如下图所示。此时需要检查一下Samba服务器的Selinux和防火墙配置，确认一下Selinux是否关闭，同时确认一下防火墙是否已经打开了Samba服务端口（与Samba服务相关的端口有<code>137、138、139</code>和<code>445</code>）。 最后确认一下Samba提供的共享文件夹是否具有读写权限，具体可以参考第2步和第3步配置（目录属性和Samba服务配置）。<br><img src="/2019/11/12/samba/5.webp" alt=""></li><li>当我们要进入不同的samba目录，如：进入<code>shared</code>共享文件夹，但是这些目录都有自己的密码设置时，如果我们在点击这个目录时输入访问该目录的用户名和密码时，会提示“<strong>不允许一个用户使用一个以上用户名与服务器或共享资源的多重连接。中断与此服务器或共享资源的所有连接，然后再试一次。</strong>”出现此问题是windows自身的限制，通常我们会注销当前windows用户，然后再重新登陆samba来访问其他目录。<br><img src="/2019/11/12/samba/6.webp" alt=""><br>此时，我们可以打开命令行界面，输入<code>net use * /del /y</code>命令来切掉本机当前的所有远程共享文件信息，然后点击其他目录输入该目录具有访问权限的用户名和密码即可正常访问了。<br><img src="/2019/11/12/samba/7.webp" alt=""><br><img src="/2019/11/12/samba/8.webp" alt=""></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx日志简析</title>
      <link href="/2019/11/11/ng/"/>
      <url>/2019/11/11/ng/</url>
      
        <content type="html"><![CDATA[<h3 id="1、日志简介"><a href="#1、日志简介" class="headerlink" title="1、日志简介"></a>1、日志简介</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;nginx日志主要有两种：<strong>访问日志</strong>和<strong>错误日志</strong>。访问日志主要记录客户端访问nginx的每一个请求，格式可以自定义；错误日志主要记录客户端访问nginx出错时的日志，格式不支持自定义。两种日志都可以选择性关闭。通过访问日志，你可以得到用户地域来源、跳转来源、使用终端、某个URL访问量等相关信息；通过错误日志，你可以得到系统某个服务或server的性能瓶颈等。因此，将日志好好利用，你可以得到很多有价值的信息。</p><h3 id="2、访问日志"><a href="#2、访问日志" class="headerlink" title="2、访问日志"></a>2、访问日志</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Access.log<span class="token punctuation">]</span>log_format  main  <span class="token string">'<span class="token variable">$remote_addr</span> <span class="token variable">$remote_user</span> [<span class="token variable">$time_local</span>] "<span class="token variable">$request</span>" <span class="token variable">$http_host</span> '</span>                  <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$upstream_status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>                  <span class="token string">'"<span class="token variable">$http_user_agent</span>" <span class="token variable">$ssl_protocol</span> <span class="token variable">$ssl_cipher</span> <span class="token variable">$upstream_addr</span> '</span>                  <span class="token string">'<span class="token variable">$request_time</span> <span class="token variable">$upstream_response_time</span>'</span><span class="token punctuation">;</span></code></pre><table>  <tbody><tr>    <th>变量名称</th>    <th>变量描述</th>    <th>举例说明</th>  </tr>  <tr>    <td>$remote_addr</td>    <td>客户端地址</td>    <td>113.140.15.90</td>  </tr>  <tr>    <td>$remote_user</td>    <td>客户端用户名称</td>    <td>-</td>  </tr>  <tr>    <td>$time_local</td>    <td>访问时间和时区</td>    <td>18/Jul/2012:17:00:01 +0800</td>  </tr>  <tr>    <td>$request</td>    <td>请求的URI和HTTP协议</td>    <td>"GET /pa/img/home/logo-alipay-t.png HTTP/1.1"</td>  </tr>  <tr>    <td>$http_host</td>    <td>请求地址，即浏览器中你输入的地址（IP或域名）</td>    <td>img.alipay.com<br>10.253.70.103</td>  </tr>  <tr>    <td>$status</td>    <td>HTTP请求状态</td>    <td>200</td>  </tr>  <tr>    <td>$upstream_status</td>    <td>upstream状态</td>    <td>200</td>  </tr>  <tr>    <td>$body_bytes_sent</td>    <td>发送给客户端文件内容大小</td>    <td>547</td>  </tr>  <tr>    <td>$http_referer</td>    <td>跳转来源</td>    <td>"https://cashier.alipay.com.../"</td>  </tr>  <tr>    <td>$http_user_agent</td>    <td>用户终端代理</td>    <td>"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; GTB7.0; .NET4.0C;</td>  </tr>  <tr>    <td>$ssl_protocol</td>    <td>SSL协议版本</td>    <td>TLSv1</td>  </tr>  <tr>    <td>$ssl_cipher</td>    <td>交换数据中的算法</td>    <td>RC4-SHA</td>  </tr>  <tr>    <td>$upstream_addr</td>    <td>后台upstream的地址，即真正提供服务的主机地址</td>    <td>10.228.35.247:80</td>  </tr>  <tr>    <td>$request_time</td>    <td>整个请求的总时间</td>    <td>0.205</td>  </tr>  <tr>    <td>$upstream_response_time</td>    <td>请求过程中，upstream响应时间</td>    <td>0.002</td>  </tr></tbody></table><pre class=" language-shell"><code class="language-shell">线上实例：116.9.137.90 - [02/Aug/2012:14:47:12 +0800] "GET /images/XX/20100324752729.png HTTP/1.1"img.alipay.com 200 200 2038 https://cashier.alipay.com/XX/PaymentResult.htm?payNo=XX&outBizNo=2012XX "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; 360SE)" TLSv1 AES128-SHA 10.228.21.237:80 0.198 0.001线下测试（$http_referer）：10.14.21.197 - - [14/Aug/2012:17:28:22 +0800] "GET /spanner/watch/v1?--db=ztg-1&--mode=compare&--index=status&--option=&--cluster=whole&-F=2012%2F8%2F12-00%3A00%3A00&-T=%2B2880&-i=1&-n=0&_=1344936501292 HTTP/1.1" 200 94193 "http://spanner.alipay.net/optionFrame/history.html" "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.60 Safari/537.1"</code></pre><h3 id="3、错误日志"><a href="#3、错误日志" class="headerlink" title="3、错误日志"></a>3、错误日志</h3><table>  <tbody><tr>    <th>错误信息</th>    <th>错误说明</th>  </tr>  <tr>    <td>"upstream prematurely（过早的） closed connection"</td>    <td>请求uri的时候出现的异常，是由于upstream还未返回应答给用户时用户断掉连接造成的，对系统没有影响，可以忽略</td>  </tr>  <tr>    <td>"recv() failed (104: Connection reset by peer)"</td>    <td>（1）服务器的并发连接数超过了其承载量，服务器会将其中一些连接Down掉；<br> （2）客户关掉了浏览器，而服务器还在给客户端发送数据；<br>（3）浏览器端按了Stop</td>  </tr>  <tr>    <td>"(111: Connection refused) while connecting to upstream"</td>    <td>用户在连接时，若遇到后端upstream挂掉或者不通，会收到该错误</td>  </tr>  <tr>    <td>"(111: Connection refused) while reading response header from upstream"</td>    <td>用户在连接成功后读取数据时，若遇到后端upstream挂掉或者不通，会收到该错误</td>  </tr>  <tr>    <td>"(111: Connection refused) while sending request to upstream"</td>    <td>Nginx和upstream连接成功后发送数据时，若遇到后端upstream挂掉或者不通，会收到该错误</td>  </tr>  <tr>    <td>"(110: Connection timed out) while connecting to upstream"</td>    <td>nginx连接后面的upstream时超时</td>  </tr>  <tr>    <td>"(110: Connection timed out) while reading upstream"</td>    <td>nginx读取来自upstream的响应时超时</td>  </tr>  <tr>    <td>"(110: Connection timed out) while reading response header from upstream"</td>    <td>nginx读取来自upstream的响应头时超时</td>  </tr>  <tr>    <td>"(110: Connection timed out) while reading upstream"</td>    <td>nginx读取来自upstream的响应时超时</td>  </tr>  <tr>    <td>"(104: Connection reset by peer) while connecting to upstream"</td>    <td>upstream发送了RST，将连接重置</td>  </tr>  <tr>    <td>"upstream sent invalid header while reading response header from upstream"</td>    <td>upstream发送的响应头无效</td>  </tr>  <tr>    <td>"upstream sent no valid HTTP/1.0 header while reading response header from upstream"</td>    <td>upstream发送的响应头无效</td>  </tr>  <tr>    <td>"client intended to send too large body"</td>    <td>用于设置允许接受的客户端请求内容的最大值，默认值是1M，client发送的body超过了设置值</td>  </tr>  <tr>    <td>"reopening logs"</td>    <td>用户发送kill  -USR1命令</td>  </tr>  <tr>    <td>"gracefully shutting down",</td>    <td>用户发送kill  -WINCH命令</td>  </tr>  <tr>    <td>"no servers are inside upstream"</td>    <td>upstream下未配置server</td>  </tr>  <tr>    <td>"no live upstreams while connecting to upstream"</td>    <td>upstream下的server全都挂了</td>  </tr>  <tr>    <td>"SSL_do_handshake() failed"</td>    <td>SSL握手失败</td>  </tr>  <tr>    <td>"SSL_write() failed (SSL:) while sending to client"</td>    <td></td>  </tr>  <tr>    <td>"(13: Permission denied) while reading upstream"</td>    <td></td>  </tr>  <tr>    <td>"(98: Address already in use) while connecting to upstream"</td>    <td></td>  </tr>  <tr>    <td>"(99: Cannot assign requested address) while connecting to upstream"</td>    <td></td>  </tr>  <tr>    <td>"ngx_slab_alloc() failed: no memory in SSL session shared cache"</td>    <td>ssl_session_cache大小不够等原因造成</td>  </tr>  <tr>    <td>"could not add new SSL session to the session cache while SSL handshaking"</td>    <td>ssl_session_cache大小不够等原因造成</td>  </tr>  <tr>    <td>"send() failed (111: Connection refused)"</td>    <td></td>  </tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统磁盘分区、挂载</title>
      <link href="/2019/11/11/hd/"/>
      <url>/2019/11/11/hd/</url>
      
        <content type="html"><![CDATA[<p>一、运行fdisk -l命令查看实例上的数据盘。执行命令后，如果不存在/dev/vdb，表示您的实例没有数据盘。确认数据盘是否已挂载。<br>    依次运行以下命令，创建一个单分区数据盘。</p><ul><li>运行fdisk -u /dev/vdb命令：分区数据盘。</li><li>输入p：查看数据盘的分区情况。本示例中，数据盘没有分区。</li><li>输入n：创建一个新分区。</li><li>输入p：选择分区类型为主分区。</li><li><font color="#FF0000">说明 本示例中创建一个单分区数据盘，所以只需要创建主分区。如果要创建四个以上分区，您应该创建至少一个扩展分区，即选择e（extended）。</font></li><li>输入分区编号并按回车键。本示例中，仅创建一个分区，输入1。</li><li>输入第一个可用的扇区编号：按回车键采用默认值2048。</li><li>输入最后一个扇区编号。本示例中，仅创建一个分区，按回车键采用默认值。</li><li>输入p：查看该数据盘的规划分区情况。</li><li>输入w：开始分区，并在完成分区后退出。</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@ecshost~ <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk -u /dev/vdb</span>Welcome to <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux 2.23.2<span class="token punctuation">)</span>.Changes will remain <span class="token keyword">in</span> memory only, <span class="token keyword">until</span> you decide to <span class="token function">write</span> them.Be careful before using the <span class="token function">write</span> command.Device does not contain a recognized partition tableBuilding a new DOS disklabel with disk identifier 0x3e60020e.Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: pDisk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectorsUnits <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x3e60020eDevice Boot Start End Blocks Id SystemCommand <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: nPartition type:p primary <span class="token punctuation">(</span>0 primary, 0 extended, 4 free<span class="token punctuation">)</span>e extendedSelect <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>: pPartition number <span class="token punctuation">(</span>1-4, default 1<span class="token punctuation">)</span>: 1First sector <span class="token punctuation">(</span>2048-41943039, default 2048<span class="token punctuation">)</span>:Using default value 2048Last sector, +sectors or +size<span class="token punctuation">{</span>K,M,G<span class="token punctuation">}</span> <span class="token punctuation">(</span>2048-41943039, default 41943039<span class="token punctuation">)</span>:Using default value 41943039Partition 1 of <span class="token function">type</span> Linux and of size 20 GiB is <span class="token keyword">set</span>Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: pDisk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectorsUnits <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x3e60020eDevice Boot Start End Blocks Id System/dev/vdb1 2048 41943039 20970496 83 LinuxCommand <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: wThe partition table has been altered<span class="token operator">!</span>Calling ioctl<span class="token punctuation">(</span><span class="token punctuation">)</span> to re-read partition table.Syncing disks.</code></pre><p>运行<code>fdisk -lu /dev/vdb</code>命令查看新分区。<br>如果出现以下信息，表示新分区已创建完成。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@ecshost~ <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk -lu /dev/vdb</span>Disk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectorsUnits <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x3e60020eDevice Boot Start End Blocks Id System/dev/vdb1 2048 41943039 20970496 83 Linux</code></pre><p>创建一个ext4文件系统。您也可以根据自己的需要，创建其他文件系统。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@ecshost~ <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkfs.ext4 /dev/vdb1</span>mke2fs 1.42.9 <span class="token punctuation">(</span>28-Dec-2013<span class="token punctuation">)</span>Filesystem label<span class="token operator">=</span>OS type: LinuxBlock size<span class="token operator">=</span>4096 <span class="token punctuation">(</span>log<span class="token operator">=</span>2<span class="token punctuation">)</span>Fragment size<span class="token operator">=</span>4096 <span class="token punctuation">(</span>log<span class="token operator">=</span>2<span class="token punctuation">)</span>Stride<span class="token operator">=</span>0 blocks, Stripe width<span class="token operator">=</span>0 blocks1310720 inodes, 5242624 blocks262131 blocks <span class="token punctuation">(</span>5.00%<span class="token punctuation">)</span> reserved <span class="token keyword">for</span> the super userFirst data block<span class="token operator">=</span>0Maximum filesystem blocks<span class="token operator">=</span>2153775104160 block <span class="token function">groups</span>32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks:32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,4096000Allocating group tables: <span class="token keyword">done</span>Writing inode tables: <span class="token keyword">done</span>Creating journal <span class="token punctuation">(</span>32768 blocks<span class="token punctuation">)</span>: <span class="token keyword">done</span>Writing superblocks and filesystem accounting information: <span class="token keyword">done</span></code></pre><p>运行<code>mount /dev/vdb1 /mnt</code>命令挂载文件系统。<br>运行<code>df -h</code>命令查看目前磁盘空间和使用情况。<br>如果出现新建文件系统的信息，表示挂载成功，您不需要重启实例即可以使用新的文件系统。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分区 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>60个有趣的经济学原则</title>
      <link href="/2019/10/24/jingji/"/>
      <url>/2019/10/24/jingji/</url>
      
        <content type="html"><![CDATA[<h2 id="1、蓝斯登原则"><a href="#1、蓝斯登原则" class="headerlink" title="1、蓝斯登原则"></a>1、蓝斯登原则</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">在你往上爬的时候，一定要保持梯子的整洁，否则你下来时可能会滑到。</font><p><strong>点评：进退有度，才不至进退维谷，宠辱皆忘，方可以宠辱不惊</strong></p><h2 id="2、卢维斯定理"><a href="#2、卢维斯定理" class="headerlink" title="2、卢维斯定理"></a>2、卢维斯定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">谦虚不是把自己想的很糟，而是完全不想自己。</font><p><strong>点评：如果把自己想的太好，就很容易将别人想的很糟</strong></p><h2 id="3、托利得定理"><a href="#3、托利得定理" class="headerlink" title="3、托利得定理"></a>3、托利得定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">测验一个人的智力是否属于上乘，只看脑子里能否同时容纳两种相反的思想，而无碍于其处世行事。</font><p><strong>点评：思可相反，得须相成</strong> </p><h2 id="4、刺猬理论"><a href="#4、刺猬理论" class="headerlink" title="4、刺猬理论"></a>4、刺猬理论</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">刺猬在天冷时靠拢取暖，但保持一定距离，以免互相刺伤。</font><p><strong>点评：保持亲密的重要方法，乃是保持适当的距离</strong> </p><h2 id="5、鲦鱼效应"><a href="#5、鲦鱼效应" class="headerlink" title="5、鲦鱼效应"></a>5、鲦鱼效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">鲦鱼因个体弱小而常常群居，并以强健者为自然首领。将一只稍强的鲦鱼脑后控制行为的部分割除以后，此鱼便失去自制力，行为也发生紊乱。但其他鲦鱼却仍像从前一样盲目追随。</font><p><strong>点评：下属的悲剧总是领导一手造成的。下属觉得最没劲的事，是他们跟着一位最差劲的领导</strong> </p><h2 id="6、雷鲍夫法则"><a href="#6、雷鲍夫法则" class="headerlink" title="6、雷鲍夫法则"></a>6、雷鲍夫法则</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">在你着手建立合作和信任时要牢记我们语言中</font><p><strong>点评：最重要的四个字是：不妨试试，最重要的一个字是：您</strong> </p><h2 id="7、洛伯定律"><a href="#7、洛伯定律" class="headerlink" title="7、洛伯定律"></a>7、洛伯定律</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">对于一个经理人来说，最要紧的不是你在场时的情况，而是你不在场时发生了什么。</font><p><strong>点评：如果只想让下属听你的，那么当你不在身边时他们就不知道应该听谁的了</strong> </p><h2 id="8、斯坦纳定理"><a href="#8、斯坦纳定理" class="headerlink" title="8、斯坦纳定理"></a>8、斯坦纳定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">在哪里说得愈少，在哪里听到的就愈多。</font><p><strong>点评：只有很好听取别人的，才能更好说出自己的</strong> </p><h2 id="9、费斯诺定理"><a href="#9、费斯诺定理" class="headerlink" title="9、费斯诺定理"></a>9、费斯诺定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">人有两只耳朵却只有一张嘴巴，这意味着应该多听少讲。</font><p><strong>点评：说的多了，说的就会成为做的障碍</strong> </p><h2 id="10、牢骚效应"><a href="#10、牢骚效应" class="headerlink" title="10、牢骚效应"></a>10、牢骚效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">凡是公司中有对工作发牢骚的人，那家公司或老板一定比没有这种人或有这种人而把牢骚埋在肚子里的公司要成功得多。</font><p><strong>点评：牢骚是改变不合理现状的催化剂；牢骚虽不总是正确的，但认真对待牢骚却总是正确的</strong> </p><h2 id="11、避雷针效应"><a href="#11、避雷针效应" class="headerlink" title="11、避雷针效应"></a>11、避雷针效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">在高大的建筑物顶端安装一个金属棒，用金属线与埋在地下的一块金属板连接起来，利用金属棒的尖端放电，使云层所带的电和地上的电逐渐中和，从而保护建筑物等避免雷击。</font><p><strong>点评：善疏则通，能导必安</strong> </p><h2 id="12、氨基酸组合效应"><a href="#12、氨基酸组合效应" class="headerlink" title="12、氨基酸组合效应"></a>12、氨基酸组合效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">组成人体蛋白的八种氨基酸，只要有一种含量不足，其他七种就无法合成蛋白质。</font><p><strong>点评：当缺一不可时，一就是一切</strong> </p><h2 id="13、米格-25效应"><a href="#13、米格-25效应" class="headerlink" title="13、米格-25效应"></a>13、米格-25效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">前苏联研制的米格-25喷气式战斗机的许多零部件与美国的相比都落后，但因设计者考虑了整体性能，故能在升降、速度、应急反应等方面成为当时世界一流。</font><p><strong>点评：所谓最佳整体，乃是个体的最佳组合</strong> </p><h2 id="14、磨合效应"><a href="#14、磨合效应" class="headerlink" title="14、磨合效应"></a>14、磨合效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">新组装的机器，通过一定时期的使用，把摩擦面上的加工痕迹磨光而变得更加密合。</font><p><strong>点评：要想达到完整的契合，须双方都做出必要的割舍</strong> </p><h2 id="15、波特定理"><a href="#15、波特定理" class="headerlink" title="15、波特定理"></a>15、波特定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">当遭受许多批评时，下级往往只记住开头的一些，其余就不听了，因为他们忙于思索论据来反驳开头的批评。</font><p><strong>点评：总盯着下属的错误，是一个领导者的最大失误</strong> </p><h2 id="16、蓝斯登定律"><a href="#16、蓝斯登定律" class="headerlink" title="16、蓝斯登定律"></a>16、蓝斯登定律</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">跟一位朋友一起工作，远较在父亲之下工作有趣的多。</font><p><strong>点评：可敬不可亲，终难敬；有权没有威，常失权</strong> </p><h2 id="17、吉尔伯特法则"><a href="#17、吉尔伯特法则" class="headerlink" title="17、吉尔伯特法则"></a>17、吉尔伯特法则</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">工作危机最确凿的信号，是没有人跟你说该怎样做。</font><p><strong>点评：真正危险的事，是没有人跟你谈危险</strong> </p><h2 id="18、权威暗示理论"><a href="#18、权威暗示理论" class="headerlink" title="18、权威暗示理论"></a>18、权威暗示理论</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">一化学家称，他将测验一瓶臭气的传播速度，他打开瓶盖15秒后，前排学生即举手，称自己闻到臭气，而后排的人则陆续举手，纷纷称自己也已闻到，其中瓶中什么也没有。</font><p><strong>点评：迷信则轻信，盲目必盲从</strong> </p><h2 id="19、奥尼尔定理"><a href="#19、奥尼尔定理" class="headerlink" title="19、奥尼尔定理"></a>19、奥尼尔定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">所有的政治都是地方的。</font><p><strong>点评：只有能切身体会到，群众才认为那是真实的</strong> </p><h2 id="20、定位效应"><a href="#20、定位效应" class="headerlink" title="20、定位效应"></a>20、定位效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">社会心理学家曾作过一个试验，在召集会议时先让人们自由的选择位子，之后到室外休息片刻再进入室内入座，如此五至六次，发现大多数人都选择他们第一次坐过的位子。</font><p><strong>点评：凡是自己认定的，人们大都不想轻易改变它</strong> </p><h2 id="21、艾奇布恩定理"><a href="#21、艾奇布恩定理" class="headerlink" title="21、艾奇布恩定理"></a>21、艾奇布恩定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">如果你遇见员工而不认得，或忘了他的名字，那你的公司就太大了。</font><p><strong>点评：摊子一旦铺的过大，你就很难把它照顾周全</strong> </p><h2 id="22、吉格勒定理"><a href="#22、吉格勒定理" class="headerlink" title="22、吉格勒定理"></a>22、吉格勒定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">除了生命本身，没有任何才能不需要后天的锻炼。</font><p><strong>点评：水无积不辽阔，人不养不成才</strong> </p><h2 id="23、犬獒效应"><a href="#23、犬獒效应" class="headerlink" title="23、犬獒效应"></a>23、犬獒效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">当年幼的獒犬长出牙齿并能撕咬时，主人就把它们放到一个没有食物和水的封闭环境里让这些幼犬自相撕咬，最后剩下的一只活着的犬，这只犬称为獒。据说十只犬才能产生一只獒。</font><p><strong>点评：困境是造就强者的学校</strong></p><h2 id="24、近因效应"><a href="#24、近因效应" class="headerlink" title="24、近因效应"></a>24、近因效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">最近或最后的印象对人的认知有强烈的影响。</font><p><strong>点评：结果往往会被视为过程的总结</strong> </p><h2 id="25、酒井法则"><a href="#25、酒井法则" class="headerlink" title="25、酒井法则"></a>25、酒井法则</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">在招工时用尽浑身解数，使出各种方法，不如使自身成为一个好公司，这样人才自然而然会汇集而来。</font><p><strong>点评：不能吸引人才，已有的人才也留不住</strong> </p><h2 id="26、美即好效应"><a href="#26、美即好效应" class="headerlink" title="26、美即好效应"></a>26、美即好效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">对一个外表英俊漂亮的人，人们很容易误认为他或她的其他方面也很不错。</font><p><strong>点评：印象一旦以情绪为基础，这一印象常常会偏离事实</strong> </p><h2 id="27、奥格尔维法则"><a href="#27、奥格尔维法则" class="headerlink" title="27、奥格尔维法则"></a>27、奥格尔维法则</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">如果我们每个人都雇佣比我们自己都更强的人，我们就能成为巨人公司。</font><p><strong>点评：如果你所拥有的人都比你差，那么他们就只能作出比你更差的事情</strong> </p><h2 id="28、皮尔卡丹定理"><a href="#28、皮尔卡丹定理" class="headerlink" title="28、皮尔卡丹定理"></a>28、皮尔卡丹定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">用人上一加一不等于二，搞不好会等于零。</font><p><strong>点评：组合失当，常失整体优势，安排得宜，才成最佳配置</strong> </p><h2 id="29、马蝇效应"><a href="#29、马蝇效应" class="headerlink" title="29、马蝇效应"></a>29、马蝇效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">再懒惰的马，只要身上有马蝇叮咬，它也会精神抖擞，飞快奔跑。</font><p><strong>点评：有正确的刺激，才会有正确的反映</strong> </p><h2 id="30、倒U形假说"><a href="#30、倒U形假说" class="headerlink" title="30、倒U形假说"></a>30、倒U形假说</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">当一个人处于轻度兴奋时，能把工作做得最好；但一个人一点儿兴奋都没有时，也就没有做好工作的动力了；相应地，当一个人处于极度兴奋时，随之而来的压力可能会使他完不成本该完成的工作。世界网坛名将贝克尔之所以被称为常胜将军，其秘诀之一即是在比赛中自始至终防止过度兴奋，而保持半兴奋状态。所以有人亦将倒U形假说称为贝克尔境界。</font><p><strong>点评：激情过热，激情就会把理智烧光；热情中的冷静让人清醒，冷静中的热情使人执着</strong> </p><h2 id="31、特伯斯论"><a href="#31、特伯斯论" class="headerlink" title="31、特伯斯论"></a>31、特伯斯论</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">在数字中找不到安全。</font><p><strong>点评：数字是死的，情况是活的</strong> </p><h2 id="32、摩斯科定理"><a href="#32、摩斯科定理" class="headerlink" title="32、摩斯科定理"></a>32、摩斯科定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">你得到的第一个回答，不一定是最好的回答。</font><p><strong>点评：刨根问底，问底知底</strong> </p><h2 id="33、罗杰斯论断"><a href="#33、罗杰斯论断" class="headerlink" title="33、罗杰斯论断"></a>33、罗杰斯论断</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">成功的公司不会等待外界的影响来决定自己的命运，而是始终向前看。</font><p><strong>点评：只想随波逐流，难有理想彼岸</strong> </p><h2 id="34、萨盖定律"><a href="#34、萨盖定律" class="headerlink" title="34、萨盖定律"></a>34、萨盖定律</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">戴一块手表的人知道准确的时间，戴两块手表的人便不敢确定几点了。</font><p><strong>点评：若选错误参照，必无正确比较</strong> </p><h2 id="35、隧道视野效应"><a href="#35、隧道视野效应" class="headerlink" title="35、隧道视野效应"></a>35、隧道视野效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">一个人若身处隧道，他看到的就只是前后非常狭窄的视野。</font><p><strong>点评：不拓心路，难开视野；视野不宽，脚下的路也会愈走愈窄</strong> </p><h2 id="36、巴菲特定律"><a href="#36、巴菲特定律" class="headerlink" title="36、巴菲特定律"></a>36、巴菲特定律</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">在其他人都投了资的地方去投资，你是不会发财的。</font><p><strong>点评：善于走自己的路，才可望走别人没走过的路；特色不特，优势无忧</strong> </p><h2 id="37、古特雷定理"><a href="#37、古特雷定理" class="headerlink" title="37、古特雷定理"></a>37、古特雷定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">每一处出口都是另一处的入口。</font><p><strong>点评：上一个目标是下一个目标的基础，下一个目标是上一个目标的延续</strong> </p><h2 id="38、列文定理"><a href="#38、列文定理" class="headerlink" title="38、列文定理"></a>38、列文定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">那些犹豫着迟迟不能做出计划的人，通常是因为对自己的能力没有把握。</font><p><strong>点评：如果没有能力去筹划，就只有时间去后悔了</strong> </p><h2 id="39、非洛斯特法则"><a href="#39、非洛斯特法则" class="headerlink" title="39、非洛斯特法则"></a>39、非洛斯特法则</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">在筑墙之前应该知道把什么圈出去，把什么圈进来。</font><p><strong>点评：开始就明确了界限、最终就不会做出超越极限的事来</strong> </p><h2 id="40、波克定理"><a href="#40、波克定理" class="headerlink" title="40、波克定理"></a>40、波克定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">只有在争辩中，才可能诞生最好的主意和最好的决定。</font><p><strong>点评：无摩擦便无磨合，有争论才有高论</strong> </p><h2 id="41、韦奇定理"><a href="#41、韦奇定理" class="headerlink" title="41、韦奇定理"></a>41、韦奇定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">即使你已有了主见，但如果有十个朋友看法和你相反，你就很难不动摇。</font><p><strong>点评：未听之时不应有成见，既听之后不可无主见；不怕开始众说纷纭，只怕最后莫衷一是</strong> </p><h2 id="42、福克兰定律"><a href="#42、福克兰定律" class="headerlink" title="42、福克兰定律"></a>42、福克兰定律</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">没有必要做出决定时，就有必要不做决定。</font><p><strong>点评：当不知如何行动时，最好的行动就是不采取任何行动</strong> </p><h2 id="43、王安论断"><a href="#43、王安论断" class="headerlink" title="43、王安论断"></a>43、王安论断</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">犹豫不决固然可以免去一些做错事的机会，但也失去了成功的机遇。</font><p><strong>点评：寡断能使好事由好变坏，果断可将危机转危为安</strong> </p><h2 id="44、格瑞斯特定理"><a href="#44、格瑞斯特定理" class="headerlink" title="44、格瑞斯特定理"></a>44、格瑞斯特定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">杰出的策略必须加上杰出的执行才能凑效。</font><p><strong>点评：好事干实更好，实事办好愈实</strong> </p><h2 id="45、吉德林法则"><a href="#45、吉德林法则" class="headerlink" title="45、吉德林法则"></a>45、吉德林法则</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">把难题清清楚楚地写出来，便已经解决了一半。</font><p><strong>点评：杂乱无章的思维，不可能产生有条有理的行动</strong> </p><h2 id="46、沃尔森法则"><a href="#46、沃尔森法则" class="headerlink" title="46、沃尔森法则"></a>46、沃尔森法则</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">把信息和情报放在第一位，金钱就会滚滚而来。</font><p><strong>点评：你能得到多少，往往到取决于你能知道多少</strong> </p><h2 id="47、塔马拉效应"><a href="#47、塔马拉效应" class="headerlink" title="47、塔马拉效应"></a>47、塔马拉效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">塔玛拉是捷克雷达专家弗佩赫发明的一种雷达，它与其他雷达的最大不同是不发射信号而只接收信号，故不会被敌方反雷达装置发现。</font><p><strong>点评：善藏者人不可知，能知者人无以藏</strong> </p><h2 id="48、小池定理"><a href="#48、小池定理" class="headerlink" title="48、小池定理"></a>48、小池定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">越是沉醉，就越是抓着眼前的东西不放。</font><p><strong>点评：自我陶醉不易清醒，自以为是不喜批评</strong> </p><h2 id="49、赫勒法则"><a href="#49、赫勒法则" class="headerlink" title="49、赫勒法则"></a>49、赫勒法则</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">当人们知道自己的工作成绩有人检查的时候会加倍努力。</font><p><strong>点评：只有在相互信任的情况下，监督才会成为动力</strong> </p><h2 id="50、横山法则"><a href="#50、横山法则" class="headerlink" title="50、横山法则"></a>50、横山法则</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">最有效并持续不断的控制不是强制，而是触发个人内心的自发控制。</font><p><strong>点评：有自觉性才有积极性，无自决权便无主动权</strong> </p><h2 id="51、蝴蝶效应"><a href="#51、蝴蝶效应" class="headerlink" title="51、蝴蝶效应"></a>51、蝴蝶效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">紊乱学研究者称，南半球某地的一只蝴蝶偶尔扇动一下翅膀所引起的微弱气流，几星期后可变成席卷北半球某地的一场龙卷风。他们将这种由一个极小起因，经过一定的时间，在其他因素的参与作用下，发展成极为巨大和复杂后果的现象称为蝴蝶效应。</font><p><strong>点评：善终者慎始，谨小者慎微</strong> </p><h2 id="52、阿什法则"><a href="#52、阿什法则" class="headerlink" title="52、阿什法则"></a>52、阿什法则</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">承认问题是解决问题的第一步。</font><p><strong>点评：你愈是躲着问题，问题愈会揪住你不放</strong> </p><h2 id="53、洛克忠告"><a href="#53、洛克忠告" class="headerlink" title="53、洛克忠告"></a>53、洛克忠告</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">规定应该少定，一旦定下之后，便得严格遵守。</font><p><strong>点评：简则易循，严则必行</strong> </p><h2 id="54、热炉法则"><a href="#54、热炉法则" class="headerlink" title="54、热炉法则"></a>54、热炉法则</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">当人用手去碰烧热的火炉时，就会受到烫的惩罚，其有以下三个特点：即时性，预警性，平等性。</font><p><strong>点评：罪与罚能相符，法与治可相期</strong> </p><h2 id="55、柯美雅定律"><a href="#55、柯美雅定律" class="headerlink" title="55、柯美雅定律"></a>55、柯美雅定律</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">世上没有十全十美的东西，所以任何东西都有改革的余地。</font><p><strong>点评：不拘于常规，才能激发出创造力</strong> </p><h2 id="56、达维多夫定律"><a href="#56、达维多夫定律" class="headerlink" title="56、达维多夫定律"></a>56、达维多夫定律</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">没有创新精神的人永远也只能是一个执行者。</font><p><strong>点评：只有敢为人先的人，才最有资格成为真正的先驱者</strong> </p><h2 id="57、自吃幼崽效应"><a href="#57、自吃幼崽效应" class="headerlink" title="57、自吃幼崽效应"></a>57、自吃幼崽效应</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">美国硅谷企业竞争十分激烈，以至于各公司都积极寻找自己的致命弱点，所有公司共同的生存之道是：拿出更好产品来击败自己的原有产品。有人将这种行为戏称为自吃幼崽。</font><p><strong>点评：自己不逼自己，别人迟早会逼你；敢于对过去告一个段落，才有信心掀开新的一章</strong></p><h2 id="58、舍恩定理"><a href="#58、舍恩定理" class="headerlink" title="58、舍恩定理"></a>58、舍恩定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">新思想只有落到真正相信它，对它着迷的人手里才能开花结果。</font><p><strong>点评：只有信之不疑，才能持之以恒</strong></p><h2 id="59：吉宁定理"><a href="#59：吉宁定理" class="headerlink" title="59：吉宁定理"></a>59：吉宁定理</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">真正的错误是害怕犯错误。</font><p><strong>点评：不怕错误的人，错误往往也离他最远</strong></p><h2 id="60：卡贝定理："><a href="#60：卡贝定理：" class="headerlink" title="60：卡贝定理："></a>60：卡贝定理：</h2><hr style="border: 1px solid #000000"><font size="4px" color="#993333" ;="">放弃是创新的钥匙。</font><p><strong>点评：在未学会放弃之前，你很难懂的什么是争取</strong></p><hr style="border: 1px solid #000000"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 定律 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs7 安装 Mysql5.7</title>
      <link href="/2019/10/16/centos7-an-zhuang-mysql5-7/"/>
      <url>/2019/10/16/centos7-an-zhuang-mysql5-7/</url>
      
        <content type="html"><![CDATA[<h3 id="1、下载mysql源安装包"><a href="#1、下载mysql源安装包" class="headerlink" title="1、下载mysql源安装包"></a>1、下载mysql源安装包</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code></pre><h3 id="2、安装mysql源"><a href="#2、安装mysql源" class="headerlink" title="2、安装mysql源"></a>2、安装mysql源</h3><pre><code>yum localinstall mysql57-community-release-el7-8.noarch.rpm```bash### 3、检查mysql源是否安装成功```bashyum repolist enabled | grep "mysql.*-community.*"</code></pre><p>返回</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM_18_105_centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum repolist enabled | grep "mysql.*-community.*"</span>mysql-connectors-community/x86_64    MySQL Connectors Community               63mysql-tools-community/x86_64         MySQL Tools Community                    69mysql57-community/x86_64             MySQL 5.7 Community Server              287</code></pre><p>看到上图所示表示安装成功。</p><p>也可以修改 vim /etc/yum.repos.d/mysql-community.repo源，改变默认安装的mysql版本。比如要安装5.6版本，将5.7源的enabled=1改成enabled=0。然后再将5.6源的enabled=0改成enabled=1即可。改完之后的效果如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment" spellcheck="true"># Enable to use MySQL 5.5</span><span class="token punctuation">[</span>mysql55-community<span class="token punctuation">]</span>name<span class="token operator">=</span>MySQL 5.5 Community Serverbaseurl<span class="token operator">=</span>http://repo.mysql.com/yum/mysql-5.5-community/el/7/<span class="token variable">$basearch</span>/enabled<span class="token operator">=</span>0 <span class="token comment" spellcheck="true"># 这里 0表示不选</span>gpgcheck<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<span class="token comment" spellcheck="true"># Enable to use MySQL 5.6</span><span class="token punctuation">[</span>mysql56-community<span class="token punctuation">]</span>name<span class="token operator">=</span>MySQL 5.6 Community Serverbaseurl<span class="token operator">=</span>http://repo.mysql.com/yum/mysql-5.6-community/el/7/<span class="token variable">$basearch</span>/enabled<span class="token operator">=</span>0 <span class="token comment" spellcheck="true"># 这里 0表示不选</span>gpgcheck<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<span class="token punctuation">[</span>mysql57-community<span class="token punctuation">]</span>name<span class="token operator">=</span>MySQL 5.7 Community Serverbaseurl<span class="token operator">=</span>http://repo.mysql.com/yum/mysql-5.7-community/el/7/<span class="token variable">$basearch</span>/enabled<span class="token operator">=</span>1 <span class="token comment" spellcheck="true"># 这里 1 表示 选中</span>gpgcheck<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><h3 id="4、安装MySQL"><a href="#4、安装MySQL" class="headerlink" title="4、安装MySQL"></a>4、安装MySQL</h3><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> mysql-community-server</code></pre><h3 id="5、启动MySQL服务"><a href="#5、启动MySQL服务" class="headerlink" title="5、启动MySQL服务"></a>5、启动MySQL服务</h3><pre class=" language-bash"><code class="language-bash">systemctl start mysqld</code></pre><p>查看MySQL的启动状态</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM_18_105_centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl status mysqld</span>● mysqld.service - MySQL Server   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/mysqld.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: disabled<span class="token punctuation">)</span>   Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since 四 2018-08-23 15:27:28 CST<span class="token punctuation">;</span> 1h 26min ago     Docs: man:mysqld<span class="token punctuation">(</span>8<span class="token punctuation">)</span>           http://dev.mysql.com/doc/refman/en/using-systemd.html  Process: 21453 ExecStart<span class="token operator">=</span>/usr/sbin/mysqld --daemonize --pid-file<span class="token operator">=</span>/var/run/mysqld/mysqld.pid <span class="token variable">$MYSQLD_OPTS</span> <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, status<span class="token operator">=</span>0/SUCCESS<span class="token punctuation">)</span>  Process: 21432 ExecStartPre<span class="token operator">=</span>/usr/bin/mysqld_pre_systemd <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, status<span class="token operator">=</span>0/SUCCESS<span class="token punctuation">)</span> Main PID: 21457 <span class="token punctuation">(</span>mysqld<span class="token punctuation">)</span>   Memory: 202.1M   CGroup: /system.slice/mysqld.service           └─21457 /usr/sbin/mysqld --daemonize --pid-file<span class="token operator">=</span>/var/run/mysqld/mysqld.pid</code></pre><h3 id="6、设置开机启动"><a href="#6、设置开机启动" class="headerlink" title="6、设置开机启动"></a>6、设置开机启动</h3><pre class=" language-bash"><code class="language-bash"> systemctl <span class="token function">enable</span> mysqld systemctl daemon-reload</code></pre><h3 id="7、获取root登陆密码"><a href="#7、获取root登陆密码" class="headerlink" title="7、获取root登陆密码"></a>7、获取root登陆密码</h3><p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM_18_105_centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#  grep 'temporary password' /var/log/mysqld.log</span>2018-08-23T06:10:44.014590Z 1 <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> A temporary password is generated <span class="token keyword">for</span> root@localhost: thI/5wEl_chk</code></pre><p>ps:如果没有返回，找不到root密码，解决方案：</p><p>1删除原来安装过的mysql残留的数据（这一步非常重要，问题就出在这）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">rm</span> -rf /var/lib/mysql</code></pre><p>2重启mysqld服务</p><pre class=" language-bash"><code class="language-bash">systemctl restart mysqld</code></pre><p>3再去找临时密码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log</code></pre><p>原因有可能是之前安装过一次，没有安装好。</p><h3 id="8、登陆"><a href="#8、登陆" class="headerlink" title="8、登陆"></a>8、登陆</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM_18_105_centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -uroot -p</span>---- 输入密码：thI/5wEl_chk</code></pre><p>修改密码</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> ALTER USER <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'123456Aa!'</span><span class="token punctuation">;</span> MySql 默认密码级别一定要有大小写字母和特殊符号，所以比较麻烦。</code></pre><h3 id="9、修改密码策略"><a href="#9、修改密码策略" class="headerlink" title="9、修改密码策略"></a>9、修改密码策略</h3><p>在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 0（LOW）：验证 Length</span><span class="token comment" spellcheck="true"># 1（MEDIUM）：验证 Length; numeric, lowercase/uppercase, and special characters</span><span class="token comment" spellcheck="true"># 2（STRONG）：验证 Length; numeric, lowercase/uppercase, and special characters; dictionary file</span>validate_password_policy<span class="token operator">=</span>0</code></pre><p>当然如果不需要密码策略，可以禁用：<br>在/etc/my.cnf文件添加</p><pre class=" language-bash"><code class="language-bash">validate_password <span class="token operator">=</span> off</code></pre><p>重启生效：</p><pre class=" language-bash"><code class="language-bash">systemctl restart mysqld</code></pre><p>Mysql的root用户，只能本地访问，这里在创建一个远程可以访问的 用户。</p><pre class=" language-bash"><code class="language-bash">GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'its'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'123456'</span> WITH GRANT OPTION<span class="token punctuation">;</span></code></pre><h3 id="10、忽略大小写"><a href="#10、忽略大小写" class="headerlink" title="10、忽略大小写"></a>10、忽略大小写</h3><p>登陆mysql查看</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> show variables like <span class="token string">"%case%"</span><span class="token punctuation">;</span>+------------------------+-------+<span class="token operator">|</span> Variable_name          <span class="token operator">|</span> Value <span class="token operator">|</span>+------------------------+-------+<span class="token operator">|</span> lower_case_file_system <span class="token operator">|</span> OFF   <span class="token operator">|</span><span class="token operator">|</span> lower_case_table_names <span class="token operator">|</span> 0     <span class="token operator">|</span>  <span class="token comment" spellcheck="true">##0区分 1 不区分</span>+------------------------+-------+2 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><p>修改配置文件 /etc/my.cnf 添加：</p><p>0：区分大小写，1：不区分大小写</p><pre class=" language-bash"><code class="language-bash">lower_case_table_names <span class="token operator">=</span>1重启后生效：systemctl restart mysqld</code></pre><h3 id="11、用户权限"><a href="#11、用户权限" class="headerlink" title="11、用户权限"></a>11、用户权限</h3><p>把数据库迁移到新的服务器上,执行存储过程时出现了如下问题:<br>execute command denied to user ‘用户名’@’%’ for routine ‘函数名称’<br>后来一查原来是权限问题,只要用下面的语句改一下相应用户的权限就可以了:</p><pre class=" language-bash"><code class="language-bash">GRANT ALL PRIVILEGES ON *.* TO ‘用户名’@’%’ <span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span></code></pre><p>相应的撤消权限命令:</p><pre class=" language-bash"><code class="language-bash">REVOKE ALL PRIVILEGES ON *.* FROM  ‘用户名’@’%’ <span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span></code></pre><h3 id="12、跑脚本的时候"><a href="#12、跑脚本的时候" class="headerlink" title="12、跑脚本的时候"></a>12、跑脚本的时候</h3><pre class=" language-bash"><code class="language-bash">ERROR 1067 <span class="token punctuation">(</span>42000<span class="token punctuation">)</span>: Invalid default value <span class="token keyword">for</span> <span class="token string">'FAILD_TIME'</span> （对TIMESTAMP 类型的子段如果不设置缺省值或没有标志not null时候在创建表时会报这个错误）这是因为sql_mode中的NO_ZEROR_DATE导制的，在strict mode中不允许<span class="token string">'0000-00-00'</span>作为合法日期</code></pre><p>使用下面的命令查看sql_mode</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span>show variables like <span class="token string">'sql_mode'</span><span class="token punctuation">;</span>+---------------+-------------------------------------------------------------------------------------------------------------------------------------------+<span class="token operator">|</span> Variable_name <span class="token operator">|</span> Value                                                                                                                                     <span class="token operator">|</span>+---------------+-------------------------------------------------------------------------------------------------------------------------------------------+<span class="token operator">|</span> sql_mode      <span class="token operator">|</span> ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION <span class="token operator">|</span>+---------------+-------------------------------------------------------------------------------------------------------------------------------------------+</code></pre><p>将上面的NO_ZERO_DATE改为下面的ALLOW_INVALID_DATES</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">set</span> sql_mode<span class="token operator">=</span><span class="token string">'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ALLOW_INVALID_DATES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'</span><span class="token punctuation">;</span></code></pre><p>上面的设置是临时设置，在重新登陆后，该设置又恢复为NO_ZERO_DATE</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS之acme.sh申请证书</title>
      <link href="/2019/10/15/acme/"/>
      <url>/2019/10/15/acme/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>一个纯粹用Shell（Unix shell）语言编写的ACME协议客户端。完整的ACME协议实施。 支持ACME v1和ACME v2 支持ACME v2通配符证书简单，功能强大且易于使用。你只需要3分钟就可以学习它。Let’s Encrypt免费证书客户端最简单的shell脚本。纯粹用Shell编写，不依赖于python或官方的Let’s Encrypt客户端。只需一个脚本即可自动颁发，续订和安装证书。 不需要root/sudoer访问权限。支持在Docker内使用，支持IPv6</li></ul></blockquote><h3 id="一、安装acme-sh"><a href="#一、安装acme-sh" class="headerlink" title="一、安装acme.sh"></a>一、安装acme.sh</h3><p>1.安装acme.sh</p><pre class=" language-bash"><code class="language-bash">curl https://get.acme.sh <span class="token operator">|</span> sh</code></pre><p>2.把 acme.sh 安装到你的 home 目录下:~/.acme.sh/并创建 一个 bash 的 alias, 方便你的使用:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">alias</span> acme.sh<span class="token operator">=</span>~/.acme.sh/acme.sh<span class="token keyword">echo</span> <span class="token string">'alias acme.sh=~/.acme.sh/acme.sh'</span> <span class="token operator">>></span>/etc/profile</code></pre><p>3.安装过程中会自动为你创建 cronjob, 每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书(可执行crontab -l 查看)。</p><pre class=" language-bash"><code class="language-bash">00 00 * * * root /root/.acme.sh/acme.sh --cron --home /root/.acme.sh <span class="token operator">&amp;</span><span class="token operator">></span>/var/log/acme.sh.logs</code></pre><h3 id="二、申请证书"><a href="#二、申请证书" class="headerlink" title="二、申请证书"></a>二、申请证书</h3><p>acme.sh 实现了 acme 协议支持的所有验证协议. 一般有两种方式验证: http 和 dns 验证。<br>1.HTTP 方式<br>http 方式需要在你的网站根目录下放置一个文件, 来验证你的域名所有权,完成验证. 然后就可以生成证书了.</p><pre class=" language-bash"><code class="language-bash">acme.sh  --issue  -d clsn.io -d *.clsn.io  --webroot  /www/wwwroot/clsn.io/</code></pre><p>只需要指定域名, 并指定域名所在的网站根目录. acme.sh 会全自动的生成验证文件, 并放到网站的根目录, 然后自动完成验证. 最后会聪明的删除验证文件. 整个过程没有任何副作用.<br>如果你用的 apache服务器, acme.sh 还可以智能的从 apache的配置中自动完成验证, 你不需要指定网站根目录:</p><pre class=" language-bash"><code class="language-bash">acme.sh --issue  -d clsn.io   --clsn.io</code></pre><p>如果你用的 nginx服务器, 或者反代, acme.sh 还可以智能的从 nginx的配置中自动完成验证, 你不需要指定网站根目录:</p><pre class=" language-bash"><code class="language-bash">acme.sh --issue  -d clsn.io  --nginx</code></pre><p>注意, 无论是 apache 还是 nginx 模式, acme.sh在完成验证之后, 会恢复到之前的状态, 都不会私自更改你本身的配置. 好处是你不用担心配置被搞坏。<br>该类型的配置有一个缺点, 你需要自己配置 ssl 的配置, 否则只能成功生成证书, 你的网站还是无法访问https. 但是为了安全, 你还是自己手动改配置吧.<br>如果你还没有运行任何 web 服务, 80 端口是空闲的, 那么 acme.sh 还能假装自己是一个webserver, 临时听在80 端口, 完成验证:</p><pre class=" language-bash"><code class="language-bash">acme.sh  --issue -d clsn.io   --standalone</code></pre><p>2.DNS方式API<br>dns 方式的真正强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证.<br>acme.sh 目前支持 cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等数十种解析商的自动集成.<br>以 dnspod 为例, 你需要先登录到 dnspod 账号, 生成你的 api id 和 api key, 都是免费的. 然后:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> DP_Id<span class="token operator">=</span><span class="token string">"76GJHG4SG1Q"</span><span class="token function">export</span> DP_Key<span class="token operator">=</span><span class="token string">"qaEDHSJiokjhfs"</span>acme.sh   --issue   --dns dns_dp   -d clsn.io  -d www.clsn.io</code></pre><p>证书就会自动生成了. 这里给出的 api id 和 api key 会被自动记录下来, 将来你在使用 dnspod api 的时候, 就不需要再次指定了. 直接生成就好了:</p><pre class=" language-bash"><code class="language-bash">acme.sh  --issue   -d  clsn.io   --dns  dns_dp</code></pre><h3 id="三、证书的使用"><a href="#三、证书的使用" class="headerlink" title="三、证书的使用"></a>三、证书的使用</h3><p>前面证书生成以后, 接下来需要把证书 copy 到真正需要用它的地方。<br>注意, 默认生成的证书都放在安装目录下: ~/.acme.sh/, 请不要直接使用此目录下的文件,<br>例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件.<br>这里面的文件都是内部使用, 而且目录结构可能会变化.正确的使用方法是使用 –installcert 命令,并指定目标位置, 然后证书文件会被copy到相应的位置, 例如:</p><pre class=" language-bash"><code class="language-bash">acme.sh  --installcert  -d  <span class="token operator">&lt;</span>domain<span class="token operator">></span>.com   \        --key-file   /etc/nginx/ssl/<span class="token operator">&lt;</span>domain<span class="token operator">></span>.key \        --fullchain-file /etc/nginx/ssl/fullchain.cer \        --reloadcmd  <span class="token string">"service nginx force-reload"</span></code></pre><p>以Nginx标准配置为例，生成的证书文件推荐使用 fullchain.cer，私钥文件为是clsn.io.key。<br>Nginx 的配置 ssl_certificate 使用 fullchain.cer ，而非 .cer ，否则 SSL Labs 的测试会报 Chain issues Incomplete 错误。<br>(1)通过上述中生成的证书路径为/www/server/panel/vhost/cert/clsn.io/；<br>修改配置文件</p><pre class=" language-bash"><code class="language-bash">server <span class="token punctuation">{</span>        listen 443<span class="token punctuation">;</span>        server_name localhost<span class="token punctuation">;</span>        ssl on<span class="token punctuation">;</span>        root html<span class="token punctuation">;</span>        index index.html index.htm<span class="token punctuation">;</span>        ssl_certificate   /www/server/panel/vhost/cert/clsn.io/fullchain.cer<span class="token punctuation">;</span>        ssl_certificate_key  /www/server/panel/vhost/cert/clsn.io/clsn.key<span class="token punctuation">;</span>        ssl_session_timeout 5m<span class="token punctuation">;</span>        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:<span class="token operator">!</span>NULL:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>ADH:<span class="token operator">!</span>RC4<span class="token punctuation">;</span>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="token punctuation">;</span>        ssl_prefer_server_ciphers on<span class="token punctuation">;</span>        location / <span class="token punctuation">{</span>            root html<span class="token punctuation">;</span>            index index.html index.htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="四、更新"><a href="#四、更新" class="headerlink" title="四、更新"></a>四、更新</h3><p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 acme.sh 也经常更新以保持同步.<br>升级 acme.sh 到最新版 :</p><pre class=" language-bash"><code class="language-bash">acme.sh --upgrade</code></pre><p>如果你不想手动升级, 可以开启自动升级:</p><pre class=" language-bash"><code class="language-bash">acme.sh  --upgrade  --auto-upgrade</code></pre><p>之后, acme.sh 就会自动保持更新了.<br>你也可以随时关闭自动更新:</p><pre class=" language-bash"><code class="language-bash">acme.sh --upgrade  --auto-upgrade  0</code></pre><blockquote><ul><li>参考文献：</li><li><ul><li><a href="https://yq.aliyun.com/articles/674835" target="_blank" rel="noopener">https://yq.aliyun.com/articles/674835</a></li></ul></li><li><ul><li><a href="https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></li></ul></li></ul></blockquote><blockquote><ul><li>作者：惨绿少年</li><li>出处：<a href="http://clsn.io" target="_blank" rel="noopener">http://clsn.io</a></li><li>本文版权归作者所有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。</li></ul></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSL </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书单推荐</title>
      <link href="/2019/10/14/books/"/>
      <url>/2019/10/14/books/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>序言：本人挺喜欢看书的，只是有时候没时间看，或者没有静下心来看，不过倒是收集了不少书，以后有时间了静下心来慢慢看，收藏也是一种艺术。如果有不错的书籍，可以通过底部的联系方式推荐给我。</li></ul></blockquote><h3 id="历史类"><a href="#历史类" class="headerlink" title="历史类"></a>历史类</h3><p>《毛批三国演义》、《人类简史》、《平凡的世界》、《水浒传》、《孙子兵法》、《万历十五年》、《明朝那些事儿》、《白鹿原》</p><h3 id="文学类"><a href="#文学类" class="headerlink" title="文学类"></a>文学类</h3><p>《百年孤独》、《围城》、《于丹论语心得》、《了不起的盖茨比》、《苏菲的世界》、《小王子》、《瓦尔登湖》、《悲惨世界》、《世说新语》、《老人与海》</p><h3 id="科幻类"><a href="#科幻类" class="headerlink" title="科幻类"></a>科幻类</h3><p>《三体》、《时间简史》、</p><h3 id="心里类"><a href="#心里类" class="headerlink" title="心里类"></a>心里类</h3><p>《乌合之众》、《人性的弱点》</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql常用命令</title>
      <link href="/2019/10/14/mysql/"/>
      <url>/2019/10/14/mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1.创建用户"></a>1.创建用户</h3><pre class=" language-bash"><code class="language-bash">CREATE USER <span class="token string">'username'</span>@<span class="token string">'host'</span> IDENTIFIED BY <span class="token string">'password'</span><span class="token punctuation">;</span></code></pre><p>username:用户名；host：指定在哪个主机上可以登录，本机可用localhost，%通配所有远程主机；password：用户登录密码；</p><h3 id="2-授权"><a href="#2-授权" class="headerlink" title="2.授权"></a>2.授权</h3><pre class=" language-bash"><code class="language-bash">grant all privileges on *.* to root@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">"password"</span><span class="token punctuation">;</span>  FLUSH PRIVILEGES<span class="token punctuation">;</span></code></pre><p>格式：grant 权限 on 数据库名.表名 to 用户@登录主机 identified by “用户密码”；<em>.</em>代表所有权；@ 后面是访问MySQL的客户端IP地址（或是 主机名） % 代表任意的客户端，如果填写 localhost 为本地访问（那此用户就不能远程访问该mysql数据库了）。</p><h3 id="3-基础命令"><a href="#3-基础命令" class="headerlink" title="3.基础命令"></a>3.基础命令</h3><pre class=" language-bash"><code class="language-bash">创建数据库：create database testdatabases<span class="token punctuation">;</span>删除数据库 ：drop database testdatabases<span class="token punctuation">;</span>查看数据库：show databases<span class="token punctuation">;</span>打开数据库：use databases<span class="token punctuation">;</span>查看表：show tables<span class="token punctuation">;</span>查看当前所在库：select database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查看数据库版本：select version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查看数据库所有用户：select user,host from mysql.user<span class="token punctuation">;</span>删除用户：drop user test@localhost <span class="token punctuation">;</span>授予用户“test”通过外网IP对于该数据库“testdb”中表的创建、修改、删除权限,以及表数据的增删查改权限：grant create,alter,drop,select,insert,update,delete on testdb.* to test@<span class="token string">'%'</span><span class="token punctuation">;</span> </code></pre><h3 id="4-表插入数据"><a href="#4-表插入数据" class="headerlink" title="4.表插入数据"></a>4.表插入数据</h3><pre class=" language-bash"><code class="language-bash">插入一个name字段：insert into table <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>name<span class="token variable">`</span></span><span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'55'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>插入一个字段id： insert into table <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">)</span> values<span class="token punctuation">(</span>3<span class="token punctuation">)</span><span class="token punctuation">;</span>插入一行：insert into table values<span class="token punctuation">(</span>1,<span class="token string">'gz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>更新某行（修改）：update table <span class="token keyword">set</span> id<span class="token operator">=</span>5 where name<span class="token operator">=</span><span class="token string">'55'</span><span class="token punctuation">;</span>删除制定行：delete from table where name<span class="token operator">=</span><span class="token string">'55'</span><span class="token punctuation">;</span></code></pre><p>命令：insert into &lt;表名&gt; [( &lt;字段名1&gt;[,..&lt;字段名n &gt; ])] values ( 值1 )[, ( 值n )]<br>注意：insert into每次只能向表中插入一条记录。</p><h3 id="5-查询表中的数据"><a href="#5-查询表中的数据" class="headerlink" title="5.查询表中的数据"></a>5.查询表中的数据</h3><pre class=" language-bash"><code class="language-bash">查看表中所有数据：select * from table<span class="token punctuation">;</span>查看表中前2行数据：select * from table order by <span class="token function">id</span> limit 0,2<span class="token punctuation">;</span>删除表中编号为1的记录：delete from table where id<span class="token operator">=</span>1<span class="token punctuation">;</span></code></pre><h3 id="6-更改数据库用户密码"><a href="#6-更改数据库用户密码" class="headerlink" title="6.更改数据库用户密码"></a>6.更改数据库用户密码</h3><p>5.7版本下的mysql数据库下已经没有password这个字段了，password字段改成了authentication_string</p><pre class=" language-bash"><code class="language-bash">终端命令：mysqladmin -u root password “密码”数据库命令：update user <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span> where user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>5.7版本数据库：update user <span class="token keyword">set</span> authentication_string<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span> where user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span></code></pre><h3 id="7-备份数据库命令"><a href="#7-备份数据库命令" class="headerlink" title="7.备份数据库命令"></a>7.备份数据库命令</h3><pre class=" language-bash"><code class="language-bash">导入数据库sql文件：mysql -u用户名 -p 数据库名 <span class="token operator">&lt;</span> 导入文件名.sql导出数据库：mysqldump -u用户名 -p密码 数据库名 <span class="token operator">></span> 数据库名.sqlMySql的备份数据库命令：mysqldump -h 主机 -u数据户用户名 -p数据库密码 数据库 <span class="token operator">></span> bak.sqlMySql还原恢复数据库命令：mysql -h 主机 -u数据户用户名 -p数据库密码 数据库 <span class="token operator">&lt;</span> bak.sql按日期导出数据库到指定文件夹：30 5 * * * mysqldump -uroot -p password database<span class="token operator">></span>/data/backup`date <span class="token string">"+%Y%m%d"</span>`.sql</code></pre><h3 id="8-远程操作数据库"><a href="#8-远程操作数据库" class="headerlink" title="8.远程操作数据库"></a>8.远程操作数据库</h3><p>格式：mysqldump -h主机名 -P端口 -u用户名 -p密码 –database 数据库名 &gt; 文件名.sql</p><pre class=" language-bash"><code class="language-bash">例如：mysqldump -h 192.168.1.100 -p 3306 -uroot -ppassword --database cmdb <span class="token operator">></span> /data/backup/cmdb.sql</code></pre><p>导出的数据有可能比较大，不好备份到远程，这时候就需要进行压缩<br>格式：mysqldump -h主机名 -P端口 -u用户名 -p密码 –database 数据库名 | gzip &gt; 文件名.sql.gz</p><pre class=" language-bash"><code class="language-bash">例如：mysqldump -h192.168.1.100 -p 3306 -uroot -ppassword --database cmdb <span class="token operator">|</span> <span class="token function">gzip</span> <span class="token operator">></span> /data/backup/cmdb.sql.gz</code></pre><p>备份数据库结构，不备份数据<br>格式：mysqldump -h主机名 -P端口 -u用户名 -p密码 –no-data 数据库名1 数据库名2 数据库名3 &gt; 文件名.sql</p><pre class=" language-bash"><code class="language-bash">例如：mysqldump --no-data –databases db1 db2 cmdb <span class="token operator">></span> /data/backup/structure.sql</code></pre><p>备份实例上所有的数据库<br>格式：mysqldump -h主机名 -P端口 -u用户名 -p密码 –all-databases &gt; 文件名.sql</p><pre class=" language-bash"><code class="language-bash">例如：mysqldump -h192.168.1.100 -p3306 -uroot -ppassword --all-databases <span class="token operator">></span> /data/backup/all_db.sql</code></pre><p>备份同个库多个表<br>格式：mysqldump -h主机名 -P端口 -u用户名 -p密码 –database 数据库名 表1 表2 …. &gt; 文件名.sql</p><pre class=" language-bash"><code class="language-bash">例如：mysqldump -h192.168.1.100 -p3306 -uroot -ppassword cmdb t1 t2 <span class="token operator">></span> /data/backup/cmdb_t1_t2.sql</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drone ci for Gitea cicd工作流</title>
      <link href="/2019/10/14/cicd/"/>
      <url>/2019/10/14/cicd/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>Gitea官网 <a href="https://docs.gitea.io" target="_blank" rel="noopener">https://docs.gitea.io</a></li><li>Gitea 是一个开源社区驱动的轻量级代码托管解决方案,他是从Gogs发展而来</li><li>Drone官网 <a href="https://docs.drone.io" target="_blank" rel="noopener">https://docs.drone.io</a> </li><li>Drone是一种基于容器技术的持续交付系统。Drone使用简单的YAML配置文件（docker-compose的超集）来定义和执行Docker容器中的Pipelines。Drone与流行的源代码管理系统无缝集成，包括GitHub，GitLab, Enterprise，Bitbucket,gogs,gitea等。</li></ul></blockquote><h3 id="一、安装gitea"><a href="#一、安装gitea" class="headerlink" title="一、安装gitea"></a>一、安装gitea</h3><p>从gitea官网下载安装文件 <a href="https://docs.gitea.io" target="_blank" rel="noopener">https://docs.gitea.io</a> 可以下载最新版本，我这里是1.9.2版本</p><h5 id="1-从二进制安装"><a href="#1-从二进制安装" class="headerlink" title="1.从二进制安装"></a>1.从二进制安装</h5><pre class=" language-bash"><code class="language-bash">$ <span class="token function">wget</span> -O gitea https://dl.gitea.io/gitea/1.9.2/gitea-1.9.2-linux-amd64$ <span class="token function">chmod</span> +x gitea$ ./gitea web</code></pre><p>启动gitea后，在浏览器打开连接: <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 进行配置。配置文件存在custom/conf/app.ini。</p><h5 id="2-从docker安装"><a href="#2-从docker安装" class="headerlink" title="2.从docker安装"></a>2.从docker安装</h5><ul><li>docker 直接启动安装<br>首先你需要pull镜像：<pre class=" language-bash"><code class="language-bash">$ docker pull gitea/gitea:1.9.2</code></pre>如果要将git和其它数据持久化，你需要创建一个目录来作为数据存储的地方：<pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">mkdir</span> -p /var/lib/gitea</code></pre>然后就可以运行 docker 容器了，这很简单。 当然你需要定义端口数数据目录：<pre><code>$ docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /var/lib/gitea:/data gitea/gitea:1.9.2</code></pre>然后容器已经运行成功，在浏览器中访问 <a href="http://hostname:10080" target="_blank" rel="noopener">http://hostname:10080</a> 就可以看到界面了。<br>注意：目前端口改为非3000时，需要修改配置文件 LOCAL_ROOT_URL = <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a></li><li>docker-compose安装<br>编辑docker-composer文件<pre class=" language-yaml"><code class="language-yaml">$ vim gitea.yml<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.7"</span><span class="token key atrule">networks</span><span class="token punctuation">:</span><span class="token key atrule">gitea</span><span class="token punctuation">:</span>  <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">services</span><span class="token punctuation">:</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">image</span><span class="token punctuation">:</span> gitea/gitea<span class="token punctuation">:</span>1.9.2  <span class="token key atrule">environment</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> USER_UID=1000    <span class="token punctuation">-</span> USER_GID=1000  <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">networks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> gitea  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/data  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"3000:3000"</span>    <span class="token punctuation">-</span> <span class="token string">"222:22"</span></code></pre>启动、停止方式<pre class=" language-bash"><code class="language-bash">$ docker-compose -f gitea.yml up -d$ docker-compose -f gitea.yml down</code></pre>然后容器已经运行成功，在浏览器中访问 <a href="http://hostname:3000" target="_blank" rel="noopener">http://hostname:3000</a> 就可以看到界面了。</li></ul><h3 id="二、安装Drone"><a href="#二、安装Drone" class="headerlink" title="二、安装Drone"></a>二、安装Drone</h3><p>编辑docker-compose文件，’vim drone.yml’</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.7"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">drone-server</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> drone/drone<span class="token punctuation">:</span><span class="token number">1.4</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> drone_server    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"8000:80"</span>    <span class="token punctuation">-</span> <span class="token string">"8443:443"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> DRONE_OPEN=true      <span class="token punctuation">-</span> DRONE_GITEA=true      <span class="token punctuation">-</span> DRONE_DEBUG=true      <span class="token punctuation">-</span> DRONE_PROVIDER=gitea      <span class="token punctuation">-</span> DRONE_RUNNER_CAPACITY=2      <span class="token punctuation">-</span> DRONE_GIT_ALWAYS_AUTH=true      <span class="token punctuation">-</span> DRONE_SERVER_HOST=drone.company.com <span class="token comment" spellcheck="true">#drone的访问地址</span>      <span class="token punctuation">-</span> DRONE_AGENTS_ENABLED=true      <span class="token punctuation">-</span> DRONE_GITEA_SERVER=https<span class="token punctuation">:</span>//try.gitea.io  <span class="token comment" spellcheck="true">#gitea的访问地址</span>      <span class="token punctuation">-</span> DRONE_GITEA_CLIENT_ID=6522e99d<span class="token punctuation">-</span>1adb<span class="token punctuation">-</span>4ac1<span class="token punctuation">-</span>bf79<span class="token punctuation">-</span>e1b9bf3b9974  <span class="token comment" spellcheck="true">#gitea的客户端ID</span>      <span class="token punctuation">-</span> DRONE_GITEA_CLIENT_SECRET=WF1o3cgAWQ2Nz7JgAma<span class="token punctuation">-</span>1M<span class="token punctuation">-</span>qC5EuNyXubtw7AaTZk90=  <span class="token comment" spellcheck="true">#gitea的客户端密钥</span>      <span class="token punctuation">-</span> DRONE_GITEA_SKIP_VERIFY=false      <span class="token punctuation">-</span> DRONE_SERVER_PROTO=http      <span class="token punctuation">-</span> DRONE_TLS_AUTOCERT=false      <span class="token punctuation">-</span> DRONE_GIT_USERNAME=test  <span class="token comment" spellcheck="true">#一般为gitea账号</span>      <span class="token punctuation">-</span> DRONE_GIT_PASSWORD=123456       <span class="token punctuation">-</span> DRONE_RPC_SECRET=37a18ef42683494a67de20c87ac2d773      <span class="token punctuation">-</span> DRONE_LOGS_DEBUG=true      <span class="token punctuation">-</span> DRONE_DATABASE_DRIVER=mysql <span class="token comment" spellcheck="true">#mysql数据库连接方式(两者选其一)</span>      <span class="token punctuation">-</span> DRONE_DATABASE_DATASOURCE=gitea<span class="token punctuation">:</span>password@tcp(localhost<span class="token punctuation">:</span>3306)/drone       <span class="token comment" spellcheck="true">#- DRONE_DATABASE_DRIVER=mysql #sqlite数据库</span>      <span class="token comment" spellcheck="true">#- DRONE_DATABASE_DATASOURCE=/data/database.sqlite </span>      <span class="token punctuation">-</span> DRONE_USER_CREATE=username<span class="token punctuation">:</span>tfzxyinhao<span class="token punctuation">,</span>xiaolu<span class="token punctuation">,</span>dmin<span class="token punctuation">:</span><span class="token boolean important">true </span><span class="token comment" spellcheck="true">#设置drone管理员账号</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock    <span class="token punctuation">-</span> /var/lib/drone_1.4<span class="token punctuation">:</span>/data  <span class="token key atrule">drone-agent</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> drone/agent<span class="token punctuation">:</span><span class="token number">1.4</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> drone_agent    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"3000:3000"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> drone<span class="token punctuation">-</span>server    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> DRONE_RPC_PROTO=http      <span class="token punctuation">-</span> DRONE_RPC_HOST=drone.company.com      <span class="token punctuation">-</span> DRONE_RPC_SECRET=37a18ef42683494a67de20c87ac2d773      <span class="token punctuation">-</span> DRONE_RUNNER_CAPACITY=2      <span class="token punctuation">-</span> DRONE_LOGS_DEBUG=true      <span class="token punctuation">-</span> DRONE_DEBUG=true      <span class="token punctuation">-</span> DRONE_LOGS_PRETTY=true      <span class="token punctuation">-</span> DRONE_LOGS_NOCOLOR=false    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock</code></pre><p>启动、停止drone</p><pre class=" language-bash"><code class="language-bash">$ docker-compose -f drone.yml up -d$ docker-compose -f drone.yml down</code></pre><p><img src="/2019/10/14/cicd/ceshi.png" alt=""><br>然后容器已经运行成功，在浏览器中访问 <a href="http://hostname:8000" target="_blank" rel="noopener">http://hostname:8000</a> 就可以看到界面了。<br>通过gitea认证登录进去，会自动同步仓库</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CI/CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持续集成 </tag>
            
            <tag> CI/CD </tag>
            
            <tag> Gitea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git升级到指定版本</title>
      <link href="/2019/10/14/git/"/>
      <url>/2019/10/14/git/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>系统Centos 7.2</li><li>Git版本升级（查看版本信息 git version）</li><li>旧版本：git version 1.8.3</li><li>新版本：git version 2.2.1</li></ul></blockquote><h3 id="一、安装依赖包："><a href="#一、安装依赖包：" class="headerlink" title="一、安装依赖包："></a>一、安装依赖包：</h3><p>1、下载安装 libiconv-1.14.tar.gz</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">wget</span>  http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz$ <span class="token function">tar</span> zxvf libiconv-1.14.tar.gz$ <span class="token function">cd</span> libiconv-1.14$ ./configure --prefix<span class="token operator">=</span>/usr/local/libiconv$ <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><p>2、yum安装依赖包</p><pre class=" language-bash"><code class="language-bash">$ yum <span class="token function">install</span> -y zlib-devel curl-devel openssl-devel perl cpio expat-devel gettext-devel openssl zlib autoconf tk asciidoc gcc perl-ExtUtils-MakeMaker tcl xmlto</code></pre><p>注：asciidoc如果无法通过yum安装，请下载包，编译安装</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">wget</span> --no-check-certificate https://jaist.dl.sourceforge.net/project/asciidoc/asciidoc/8.6.9/asciidoc-8.6.9.zip$ unzip asciidoc-8.6.9.zip$ <span class="token function">cd</span> asciidoc-8.6.9$ ./configure$ nake <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><h3 id="二、安装新版git包"><a href="#二、安装新版git包" class="headerlink" title="二、安装新版git包"></a>二、安装新版git包</h3><p>从 <a href="https://github.com/git/git/releases" target="_blank" rel="noopener">https://github.com/git/git/releases</a> 下载最新稳定版的zip包或者tar.gz并解压。<br>以 tar.gz 格式为例（在网页的 tar.gz 上右键复制下载链接即可）</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">wget</span> https://github.com/git/git/archive/v2.2.1.tar.gz$ <span class="token function">tar</span> zxvf v2.2.1.tar.gz$ <span class="token function">cd</span> git-2.2.1$ <span class="token function">make</span> configure$ ./configure --prefix<span class="token operator">=</span>/usr/local/git --with-iconv<span class="token operator">=</span>/usr/local/libiconv$ <span class="token function">make</span> all doc$ <span class="token function">make</span> <span class="token function">install</span> install-doc install-html$ <span class="token keyword">echo</span> <span class="token string">"export PATH=<span class="token variable">$PATH</span>:/usr/local/git/bin:/usr/local/git/libexec/git-core"</span> <span class="token operator">>></span> /etc/bashrc</code></pre><h3 id="三、查看新版本"><a href="#三、查看新版本" class="headerlink" title="三、查看新版本"></a>三、查看新版本</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> version<span class="token function">git</span> version 2.2.1</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公共DNS收集</title>
      <link href="/2019/10/13/1/"/>
      <url>/2019/10/13/1/</url>
      
        <content type="html"><![CDATA[<h4 id="Public-DNS-★★★★★（推荐）"><a href="#Public-DNS-★★★★★（推荐）" class="headerlink" title="Public DNS+ ★★★★★（推荐）"></a>Public DNS+ ★★★★★（推荐）</h4><ul><li>首选：119.29.29.29</li><li>备选：182.254.116.116</li></ul><h4 id="114DNS-★★★★★"><a href="#114DNS-★★★★★" class="headerlink" title="114DNS ★★★★★"></a>114DNS ★★★★★</h4><p>纯净 无劫持 无需再忍受被强扭去看广告或粗俗网站之痛苦</p><ul><li>首选：114.114.114.114</li><li>备选：114.114.115.115<br>拦截 钓鱼病毒木马网站 增强网银、证券、购物、游戏、隐私信息安全</li><li>首选：114.114.114.119</li><li>备选：114.114.115.119<br>学校或家长可选拦截 色情网站 保护少年儿童免受网络色情内容的毒害</li><li>首选：114.114.114.110 </li><li>备选：114.114.115.110</li></ul><h4 id="阿里-AliDNS-★★★★"><a href="#阿里-AliDNS-★★★★" class="headerlink" title="阿里 AliDNS ★★★★"></a>阿里 AliDNS ★★★★</h4><ul><li>首选：223.5.5.5</li><li>备选：223.6.6.6</li></ul><h4 id="DNS派-★★★★"><a href="#DNS派-★★★★" class="headerlink" title="DNS派 ★★★★"></a>DNS派 ★★★★</h4><ul><li>首选（电信/移动/铁通）：101.226.4.6</li><li>备选（电信/移动/铁通）：218.30.118.6</li><li>首选（联通）：123.125.81.6</li><li>备选（联通）：140.207.198.6</li></ul><h4 id="百度-BaiduDNS-★★★"><a href="#百度-BaiduDNS-★★★" class="headerlink" title="百度 BaiduDNS ★★★"></a>百度 BaiduDNS ★★★</h4><ul><li>首选：180.76.76.76</li></ul><h4 id="CNNIC-SDNS-★★★"><a href="#CNNIC-SDNS-★★★" class="headerlink" title="CNNIC SDNS ★★★"></a>CNNIC SDNS ★★★</h4><ul><li>首选：1.2.4.8</li><li>备选：202.98.0.68</li></ul><h4 id="OpenDNS：★（不推荐）"><a href="#OpenDNS：★（不推荐）" class="headerlink" title="OpenDNS：★（不推荐）"></a>OpenDNS：★（不推荐）</h4><ul><li>首选：208.67.222.222</li><li>备选：208.67.220.220</li></ul><h4 id="Google-DNS：★（强烈不推荐）"><a href="#Google-DNS：★（强烈不推荐）" class="headerlink" title="Google DNS：★（强烈不推荐）"></a>Google DNS：★（强烈不推荐）</h4><ul><li>首选：8.8.8.8</li><li>备选：8.8.4.4</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos supervisor安装</title>
      <link href="/2019/10/13/2/"/>
      <url>/2019/10/13/2/</url>
      
        <content type="html"><![CDATA[<h4 id="解释一些让人容易疑惑名词："><a href="#解释一些让人容易疑惑名词：" class="headerlink" title="解释一些让人容易疑惑名词："></a>解释一些让人容易疑惑名词：</h4><blockquote><ul><li>supervisor：要安装的软件的名称。</li><li>supervisord：装好supervisor软件后，supervisord用于启动supervisor服务。</li><li>supervisorctl：用于管理supervisor配置文件中program。</li></ul></blockquote><h4 id="方法一、使用yum命令安装（推荐）"><a href="#方法一、使用yum命令安装（推荐）" class="headerlink" title="方法一、使用yum命令安装（推荐）"></a>方法一、使用yum命令安装（推荐）</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">su</span> - <span class="token comment" spellcheck="true">#切换为root用户</span><span class="token comment" spellcheck="true"># yum install epel-release</span><span class="token comment" spellcheck="true"># yum install -y supervisor</span><span class="token comment" spellcheck="true"># systemctl enable supervisord # 开机自启动</span><span class="token comment" spellcheck="true"># systemctl start supervisord # 启动supervisord服务</span><span class="token comment" spellcheck="true"># systemctl status supervisord # 查看supervisord服务状态</span><span class="token comment" spellcheck="true"># ps -ef|grep supervisord # 查看是否存在supervisord进程</span></code></pre><h4 id="方法二、使用pip手工安装配置-不推荐"><a href="#方法二、使用pip手工安装配置-不推荐" class="headerlink" title="方法二、使用pip手工安装配置(不推荐)"></a>方法二、使用pip手工安装配置(不推荐)</h4><h5 id="准备工作，确认9001端口未被占用，如果9001端口被占用，请将后面提到的supervisord-conf文件中的9001替换为可用端口号，如7001。"><a href="#准备工作，确认9001端口未被占用，如果9001端口被占用，请将后面提到的supervisord-conf文件中的9001替换为可用端口号，如7001。" class="headerlink" title="准备工作，确认9001端口未被占用，如果9001端口被占用，请将后面提到的supervisord.conf文件中的9001替换为可用端口号，如7001。"></a>准备工作，确认9001端口未被占用，如果9001端口被占用，请将后面提到的supervisord.conf文件中的9001替换为可用端口号，如7001。</h5><h6 id="一、安装supervisor"><a href="#一、安装supervisor" class="headerlink" title="一、安装supervisor"></a>一、安装supervisor</h6><p>切换为root用户</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">su</span> -</code></pre><p>为python2.7安装pip（supervisor只支持python2.7）</p><h6 id="1-下载pip"><a href="#1-下载pip" class="headerlink" title="(1) 下载pip"></a>(1) 下载pip</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># wget https://bootstrap.pypa.io/get-pip.py --no-check-certificate</span></code></pre><h6 id="2-安装pip"><a href="#2-安装pip" class="headerlink" title="(2) 安装pip"></a>(2) 安装pip</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># python2.7 get-pip.py</span></code></pre><p>如果遇到psutil相关的报错，参考: <a href="https://www.cnblogs.com/chentq/p/4954135.html" target="_blank" rel="noopener">https://www.cnblogs.com/chentq/p/4954135.html</a><br>安装supervisor</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># pip2 install supervisor</span><span class="token comment" spellcheck="true"># #可能遇到的问题及解决办法：</span><span class="token comment" spellcheck="true"># #如果遇到NameError: name 'sys_platform' is not defined</span><span class="token comment" spellcheck="true"># #运行如下命令即可（但是也会报错，不用理会）</span><span class="token comment" spellcheck="true"># #pip2 install --upgrade distribute,</span><span class="token comment" spellcheck="true"># #然后再卸载supervisor，</span><span class="token comment" spellcheck="true"># #pip2 uninstall supervisor，</span><span class="token comment" spellcheck="true"># #重装supervisor,</span><span class="token comment" spellcheck="true"># #pip2 install supervisor。</span><span class="token comment" spellcheck="true"># #参考http://www.yuchaoshui.com/post/CentOS6-Python-installation</span></code></pre><p>创建supervisor所需目录,创建supervisor配置文件,编辑supervisord.conf文件</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mkdir /etc/supervisord.d/</span><span class="token comment" spellcheck="true"># echo_supervisord_conf > /etc/supervisord.conf</span><span class="token comment" spellcheck="true"># vim /etc/supervisord.conf</span></code></pre><p>编辑文件内容如下(直接展示完整的文件内容，建议直接复制粘贴，如果想知道详细改动，可逐行对比)</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">;</span> Sample supervisor config file.<span class="token punctuation">;</span><span class="token punctuation">;</span> For <span class="token function">more</span> information on the config file, please see:<span class="token punctuation">;</span> http://supervisord.org/configuration.html<span class="token punctuation">;</span><span class="token punctuation">;</span> Notes:<span class="token punctuation">;</span>  - Shell expansion <span class="token punctuation">(</span><span class="token string">"~"</span> or <span class="token string">"<span class="token variable">$HOME</span>"</span><span class="token punctuation">)</span> is not supported.  Environment<span class="token punctuation">;</span>    variables can be expanded using this syntax: <span class="token string">"%(ENV_HOME)s"</span><span class="token keyword">.</span><span class="token punctuation">;</span>  - Quotes around values are not supported, except <span class="token keyword">in</span> the <span class="token keyword">case</span> of<span class="token punctuation">;</span>    the environment<span class="token operator">=</span> options as shown below.<span class="token punctuation">;</span>  - Comments must have a leading space: <span class="token string">"a=b ;comment"</span> not <span class="token string">"a=b;comment"</span><span class="token keyword">.</span><span class="token punctuation">;</span>  - Command will be truncated <span class="token keyword">if</span> it looks like a config <span class="token function">file</span> comment, e.g.<span class="token punctuation">;</span>    <span class="token string">"command=bash -c 'foo ; bar'"</span> will truncate to <span class="token string">"command=bash -c 'foo "</span><span class="token keyword">.</span><span class="token punctuation">[</span>unix_http_server<span class="token punctuation">]</span>file<span class="token operator">=</span>/var/run/supervisor.sock   <span class="token punctuation">;</span> the path to the socket <span class="token function">file</span><span class="token punctuation">;</span>chmod<span class="token operator">=</span>0700                 <span class="token punctuation">;</span> socket <span class="token function">file</span> mode <span class="token punctuation">(</span>default 0700<span class="token punctuation">)</span><span class="token punctuation">;</span>chown<span class="token operator">=</span>nobody:nogroup       <span class="token punctuation">;</span> socket <span class="token function">file</span> uid:gid owner<span class="token punctuation">;</span>username<span class="token operator">=</span>user              <span class="token punctuation">;</span> default is no username <span class="token punctuation">(</span>open server<span class="token punctuation">)</span><span class="token punctuation">;</span>password<span class="token operator">=</span>123               <span class="token punctuation">;</span> default is no password <span class="token punctuation">(</span>open server<span class="token punctuation">)</span><span class="token punctuation">[</span>inet_http_server<span class="token punctuation">]</span>         <span class="token punctuation">;</span> inet <span class="token punctuation">(</span>TCP<span class="token punctuation">)</span> server disabled by defaultport<span class="token operator">=</span>127.0.0.1:9001        <span class="token punctuation">;</span> ip_address:port specifier, *:port <span class="token keyword">for</span> all iface<span class="token punctuation">;</span>username<span class="token operator">=</span>user              <span class="token punctuation">;</span> default is no username <span class="token punctuation">(</span>open server<span class="token punctuation">)</span><span class="token punctuation">;</span>password<span class="token operator">=</span>123               <span class="token punctuation">;</span> default is no password <span class="token punctuation">(</span>open server<span class="token punctuation">)</span><span class="token punctuation">[</span>supervisord<span class="token punctuation">]</span>logfile<span class="token operator">=</span>/var/log/supervisord.log <span class="token punctuation">;</span> main log <span class="token function">file</span><span class="token punctuation">;</span> default <span class="token variable">$CWD</span>/supervisord.loglogfile_maxbytes<span class="token operator">=</span>50MB        <span class="token punctuation">;</span> max main logfile bytes b4 rotation<span class="token punctuation">;</span> default 50MBlogfile_backups<span class="token operator">=</span>10           <span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># of main logfile backups; 0 means none, default 10</span>loglevel<span class="token operator">=</span>info                <span class="token punctuation">;</span> log level<span class="token punctuation">;</span> default info<span class="token punctuation">;</span> others: debug,warn,tracepidfile<span class="token operator">=</span>/var/run/supervisord.pid <span class="token punctuation">;</span> supervisord pidfile<span class="token punctuation">;</span> default supervisord.pidnodaemon<span class="token operator">=</span>false               <span class="token punctuation">;</span> start <span class="token keyword">in</span> foreground <span class="token keyword">if</span> <span class="token boolean">true</span><span class="token punctuation">;</span> default <span class="token boolean">false</span>minfds<span class="token operator">=</span>1024                  <span class="token punctuation">;</span> min. avail startup <span class="token function">file</span> descriptors<span class="token punctuation">;</span> default 1024minprocs<span class="token operator">=</span>200                 <span class="token punctuation">;</span> min. avail process descriptors<span class="token punctuation">;</span>default 200<span class="token punctuation">;</span>umask<span class="token operator">=</span>022                   <span class="token punctuation">;</span> process <span class="token function">file</span> creation <span class="token function">umask</span><span class="token punctuation">;</span> default 022<span class="token punctuation">;</span>user<span class="token operator">=</span>chrism                 <span class="token punctuation">;</span> default is current user, required <span class="token keyword">if</span> root<span class="token punctuation">;</span>identifier<span class="token operator">=</span>supervisor       <span class="token punctuation">;</span> supervisord identifier, default is <span class="token string">'supervisor'</span><span class="token punctuation">;</span>directory<span class="token operator">=</span>/tmp              <span class="token punctuation">;</span> default is not to <span class="token function">cd</span> during start<span class="token punctuation">;</span>nocleanup<span class="token operator">=</span>true              <span class="token punctuation">;</span> don<span class="token string">'t clean up tempfiles at start; default false;childlogdir=/tmp            ; '</span>AUTO<span class="token string">' child log dir, default <span class="token variable">$TEMP</span>;environment=KEY="value"     ; key value pairs to add to environment;strip_ansi=false            ; strip ansi escape codes in logs; def. false; The rpcinterface:supervisor section must remain in the config file for; RPC (supervisorctl/web interface) to work.  Additional interfaces may be; added by defining them in separate [rpcinterface:x] sections.[rpcinterface:supervisor]supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface; The supervisorctl section configures how supervisorctl will connect to; supervisord.  configure it match the settings in either the unix_http_server; or inet_http_server section.[supervisorctl]serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket;username=chris              ; should be same as in [*_http_server] if set;password=123                ; should be same as in [*_http_server] if set;prompt=mysupervisor         ; cmd line prompt (default "supervisor");history_file=~/.sc_history  ; use readline history if available; The sample program section below shows all possible program subsection values.; Create one or more '</span>real<span class="token string">' program: sections to be able to control them under; supervisor.;[program:theprogramname];command=/bin/cat              ; the program (relative uses PATH, can take args);process_name=%(program_name)s ; process_name expr (default %(program_name)s);numprocs=1                    ; number of processes copies to start (def 1);directory=/tmp                ; directory to cwd to before exec (def no cwd);umask=022                     ; umask for process (default None);priority=999                  ; the relative start priority (default 999);autostart=true                ; start at supervisord start (default: true);startsecs=1                   ; # of secs prog must stay up to be running (def. 1);startretries=3                ; max # of serial start failures when starting (default 3);autorestart=unexpected        ; when to restart if exited after running (def: unexpected);exitcodes=0,2                 ; '</span>expected<span class="token string">' exit codes used with autorestart (default 0,2);stopsignal=QUIT               ; signal used to kill process (default TERM);stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10);stopasgroup=false             ; send stop signal to the UNIX process group (default false);killasgroup=false             ; SIGKILL the UNIX process group (def false);user=chrism                   ; setuid to this UNIX account to run the program;redirect_stderr=true          ; redirect proc stderr to stdout (default false);stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB);stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10);stdout_capture_maxbytes=1MB   ; number of bytes in '</span>capturemode<span class="token string">' (default 0);stdout_events_enabled=false   ; emit events on stdout writes (default false);stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB);stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10);stderr_capture_maxbytes=1MB   ; number of bytes in '</span>capturemode<span class="token string">' (default 0);stderr_events_enabled=false   ; emit events on stderr writes (default false);environment=A="1",B="2"       ; process environment additions (def no adds);serverurl=AUTO                ; override serverurl computation (childutils); The sample eventlistener section below shows all possible eventlistener; subsection values.  Create one or more '</span>real<span class="token string">' eventlistener: sections to be; able to handle event notifications sent by supervisord.;[eventlistener:theeventlistenername];command=/bin/eventlistener    ; the program (relative uses PATH, can take args);process_name=%(program_name)s ; process_name expr (default %(program_name)s);numprocs=1                    ; number of processes copies to start (def 1);events=EVENT                  ; event notif. types to subscribe to (req'</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>buffer_size<span class="token operator">=</span>10                <span class="token punctuation">;</span> event buffer queue size <span class="token punctuation">(</span>default 10<span class="token punctuation">)</span><span class="token punctuation">;</span>directory<span class="token operator">=</span>/tmp                <span class="token punctuation">;</span> directory to cwd to before <span class="token function">exec</span> <span class="token punctuation">(</span>def no cwd<span class="token punctuation">)</span><span class="token punctuation">;</span>umask<span class="token operator">=</span>022                     <span class="token punctuation">;</span> <span class="token function">umask</span> <span class="token keyword">for</span> process <span class="token punctuation">(</span>default None<span class="token punctuation">)</span><span class="token punctuation">;</span>priority<span class="token operator">=</span>-1                   <span class="token punctuation">;</span> the relative start priority <span class="token punctuation">(</span>default -1<span class="token punctuation">)</span><span class="token punctuation">;</span>autostart<span class="token operator">=</span>true                <span class="token punctuation">;</span> start at supervisord start <span class="token punctuation">(</span>default: true<span class="token punctuation">)</span><span class="token punctuation">;</span>startsecs<span class="token operator">=</span>1                   <span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># of secs prog must stay up to be running (def. 1)</span><span class="token punctuation">;</span>startretries<span class="token operator">=</span>3                <span class="token punctuation">;</span> max <span class="token comment" spellcheck="true"># of serial start failures when starting (default 3)</span><span class="token punctuation">;</span>autorestart<span class="token operator">=</span>unexpected        <span class="token punctuation">;</span> autorestart <span class="token keyword">if</span> exited after running <span class="token punctuation">(</span>def: unexpected<span class="token punctuation">)</span><span class="token punctuation">;</span>exitcodes<span class="token operator">=</span>0,2                 <span class="token punctuation">;</span> <span class="token string">'expected'</span> <span class="token keyword">exit</span> codes used with autorestart <span class="token punctuation">(</span>default 0,2<span class="token punctuation">)</span><span class="token punctuation">;</span>stopsignal<span class="token operator">=</span>QUIT               <span class="token punctuation">;</span> signal used to <span class="token function">kill</span> process <span class="token punctuation">(</span>default TERM<span class="token punctuation">)</span><span class="token punctuation">;</span>stopwaitsecs<span class="token operator">=</span>10               <span class="token punctuation">;</span> max num secs to <span class="token function">wait</span> b4 SIGKILL <span class="token punctuation">(</span>default 10<span class="token punctuation">)</span><span class="token punctuation">;</span>stopasgroup<span class="token operator">=</span>false             <span class="token punctuation">;</span> send stop signal to the UNIX process group <span class="token punctuation">(</span>default false<span class="token punctuation">)</span><span class="token punctuation">;</span>killasgroup<span class="token operator">=</span>false             <span class="token punctuation">;</span> SIGKILL the UNIX process group <span class="token punctuation">(</span>def false<span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token operator">=</span>chrism                   <span class="token punctuation">;</span> setuid to this UNIX account to run the program<span class="token punctuation">;</span>redirect_stderr<span class="token operator">=</span>false         <span class="token punctuation">;</span> redirect_stderr<span class="token operator">=</span>true is not allowed <span class="token keyword">for</span> eventlisteners<span class="token punctuation">;</span>stdout_logfile<span class="token operator">=</span>/a/path        <span class="token punctuation">;</span> stdout log path, NONE <span class="token keyword">for</span> none<span class="token punctuation">;</span> default AUTO<span class="token punctuation">;</span>stdout_logfile_maxbytes<span class="token operator">=</span>1MB   <span class="token punctuation">;</span> max <span class="token comment" spellcheck="true"># logfile bytes b4 rotation (default 50MB)</span><span class="token punctuation">;</span>stdout_logfile_backups<span class="token operator">=</span>10     <span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># of stdout logfile backups (0 means none, default 10)</span><span class="token punctuation">;</span>stdout_events_enabled<span class="token operator">=</span>false   <span class="token punctuation">;</span> emit events on stdout writes <span class="token punctuation">(</span>default false<span class="token punctuation">)</span><span class="token punctuation">;</span>stderr_logfile<span class="token operator">=</span>/a/path        <span class="token punctuation">;</span> stderr log path, NONE <span class="token keyword">for</span> none<span class="token punctuation">;</span> default AUTO<span class="token punctuation">;</span>stderr_logfile_maxbytes<span class="token operator">=</span>1MB   <span class="token punctuation">;</span> max <span class="token comment" spellcheck="true"># logfile bytes b4 rotation (default 50MB)</span><span class="token punctuation">;</span>stderr_logfile_backups<span class="token operator">=</span>10     <span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># of stderr logfile backups (0 means none, default 10)</span><span class="token punctuation">;</span>stderr_events_enabled<span class="token operator">=</span>false   <span class="token punctuation">;</span> emit events on stderr writes <span class="token punctuation">(</span>default false<span class="token punctuation">)</span><span class="token punctuation">;</span>environment<span class="token operator">=</span>A<span class="token operator">=</span><span class="token string">"1"</span>,B<span class="token operator">=</span><span class="token string">"2"</span>       <span class="token punctuation">;</span> process environment additions<span class="token punctuation">;</span>serverurl<span class="token operator">=</span>AUTO                <span class="token punctuation">;</span> override serverurl computation <span class="token punctuation">(</span>childutils<span class="token punctuation">)</span><span class="token punctuation">;</span> The sample group section below shows all possible group values.  Create one<span class="token punctuation">;</span> or <span class="token function">more</span> <span class="token string">'real'</span> group: sections to create <span class="token string">"heterogeneous"</span> process groups.<span class="token punctuation">;</span><span class="token punctuation">[</span>group:thegroupname<span class="token punctuation">]</span><span class="token punctuation">;</span>programs<span class="token operator">=</span>progname1,progname2  <span class="token punctuation">;</span> each refers to <span class="token string">'x'</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>program:x<span class="token punctuation">]</span> definitions<span class="token punctuation">;</span>priority<span class="token operator">=</span>999                  <span class="token punctuation">;</span> the relative start priority <span class="token punctuation">(</span>default 999<span class="token punctuation">)</span><span class="token punctuation">;</span> The <span class="token punctuation">[</span>include<span class="token punctuation">]</span> section can just contain the <span class="token string">"files"</span> setting.  This<span class="token punctuation">;</span> setting can list multiple files <span class="token punctuation">(</span>separated by whitespace or<span class="token punctuation">;</span> newlines<span class="token punctuation">)</span>.  It can also contain wildcards.  The filenames are<span class="token punctuation">;</span> interpreted as relative to this file.  Included files *cannot*<span class="token punctuation">;</span> include files themselves.<span class="token punctuation">[</span>include<span class="token punctuation">]</span>files <span class="token operator">=</span> /etc/supervisord.d/*.ini</code></pre><p>启动supervisor</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># supervisord -c /etc/supervisord.conf</span></code></pre><p>查看supervisor是否启动成功</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ps -ef|grep supervisord</span>root       932     1  0 May10 ?        00:00:09 /bin/python2.7 /bin/supervisord -c /etc/supervisord.confroot      7902  6814  0 10:29 pts/0    00:00:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto supervisord</code></pre><p>至此，安装supervisor就结束了</p><h5 id="二、将supervisor配置为开机自启动服务"><a href="#二、将supervisor配置为开机自启动服务" class="headerlink" title="二、将supervisor配置为开机自启动服务"></a>二、将supervisor配置为开机自启动服务</h5><p>编辑服务文件内容如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># vim /usr/lib/systemd/system/supervisord.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>Supervisor daemon<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Type<span class="token operator">=</span>forkingPIDFile<span class="token operator">=</span>/var/run/supervisord.pidExecStart<span class="token operator">=</span>/bin/supervisord -c /etc/supervisord.confExecStop<span class="token operator">=</span>/bin/supervisorctl <span class="token function">shutdown</span>ExecReload<span class="token operator">=</span>/bin/supervisorctl reloadKillMode<span class="token operator">=</span>processRestart<span class="token operator">=</span>on-failureRestartSec<span class="token operator">=</span>42s<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target</code></pre><p>启动服务</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># systemctl enable supervisord</span></code></pre><p>成功之后，就可以使用如下命令管理supervisor服务了</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># systemctl stop supervisord</span><span class="token comment" spellcheck="true"># systemctl start supervisord</span><span class="token comment" spellcheck="true"># systemctl status supervisord</span><span class="token comment" spellcheck="true"># systemctl reload supervisord</span><span class="token comment" spellcheck="true"># systemctl restart supervisord</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> liunx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> supervisor </tag>
            
            <tag> 守护进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matery 主题详细配置教程</title>
      <link href="/2019/10/13/3/"/>
      <url>/2019/10/13/3/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-matery"><a href="#hexo-theme-matery" class="headerlink" title="hexo-theme-matery"></a>hexo-theme-matery</h1><p>转自 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">Matery 主题官方文档</a> | <a href="README.md">🇺🇸English Document</a> | <a href="https://blinkfox.github.io/" target="_blank" rel="noopener">演示示例</a> | QQ 交流群: <a href="https://jq.qq.com/?_wv=1027&amp;k=5zMDYHT" target="_blank" rel="noopener"><code>926552981</code></a></p><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>、<a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng" target="_blank" rel="noopener">@HarborZeng</a></li><li><a href="https://github.com/shw2018" target="_blank" rel="noopener">@shw2018</a></li><li><a href="https://github.com/L1cardo" target="_blank" rel="noopener">@L1cardo</a></li><li><a href="https://github.com/Five-great" target="_blank" rel="noopener">@Five-great</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中查找   </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book</code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式  </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Musics        <span class="token key atrule">url</span><span class="token punctuation">:</span> /musics        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image</code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h3 id="中文链接转拼音（可选的）"><a href="#中文链接转拼音（可选的）" class="headerlink" title="中文链接转拼音（可选的）"></a>中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span> <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'list'</span> <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span> <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7 </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 列表默认折叠</span>  <span class="token key atrule">listMaxHeight</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 列表最大高度</span></code></pre><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本记录"><a href="#版本记录" class="headerlink" title="版本记录"></a>版本记录</h2><ul><li>v1.1.0<ul><li>新增了 <code>emoji</code> 的支持；</li><li>新增了站点运行时间统计及配置；</li><li>新增了留言板的功能,默认未开启；</li><li>新增了 <code>Twitter</code>、<code>Facebook</code>、知乎的社交链接；</li><li>更新了 <code>Valine</code> 的版本为最新版；</li><li>其他小细节的修改；</li></ul></li><li>v1.0.4<ul><li>新增了能为每篇文章都自定义转载规则的功能；</li><li>修复上一页、下一页的自定义 <code>summary</code> 不显示的问题；</li><li>修复了友情链接显示错位的问题，改为了瀑布流的布局方式；</li><li>其他小细节 bug 的修改；</li></ul></li><li>v1.0.3<ul><li>新增了<code>TOC</code>展开、收缩的按钮和相关配置，默认显示此按钮；</li></ul></li><li>v1.0.2<ul><li>升级了 <a href="https://materializecss.com/" target="_blank" rel="noopener">Materialize</a> 框架版本为<code>1.0.0</code>，重构和修改了升级过程中的部分文件或问题；</li><li>新增了首页封面的全屏轮播特效，可以将更重要的文章设置到首页轮播中；</li><li>修复首页第一个按钮是中文的问题</li><li>修复了 iPhone 上点击搜索输入获取焦点的问题；</li><li>修复了 iPhone 上输入框获取焦点后页面放大的问题；</li><li>修复一些文章或 UI 显示问题；</li></ul></li><li>v1.0.1<ul><li>调整 <code>css</code>、<code>js</code> 的文件请求路径在主题的<code>_config.yml</code>中配置，便于你更快捷的配置自己的 CDN；</li><li>新增代码是否折行为可配置，默认为折行；</li><li>默认激活 <code>TOC</code> 功能，并新增为某篇文章关闭 <code>TOC</code> 的 <code>Front-matter</code> 配置选项；</li><li>修复文章滚动时，高亮的目录选项不准确的问题；</li><li><code>IOS</code>下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；</li></ul></li><li>v1.0.0<ul><li>新增了所有基础功能；</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 搭建个人博客详细教程</title>
      <link href="/2019/10/13/4/"/>
      <url>/2019/10/13/4/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Hexo介绍"><a href="#1-Hexo介绍" class="headerlink" title="1.Hexo介绍"></a>1.Hexo介绍</h3><p>本文会详细的介绍如何使用 Hexo 搭建个人博客。Hexo 是基于 Node.js 的快速、简洁且高效的博客框架，拥有超快速度、一键部署、支持 Markdown、丰富的插件等优秀的特性。以上是官方对于Hexo的描述，出了以上的描述，利用Hexo搭建个人博客还有以下特点：</p><blockquote><ul><li>全是静态文件，访问速度快；</li><li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li><li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li><li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li></ul></blockquote><h5 id="1-1准备工作"><a href="#1-1准备工作" class="headerlink" title="1.1准备工作"></a>1.1准备工作</h5><ul><li>一个<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>账户（<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a> 或者<a href="https://gitee.com/" target="_blank" rel="noopener">码云</a>也可以，但由于 GitHub 是最主流的平台，所以本文以 GitHub 为例，如对其他平台有疑问，欢迎提问)</li><li>安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>，Node.js 是多平台的，去官网选择相应的系统版本下载安装即可</li><li>安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>，<code>Git</code>也是多平台的，去官网选择相应的系统版本下载安装即可。上文提到的 GitHub、Coding、码云都是基于<code>Git</code>的代码托管平台<h3 id="2-设置GitHub博客"><a href="#2-设置GitHub博客" class="headerlink" title="2.设置GitHub博客"></a>2.设置GitHub博客</h3><h5 id="2-1-创建-GitHub-仓库"><a href="#2-1-创建-GitHub-仓库" class="headerlink" title="2.1. 创建 GitHub 仓库"></a>2.1. 创建 GitHub 仓库</h5></li><li>新建一个名为你的用户名<code>.github.io</code>的仓库。比如说，如果你的 GitHub 用户名是faber1，那么你就新建faber1.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://faber1.github.io" target="_blank" rel="noopener">http://faber1.github.io</a></li></ul><ul><li>有几个需要注意的地方<br>注册的邮箱一定要验证，否则不会成功<br>仓库名字必须是：username.github.io，其中username是你的用户名<h5 id="2-2-绑定域名（可选）"><a href="#2-2-绑定域名（可选）" class="headerlink" title="2.2. 绑定域名（可选）"></a>2.2. 绑定域名（可选）</h5></li></ul><ul><li>当然，你不绑定域名肯定也是可以的，就用刚刚创建的的 你的用户名<code>.github.io</code>来访问。如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。就像我的博客地址，默认是 <a href="http://faber1.github.io" target="_blank" rel="noopener">http://faber1.github.io</a> ，但是你也可以使用 <a href="https://faber1.cn" target="_blank" rel="noopener">https://faber1.cn</a> 来访问。</li><li>首先你要注册一个域名，腾讯云 、阿里云 等国内的域名商也是可以的，而且新用户会有一定的折扣。注册好域名，接下来就是域名解析了（域名解析就是把你的域名版绑定到 GitHub 提供的域名的意思）。如果你不会填写解析记录，那么我建议你直接按照我的来填写:<br><img src="/2019/10/13/4/1.png" alt=""><br>在你绑定了新域名之后，原来的你的用户名<code>.github.io</code>并没有失效，只是现在多了一种方式来访问你的博客。<h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h3><h5 id="3-1配置SSH-Key"><a href="#3-1配置SSH-Key" class="headerlink" title="3.1配置SSH Key"></a>3.1配置SSH Key</h5>因为你提交代码肯定要拥有你的 GitHub 权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用 SSK key 来解决本地和服务器的连接问题。<br>打开你的终端，敲入下面的命令<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/. <span class="token function">ssh</span></code></pre>这个是检查你是否有 SSH key 的命令，如果提示 No such file or directory 说明你是第一次使用 Git，很好，你符合我们最开始说的本教程的阅读对象<br>接下来敲入下面的命令<pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"邮件地址"</span></code></pre>这里的<code>邮件地址</code>最好是你之前注册<code>GitHub</code>的地址，这样方便以后的管理。敲入代码后连续按3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容。打开你的 GitHub 主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，并将刚刚复制的内容填入 Key 那里。Title 你可以随便起。最后别忘了保存。就像下面的图片一样：<br><img src="/2019/10/13/4/2.png" alt=""><h5 id="3-2-测试-SSH-key是否成功"><a href="#3-2-测试-SSH-key是否成功" class="headerlink" title="3.2. 测试 SSH key是否成功"></a>3.2. 测试 SSH key是否成功</h5>在终端里面敲入一下命令行并回车：<pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes 并回车，然后会看到：<pre class=" language-bash"><code class="language-bash">Hi L1cardo<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.</code></pre>当你看到这个消息，那么恭喜你，SSH key 配置成功啦！<h5 id="3-3-配置-Git"><a href="#3-3-配置-Git" class="headerlink" title="3.3. 配置 Git"></a>3.3. 配置 Git</h5>在终端里面敲入一下命令行并回车：<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的 GitHub 用户名"</span><span class="token function">git</span> config --global user.email  <span class="token string">"你的 GitHub 注册邮箱"</span></code></pre><h3 id="4-搭建-Hexo-博客"><a href="#4-搭建-Hexo-博客" class="headerlink" title="4. 搭建 Hexo 博客"></a>4. 搭建 Hexo 博客</h3><h5 id="4-1-安装-Hexo"><a href="#4-1-安装-Hexo" class="headerlink" title="4.1. 安装 Hexo"></a>4.1. 安装 Hexo</h5>在终端里面敲入一下命令行并回车：<pre><code>npm install hexo-cli -g</code></pre><h5 id="4-2-初始化-Hexo"><a href="#4-2-初始化-Hexo" class="headerlink" title="4.2. 初始化 Hexo"></a>4.2. 初始化 Hexo</h5>在电脑的某个地方新建一个存放你博客文件的文件夹（名字可以随便取），比如我的是/Users/licardo/数据/博客，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。<br>然后在终端里面执行下面的命令：<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /Users/licardo/数据/博客hexo init</code></pre>Hexo 会自动下载一些文件到这个目录，目录结构如下图：<br><img src="/2019/10/13/4/3.png" alt=""><br>然后要让 Hexo 生成博客文件，在终端里面执行：<pre class=" language-bash"><code class="language-bash">hexo g</code></pre>这样，你的博客就生成了，Hexo 就会在 public 文件夹生成相关 html 文件，这些文件将来都是要提交到 GitHub 去的。<br><img src="/2019/10/13/4/4.png" alt=""><br>接下来我们就可以上传的 GitHub 了，但是我们还什么都没有写，也不知道博客部署完了以后会是什么样子，所以我们最好在本地启动预览服务来看看我们的博客的效果，在终端里执行以下命令：<pre class=" language-bash"><code class="language-bash">hexo s</code></pre>打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容。默认的主题比较丑，打开时就是这个样子：<br><img src="/2019/10/13/4/5.png" alt=""><h5 id="4-3-修改主题"><a href="#4-3-修改主题" class="headerlink" title="4.3. 修改主题"></a>4.3. 修改主题</h5>既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题</a>库，里面有很多好看的、实用的主题。<br>个人比较喜欢的主题是:<code>hexo-theme-matery</code>，我的博客也是利用这个主题搭建的，可以看看最终的效果 <a href="https://faber.cc" target="_blank" rel="noopener">https://faber.cc</a><br>首先下载这个主题，在终端里面执行下面的命令：<br>请在稳定版与最新版中二选一<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /Users/licardo/数据/博客/themes<span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git            <span class="token comment" spellcheck="true"># 稳定版</span><span class="token function">git</span> clone -b develop https://github.com/blinkfox/hexo-theme-matery.git <span class="token comment" spellcheck="true"># 最新版</span></code></pre>下载的主题你可以在 themes 文件夹里面看到了：<br><img src="/2019/10/13/4/6.png" alt=""><br>然后修改<code>Hexo</code>的配置文件，让<code>Hexo</code>使用我们下载的主题来生成博客。找到<code>博客</code>根目录下的<code>_config.yml</code>文件，将其中的<code>theme: landscape</code>改为<code>theme: hexo-theme-matery</code>，就像下面一样：<br><img src="/2019/10/13/4/7.png" alt=""><br>然后在终端里面执行下面的命令：<pre class=" language-bash"><code class="language-bash">hexo cleanhexo ghexo s</code></pre>然后打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到更改主题之后的样子了。<h5 id="4-4-上传到-GitHub"><a href="#4-4-上传到-GitHub" class="headerlink" title="4.4. 上传到 GitHub"></a>4.4. 上传到 GitHub</h5>首先要配置好<code>Hexo</code>的配置文件，让<code>Hexo</code>知道要上传到哪里<br>修改博客文件夹根目录下的<code>_config.yml</code>中有关<code>deploy</code>的部分：<br><img src="/2019/10/13/4/8.png" alt=""><br>将上面的 L1cardo 换成你自己的 GitHub 用户名就可以了。<br>然后安装 Hexo 上传到 GitHub 的插件，终端里面执行：<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre>万事具备了，距离将你的博客部署到 GitHub 上只差一步了，接下来屏住呼吸，在终端里执行下面的命令：<pre class=" language-bash"><code class="language-bash">hexo d</code></pre>博客已经上传到 GitHub 了，那么我们距离访问你的博客只剩下最后一步了。<h5 id="4-5-设置-GitHub-Pages"><a href="#4-5-设置-GitHub-Pages" class="headerlink" title="4.5. 设置 GitHub Pages"></a>4.5. 设置 GitHub Pages</h5><code>GitHub Pages</code>是<code>GitHub</code>为我们提供的静态页面服务<code>Hexo</code>就是一个静态博客框架。我们只有开始<code>GitHub Pages</code>才能使我们的博客生效并且能够被访问。<br>打开你的<code>GitHub</code>博客仓库进行相关设置，设置步骤如下：<br><img src="/2019/10/13/4/9.png" alt=""><br><img src="/2019/10/13/4/10.png" alt=""><br>在这个页面开启<code>GitHub Pages</code>服务即可。<br>其中<code>②</code>是我们自己之前注册过的域名，我们不仅可以通过你的用户名.github.io 来访问，也可以通过自定义域名来访问我们的博客。<br>其中<code>③</code>是强制开启 HTTPS 的意思，这样的话<code>GitHub</code>会强制时候<code>HTTPS</code>来启动你的博客,<code>HTTPS</code>相比较于<code>HTTP</code>来说更安全，所以建议开启。<br>现在你可以用<code>你的用户名.github.io</code>或者用你自己注册的域名来访问你的博客了！<h5 id="4-6-Hexo-相关命令"><a href="#4-6-Hexo-相关命令" class="headerlink" title="4.6. Hexo 相关命令"></a>4.6. Hexo 相关命令</h5>常见命令：<pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"postName"</span>      <span class="token comment" spellcheck="true"># 新建文章</span>hexo new page <span class="token string">"pageName"</span> <span class="token comment" spellcheck="true"># 新建页面</span>hexo generate            <span class="token comment" spellcheck="true"># 生成静态页面至public文件夹</span>hexo server              <span class="token comment" spellcheck="true"># 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>hexo deploy              <span class="token comment" spellcheck="true"># 部署到GitHub</span>hexo <span class="token function">help</span>                <span class="token comment" spellcheck="true"># 查看帮助</span>hexo version             <span class="token comment" spellcheck="true"># 查看Hexo的版本</span></code></pre>缩写：<pre class=" language-bash"><code class="language-bash">hexo n <span class="token operator">==</span> hexo newhexo g <span class="token operator">==</span> hexo generatehexo s <span class="token operator">==</span> hexo serverhexo d <span class="token operator">==</span> hexo deploy</code></pre>组合命令：<pre class=" language-bash"><code class="language-bash">hexo s -g <span class="token comment" spellcheck="true"># 生成并本地预览</span>hexo d -g <span class="token comment" spellcheck="true"># 生成并上传</span></code></pre><h5 id="4-7-config-yml-文件"><a href="#4-7-config-yml-文件" class="headerlink" title="4.7. _config.yml 文件"></a>4.7. _config.yml 文件</h5>这里面都是一些<code>Hexo</code>的全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。<br>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</li></ul><h3 id="5-写博客"><a href="#5-写博客" class="headerlink" title="5. 写博客"></a>5. 写博客</h3><p>定位到博客根目录地址，在博客根目录下打开终端，然后执行命令：</p><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">'my-first-blog'</span></code></pre><p>Hexo 会帮我们在 /source/_posts 文件夹下生成相关 md 格式的文件：<br><img src="/2019/10/13/4/11.png" alt=""></p><ul><li>注意，这里面的默认内容一定不能删除，也就是两个<code>---</code>里面的内容不能删除，这个是帮助<code>Hexo</code>识别文章的内容,<code>Hexo</code>能根据里面的内容自动帮你把文章归类，打标签等。两个<code>---</code>里面的内容我们称之为 <code>Front-matter</code>，其实他有很多属性，但是最常用的就是上面的几个了，更详细的属性你可以在 这里 进行查看</li><li>当然你也可以不用命令来创建新的博客文件，只需在<code>/source/_posts</code>文件夹内新建<code>md</code>格式的文件进行写博客即可。但是一定要注意，必须要包含<code>---</code>内的信息！也就是说必须要有<code>Front-matter</code>!<br>每次写完博客都要使用<code>Hexo</code>的相关命令 来生成相关的博客页面，并且部署到<code>GitHub</code>上面。</li></ul><ul><li>写博客的工具？<br>因为<code>Hexo</code>的博客都是用<code>md</code>格式文件来写的，<code>md</code>格式是<code>Markdown</code>文件的格式，所以只要使用规范的<code>Markdown</code>语法进行书写即可。<br>当然也是有好的<code>Markdown</code>编辑器的，在这里我推荐<code>Mark Text</code>，一个跨平台的<code>Markdown</code>编辑器，开源免费，而且实时渲染的特性使得即使不会<code>Markdown</code>语法也能进行优美的<code>Markdown</code>写作。我的所有的 Markdown 文件都是用它来书写的。</li></ul><ol start="6"><li><p>最终效果<br>可以访问我的博客来查看效果：<a href="http://faber.cc" target="_blank" rel="noopener">http://faber.cc</a><br>当然你也可以使用其他主题，动手能力强的话，你也可以自己修改一些主题的内容，去创建属于你自己的博客！</p></li><li><p>参考<br><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">http://blog.haoji.me/build-blog-website-by-hexo-github.html</a></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deploy持续集成</title>
      <link href="/2019/10/12/deploy/"/>
      <url>/2019/10/12/deploy/</url>
      
        <content type="html"><![CDATA[<h4 id="它能做什么"><a href="#它能做什么" class="headerlink" title="它能做什么"></a>它能做什么</h4><blockquote><ul><li>将应用程序部署到可通过SSH访问的多台服务器</li><li>克隆项目的git存储库</li><li>安装作曲家依赖项</li><li>运行任意的bash命令</li><li>这些步骤中的任何一个都能优雅地处理故障</li><li>保留许多以前的部署</li><li>监视cronjobs正在运行</li><li>允许通过Webhook触发部署</li></ul></blockquote><h3 id="一、安装deployer"><a href="#一、安装deployer" class="headerlink" title="一、安装deployer"></a>一、安装deployer</h3><h6 id="1-要安装Deployer，只需要从Github克隆代码，使用Composer安装依赖项并运行包含的脚本以启动并运行所有内容："><a href="#1-要安装Deployer，只需要从Github克隆代码，使用Composer安装依赖项并运行包含的脚本以启动并运行所有内容：" class="headerlink" title="1.要安装Deployer，只需要从Github克隆代码，使用Composer安装依赖项并运行包含的脚本以启动并运行所有内容："></a>1.要安装Deployer，只需要从Github克隆代码，使用Composer安装依赖项并运行包含的脚本以启动并运行所有内容：</h6><pre class=" language-bash"><code class="language-bash">代码地址为：https://github.com/REBELinBLUE/deployer.git安装依赖<span class="token function">apt-get</span> <span class="token function">install</span> beanstalkd<span class="token function">apt-get</span> <span class="token function">install</span> supervisor<span class="token function">wget</span> https://getcomposer.org/composer.phar<span class="token function">mv</span> composer.phar composer<span class="token function">sudo</span> <span class="token function">mv</span> composer /usr/local/bin/</code></pre><h6 id="2-检查php版本"><a href="#2-检查php版本" class="headerlink" title="2.检查php版本"></a>2.检查php版本</h6><h3 id="二、拉取代码"><a href="#二、拉取代码" class="headerlink" title="二、拉取代码"></a>二、拉取代码</h3><h6 id="1-拉取代码"><a href="#1-拉取代码" class="headerlink" title="1.拉取代码"></a>1.拉取代码</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/REBELinBLUE/deployer.git deployer</code></pre><h6 id="2-查看最新版本"><a href="#2-查看最新版本" class="headerlink" title="2.查看最新版本"></a>2.查看最新版本</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>最新版本<span class="token operator">></span> 例如：git checkout 0.0.47</code></pre><h3 id="三、运行安装程序"><a href="#三、运行安装程序" class="headerlink" title="三、运行安装程序"></a>三、运行安装程序</h3><h6 id="1-安装依赖项"><a href="#1-安装依赖项" class="headerlink" title="1.安装依赖项"></a>1.安装依赖项</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> vendor$ composer <span class="token function">install</span> -o --no-dev$ <span class="token function">npm</span> <span class="token function">install</span> --production</code></pre><h6 id="2-确保存储和上传目录是可写的"><a href="#2-确保存储和上传目录是可写的" class="headerlink" title="2.确保存储和上传目录是可写的"></a>2.确保存储和上传目录是可写的</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chmod</span> -R 777 storage</code></pre><h6 id="3-运行安装程序并按照说明进行安装"><a href="#3-运行安装程序并按照说明进行安装" class="headerlink" title="3.运行安装程序并按照说明进行安装"></a>3.运行安装程序并按照说明进行安装</h6><pre class=" language-bash"><code class="language-bash">php artisan app:install</code></pre><h3 id="四、配置nginx"><a href="#四、配置nginx" class="headerlink" title="四、配置nginx"></a>四、配置nginx</h3><pre class=" language-bash"><code class="language-bash">upstream websocket <span class="token punctuation">{</span><span class="token comment" spellcheck="true"># If you are using SSL, make sure the upstream server name</span><span class="token comment" spellcheck="true"># corresponds to the certificate's server name(s).</span>server 127.0.0.1:6001<span class="token punctuation">;</span><span class="token punctuation">}</span>server <span class="token punctuation">{</span>listen 80<span class="token punctuation">;</span>server_name deployer.app<span class="token punctuation">;</span>root <span class="token string">"/var/www/deployer/public"</span><span class="token punctuation">;</span>charset utf-8<span class="token punctuation">;</span>access_log off<span class="token punctuation">;</span>error_log /var/log/nginx/deployer.app-error.log error<span class="token punctuation">;</span>sendfile off<span class="token punctuation">;</span>client_max_body_size 100m<span class="token punctuation">;</span>location / <span class="token punctuation">{</span>index index.php<span class="token punctuation">;</span>try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.php?<span class="token variable">$query_string</span><span class="token punctuation">;</span><span class="token punctuation">}</span>location ~ \.php$ <span class="token punctuation">{</span>fastcgi_split_path_info ^<span class="token punctuation">(</span>.+\.php<span class="token punctuation">)</span><span class="token punctuation">(</span>/.+<span class="token punctuation">)</span>$<span class="token punctuation">;</span>fastcgi_pass unix:/var/run/php/php7.0-fpm.sock<span class="token punctuation">;</span>fastcgi_index index.php<span class="token punctuation">;</span>include fastcgi_params<span class="token punctuation">;</span>fastcgi_param SCRIPT_FILENAME <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>fastcgi_intercept_errors off<span class="token punctuation">;</span>fastcgi_buffer_size 16k<span class="token punctuation">;</span>fastcgi_buffers 4 16k<span class="token punctuation">;</span><span class="token punctuation">}</span>location /socket.io <span class="token punctuation">{</span>proxy_set_header Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>proxy_set_header Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span>proxy_http_version 1.1<span class="token punctuation">;</span>proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># if you are using SSL, below line should be 'proxy_pass https://websocket;'</span>proxy_pass http://websocket<span class="token punctuation">;</span><span class="token punctuation">}</span>location ~* /\.<span class="token punctuation">(</span>?<span class="token operator">!</span>well-known\/<span class="token punctuation">)</span> <span class="token punctuation">{</span>deny all<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="五、配置supervisor"><a href="#五、配置supervisor" class="headerlink" title="五、配置supervisor"></a>五、配置supervisor</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /var/www/deployer$ php artisan queue:work --queue<span class="token operator">=</span>deployer-high,deployer-low --sleep<span class="token operator">=</span>3 --tries<span class="token operator">=</span>1 --daemon$ php artisan queue:work --queue<span class="token operator">=</span>deployer-default --sleep<span class="token operator">=</span>3 --tries<span class="token operator">=</span>1 --daemon$ node socket.js<span class="token punctuation">[</span>program:deployer<span class="token punctuation">]</span>command<span class="token operator">=</span>php artisan queue:work --queue<span class="token operator">=</span>deployer-high,deployer-low --sleep<span class="token operator">=</span>3 --tries<span class="token operator">=</span>1 --daemondirectory<span class="token operator">=</span>/var/www/deployerprocess_name<span class="token operator">=</span>queue_%<span class="token punctuation">(</span>process_num<span class="token punctuation">)</span>snumprocs<span class="token operator">=</span>3numprocs_start<span class="token operator">=</span>0stdout_logfile<span class="token operator">=</span>/var/log/supervisor/deployer-%<span class="token punctuation">(</span>process_num<span class="token punctuation">)</span>s-stdout.logstderr_logfile<span class="token operator">=</span>/var/log/supervisor/deployer-%<span class="token punctuation">(</span>process_num<span class="token punctuation">)</span>s-stderr.logstderr_logfile_maxbytes<span class="token operator">=</span>1MBstdout_logfile_maxbytes<span class="token operator">=</span>1MBredirect_stderr<span class="token operator">=</span>trueautostart<span class="token operator">=</span>trueautorestart<span class="token operator">=</span>true<span class="token punctuation">[</span>program:deployer-socketio<span class="token punctuation">]</span>command<span class="token operator">=</span>node socket.jsdirectory<span class="token operator">=</span>/var/www/deployernumprocs<span class="token operator">=</span>1autostart<span class="token operator">=</span>trueautorestart<span class="token operator">=</span>trueenvironment<span class="token operator">=</span>HOME<span class="token operator">=</span><span class="token string">"/var/www/deployer"</span>,NODE_ENV<span class="token operator">=</span><span class="token string">"production"</span>stderr_logfile<span class="token operator">=</span>/var/log/supervisor/deployer-socket-stderr.logstdout_logfile<span class="token operator">=</span>/var/log/supervisor/deployer-socket-stdout.logstderr_logfile_maxbytes<span class="token operator">=</span>1MBstdout_logfile_maxbytes<span class="token operator">=</span>1MB<span class="token punctuation">[</span>program:deployer-broadcast<span class="token punctuation">]</span>command<span class="token operator">=</span>php artisan queue:work --queue<span class="token operator">=</span>deployer-default --sleep<span class="token operator">=</span>3 --tries<span class="token operator">=</span>1 --daemondirectory<span class="token operator">=</span>/var/www/deployernumprocs<span class="token operator">=</span>1stderr_logfile<span class="token operator">=</span>/var/log/supervisor/deployer-broadcast-stderr.logstdout_logfile<span class="token operator">=</span>/var/log/supervisor/deployer-broadcast-stdout.logstderr_logfile_maxbytes<span class="token operator">=</span>1MBstdout_logfile_maxbytes<span class="token operator">=</span>1MBredirect_stderr<span class="token operator">=</span>trueautostart<span class="token operator">=</span>trueautorestart<span class="token operator">=</span>true</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 持续集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持续集成 </tag>
            
            <tag> CI/CD </tag>
            
            <tag> php </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>liunx安装升级python3.0</title>
      <link href="/2019/10/11/python/"/>
      <url>/2019/10/11/python/</url>
      
        <content type="html"><![CDATA[<h2 id="1、安装依赖包"><a href="#1、安装依赖包" class="headerlink" title="1、安装依赖包"></a>1、安装依赖包</h2><h5 id="1）首先安装gcc编译器，gcc有些系统版本已经默认安装，通过-gcc-–version-查看，没安装的先安装gcc"><a href="#1）首先安装gcc编译器，gcc有些系统版本已经默认安装，通过-gcc-–version-查看，没安装的先安装gcc" class="headerlink" title="1）首先安装gcc编译器，gcc有些系统版本已经默认安装，通过  gcc –version  查看，没安装的先安装gcc"></a>1）首先安装gcc编译器，gcc有些系统版本已经默认安装，通过  gcc –version  查看，没安装的先安装gcc</h5><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> gcc</code></pre><h5 id="2）安装其它依赖包，（注：不要缺少，否则有可能安装python出错，python3-7-0以下的版本可不装-libffi-devel-）"><a href="#2）安装其它依赖包，（注：不要缺少，否则有可能安装python出错，python3-7-0以下的版本可不装-libffi-devel-）" class="headerlink" title="2）安装其它依赖包，（注：不要缺少，否则有可能安装python出错，python3.7.0以下的版本可不装 libffi-devel ）"></a>2）安装其它依赖包，（注：不要缺少，否则有可能安装python出错，python3.7.0以下的版本可不装 libffi-devel ）</h5><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> zlib-develbzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</code></pre><h2 id="2、下载python3-7-3源码，根据需求下载"><a href="#2、下载python3-7-3源码，根据需求下载" class="headerlink" title="2、下载python3.7.3源码，根据需求下载"></a>2、下载python3.7.3源码，根据需求下载</h2><h5 id="1）去python官网下载源码包"><a href="#1）去python官网下载源码包" class="headerlink" title="1）去python官网下载源码包"></a>1）去python官网下载源码包</h5><pre class=" language-bash"><code class="language-bash">https://www.python.org/downloads/release/python-373/</code></pre><h2 id="3、建立一个空文件夹，用于存放python3程序"><a href="#3、建立一个空文件夹，用于存放python3程序" class="headerlink" title="3、建立一个空文件夹，用于存放python3程序"></a>3、建立一个空文件夹，用于存放python3程序</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /usr/local/python3</code></pre><h2 id="4、执行配置文件，编译，编译安装"><a href="#4、执行配置文件，编译，编译安装" class="headerlink" title="4、执行配置文件，编译，编译安装"></a>4、执行配置文件，编译，编译安装</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> Python-3.7.0./configure --prefix<span class="token operator">=</span>/usr/local/python3<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><p>安装完成没有提示错误便安装成功了</p><h2 id="5、建立软连接"><a href="#5、建立软连接" class="headerlink" title="5、建立软连接"></a>5、建立软连接</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">ln</span> -s /usr/local/python3/bin/python3.7 /usr/bin/python3<span class="token function">ln</span> -s /usr/local/python3/bin/pip3.7 /usr/bin/pip3</code></pre><h2 id="6、测试一下python3是否可以用"><a href="#6、测试一下python3是否可以用" class="headerlink" title="6、测试一下python3是否可以用"></a>6、测试一下python3是否可以用</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@mini Python-3.7.0<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># python3</span>Python 3.7.0<span class="token punctuation">(</span>default, Jul282018,22:47:29<span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm镜像源</title>
      <link href="/2019/10/11/npm/"/>
      <url>/2019/10/11/npm/</url>
      
        <content type="html"><![CDATA[<h5 id="1、国内用户，建议将npm的注册表源设置为国内的镜像，可以大幅提升安装速度，先查看本机地址"><a href="#1、国内用户，建议将npm的注册表源设置为国内的镜像，可以大幅提升安装速度，先查看本机地址" class="headerlink" title="1、国内用户，建议将npm的注册表源设置为国内的镜像，可以大幅提升安装速度，先查看本机地址"></a>1、国内用户，建议将npm的注册表源设置为国内的镜像，可以大幅提升安装速度，先查看本机地址</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config get registry</code></pre><h5 id="2、国内优秀npm镜像推荐及使用"><a href="#2、国内优秀npm镜像推荐及使用" class="headerlink" title="2、国内优秀npm镜像推荐及使用"></a>2、国内优秀npm镜像推荐及使用</h5><pre class=" language-bash"><code class="language-bash">淘宝npm镜像 ·搜索地址：http://npm.taobao.org/ ·registry地址：http://registry.npm.taobao.org/</code></pre><pre class=" language-bash"><code class="language-bash">cnpmjs镜像 ·搜索地址：http://cnpmjs.org/ ·registry地址：http://r.cnpmjs.org/</code></pre><h5 id="3、永久配置"><a href="#3、永久配置" class="headerlink" title="3、永久配置"></a>3、永久配置</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
